/* automatically generated by rust-bindgen */

pub const BLE_ADVERTISING_ENABLED: ::cty::c_uint = 0;
pub const BLE_DTM_ENABLED: ::cty::c_uint = 0;
pub const BLE_RACP_ENABLED: ::cty::c_uint = 0;
pub const NRF_BLE_QWR_ENABLED: ::cty::c_uint = 0;
pub const PEER_MANAGER_ENABLED: ::cty::c_uint = 0;
pub const BLE_ANCS_C_ENABLED: ::cty::c_uint = 0;
pub const BLE_ANS_C_ENABLED: ::cty::c_uint = 0;
pub const BLE_BAS_C_ENABLED: ::cty::c_uint = 0;
pub const BLE_BAS_ENABLED: ::cty::c_uint = 0;
pub const BLE_CSCS_ENABLED: ::cty::c_uint = 0;
pub const BLE_CTS_C_ENABLED: ::cty::c_uint = 0;
pub const BLE_DIS_ENABLED: ::cty::c_uint = 0;
pub const BLE_GLS_ENABLED: ::cty::c_uint = 0;
pub const BLE_HIDS_ENABLED: ::cty::c_uint = 0;
pub const BLE_HRS_C_ENABLED: ::cty::c_uint = 0;
pub const BLE_HRS_ENABLED: ::cty::c_uint = 0;
pub const BLE_HTS_ENABLED: ::cty::c_uint = 0;
pub const BLE_IAS_C_ENABLED: ::cty::c_uint = 0;
pub const BLE_IAS_ENABLED: ::cty::c_uint = 0;
pub const BLE_LBS_C_ENABLED: ::cty::c_uint = 0;
pub const BLE_LBS_ENABLED: ::cty::c_uint = 0;
pub const BLE_LLS_ENABLED: ::cty::c_uint = 0;
pub const BLE_NUS_C_ENABLED: ::cty::c_uint = 0;
pub const BLE_NUS_ENABLED: ::cty::c_uint = 0;
pub const BLE_RSCS_C_ENABLED: ::cty::c_uint = 0;
pub const BLE_RSCS_ENABLED: ::cty::c_uint = 0;
pub const BLE_TPS_ENABLED: ::cty::c_uint = 0;
pub const ADC_ENABLED: ::cty::c_uint = 0;
pub const APP_USBD_ENABLED: ::cty::c_uint = 0;
pub const CLOCK_ENABLED: ::cty::c_uint = 1;
pub const CLOCK_CONFIG_XTAL_FREQ: ::cty::c_uint = 255;
pub const CLOCK_CONFIG_LF_SRC: ::cty::c_uint = 1;
pub const CLOCK_CONFIG_IRQ_PRIORITY: ::cty::c_uint = 3;
pub const CLOCK_CONFIG_LOG_ENABLED: ::cty::c_uint = 0;
pub const COMP_ENABLED: ::cty::c_uint = 0;
pub const EGU_ENABLED: ::cty::c_uint = 0;
pub const GPIOTE_ENABLED: ::cty::c_uint = 0;
pub const I2S_ENABLED: ::cty::c_uint = 0;
pub const LPCOMP_ENABLED: ::cty::c_uint = 0;
pub const PDM_ENABLED: ::cty::c_uint = 0;
pub const PERIPHERAL_RESOURCE_SHARING_ENABLED: ::cty::c_uint = 0;
pub const POWER_ENABLED: ::cty::c_uint = 0;
pub const PPI_ENABLED: ::cty::c_uint = 0;
pub const PWM_ENABLED: ::cty::c_uint = 0;
pub const QDEC_ENABLED: ::cty::c_uint = 0;
pub const RNG_ENABLED: ::cty::c_uint = 0;
pub const RTC_ENABLED: ::cty::c_uint = 0;
pub const SAADC_ENABLED: ::cty::c_uint = 0;
pub const SPIS_ENABLED: ::cty::c_uint = 0;
pub const SPI_ENABLED: ::cty::c_uint = 0;
pub const TIMER_ENABLED: ::cty::c_uint = 0;
pub const TWIS_ENABLED: ::cty::c_uint = 0;
pub const TWI_ENABLED: ::cty::c_uint = 0;
pub const UART_ENABLED: ::cty::c_uint = 1;
pub const UART_DEFAULT_CONFIG_HWFC: ::cty::c_uint = 0;
pub const UART_DEFAULT_CONFIG_PARITY: ::cty::c_uint = 0;
pub const UART_DEFAULT_CONFIG_BAUDRATE: ::cty::c_uint = 30924800;
pub const UART_DEFAULT_CONFIG_IRQ_PRIORITY: ::cty::c_uint = 3;
pub const UART_EASY_DMA_SUPPORT: ::cty::c_uint = 1;
pub const UART_LEGACY_SUPPORT: ::cty::c_uint = 1;
pub const UART0_ENABLED: ::cty::c_uint = 1;
pub const UART0_CONFIG_USE_EASY_DMA: ::cty::c_uint = 1;
pub const UART_CONFIG_LOG_ENABLED: ::cty::c_uint = 0;
pub const USBD_ENABLED: ::cty::c_uint = 0;
pub const WDT_ENABLED: ::cty::c_uint = 0;
pub const APP_FIFO_ENABLED: ::cty::c_uint = 1;
pub const APP_GPIOTE_ENABLED: ::cty::c_uint = 0;
pub const APP_PWM_ENABLED: ::cty::c_uint = 0;
pub const APP_SCHEDULER_ENABLED: ::cty::c_uint = 0;
pub const APP_TIMER_ENABLED: ::cty::c_uint = 1;
pub const APP_TIMER_WITH_PROFILER: ::cty::c_uint = 0;
pub const APP_TIMER_KEEPS_RTC_ACTIVE: ::cty::c_uint = 0;
pub const APP_TWI_ENABLED: ::cty::c_uint = 0;
pub const APP_UART_ENABLED: ::cty::c_uint = 1;
pub const APP_UART_DRIVER_INSTANCE: ::cty::c_uint = 0;
pub const APP_USBD_CLASS_AUDIO_ENABLED: ::cty::c_uint = 0;
pub const APP_USBD_CLASS_HID_ENABLED: ::cty::c_uint = 0;
pub const APP_USBD_HID_GENERIC_ENABLED: ::cty::c_uint = 0;
pub const APP_USBD_HID_KBD_ENABLED: ::cty::c_uint = 0;
pub const APP_USBD_HID_MOUSE_ENABLED: ::cty::c_uint = 0;
pub const BUTTON_ENABLED: ::cty::c_uint = 0;
pub const CRC16_ENABLED: ::cty::c_uint = 0;
pub const CRC32_ENABLED: ::cty::c_uint = 0;
pub const ECC_ENABLED: ::cty::c_uint = 0;
pub const FDS_ENABLED: ::cty::c_uint = 0;
pub const FSTORAGE_ENABLED: ::cty::c_uint = 0;
pub const HARDFAULT_HANDLER_ENABLED: ::cty::c_uint = 0;
pub const HCI_MEM_POOL_ENABLED: ::cty::c_uint = 0;
pub const HCI_SLIP_ENABLED: ::cty::c_uint = 0;
pub const HCI_TRANSPORT_ENABLED: ::cty::c_uint = 0;
pub const LED_SOFTBLINK_ENABLED: ::cty::c_uint = 0;
pub const LOW_POWER_PWM_ENABLED: ::cty::c_uint = 0;
pub const MEM_MANAGER_ENABLED: ::cty::c_uint = 0;
pub const NRF_CSENSE_ENABLED: ::cty::c_uint = 0;
pub const NRF_DRV_CSENSE_ENABLED: ::cty::c_uint = 0;
pub const NRF_QUEUE_ENABLED: ::cty::c_uint = 0;
pub const SLIP_ENABLED: ::cty::c_uint = 0;
pub const APP_USBD_CLASS_CDC_ACM_ENABLED: ::cty::c_uint = 0;
pub const APP_USBD_CDC_ACM_LOG_ENABLED: ::cty::c_uint = 0;
pub const APP_USBD_CLASS_MSC_ENABLED: ::cty::c_uint = 0;
pub const APP_USBD_MSC_CLASS_LOG_ENABLED: ::cty::c_uint = 0;
pub const NRF_LOG_ENABLED: ::cty::c_uint = 0;
pub const NRF_LOG_BACKEND_MAX_STRING_LENGTH: ::cty::c_uint = 256;
pub const NRF_LOG_TIMESTAMP_DIGITS: ::cty::c_uint = 8;
pub const NRF_LOG_BACKEND_SERIAL_USES_UART: ::cty::c_uint = 1;
pub const NRF_LOG_BACKEND_SERIAL_UART_BAUDRATE: ::cty::c_uint = 30924800;
pub const NRF_LOG_BACKEND_SERIAL_UART_TX_PIN: ::cty::c_uint = 9;
pub const NRF_LOG_BACKEND_SERIAL_UART_RX_PIN: ::cty::c_uint = 11;
pub const NRF_LOG_BACKEND_SERIAL_UART_RTS_PIN: ::cty::c_uint = 8;
pub const NRF_LOG_BACKEND_SERIAL_UART_CTS_PIN: ::cty::c_uint = 10;
pub const NRF_LOG_BACKEND_SERIAL_UART_FLOW_CONTROL: ::cty::c_uint = 0;
pub const NRF_LOG_BACKEND_UART_INSTANCE: ::cty::c_uint = 0;
pub const NRF_LOG_BACKEND_SERIAL_USES_RTT: ::cty::c_uint = 0;
pub const SEGGER_RTT_CONFIG_BUFFER_SIZE_UP: ::cty::c_uint = 64;
pub const SEGGER_RTT_CONFIG_MAX_NUM_UP_BUFFERS: ::cty::c_uint = 2;
pub const SEGGER_RTT_CONFIG_BUFFER_SIZE_DOWN: ::cty::c_uint = 16;
pub const SEGGER_RTT_CONFIG_MAX_NUM_DOWN_BUFFERS: ::cty::c_uint = 2;
pub const _STDINT_H: ::cty::c_uint = 1;
pub const _FEATURES_H: ::cty::c_uint = 1;
pub const _DEFAULT_SOURCE: ::cty::c_uint = 1;
pub const __USE_ISOC11: ::cty::c_uint = 1;
pub const __USE_ISOC99: ::cty::c_uint = 1;
pub const __USE_ISOC95: ::cty::c_uint = 1;
pub const __USE_POSIX_IMPLICITLY: ::cty::c_uint = 1;
pub const _POSIX_SOURCE: ::cty::c_uint = 1;
pub const _POSIX_C_SOURCE: ::cty::c_uint = 200809;
pub const __USE_POSIX: ::cty::c_uint = 1;
pub const __USE_POSIX2: ::cty::c_uint = 1;
pub const __USE_POSIX199309: ::cty::c_uint = 1;
pub const __USE_POSIX199506: ::cty::c_uint = 1;
pub const __USE_XOPEN2K: ::cty::c_uint = 1;
pub const __USE_XOPEN2K8: ::cty::c_uint = 1;
pub const _ATFILE_SOURCE: ::cty::c_uint = 1;
pub const __USE_MISC: ::cty::c_uint = 1;
pub const __USE_ATFILE: ::cty::c_uint = 1;
pub const __USE_FORTIFY_LEVEL: ::cty::c_uint = 0;
pub const _STDC_PREDEF_H: ::cty::c_uint = 1;
pub const __STDC_IEC_559__: ::cty::c_uint = 1;
pub const __STDC_IEC_559_COMPLEX__: ::cty::c_uint = 1;
pub const __STDC_ISO_10646__: ::cty::c_uint = 201505;
pub const __STDC_NO_THREADS__: ::cty::c_uint = 1;
pub const __GNU_LIBRARY__: ::cty::c_uint = 6;
pub const __GLIBC__: ::cty::c_uint = 2;
pub const __GLIBC_MINOR__: ::cty::c_uint = 25;
pub const _SYS_CDEFS_H: ::cty::c_uint = 1;
pub const __glibc_c99_flexarr_available: ::cty::c_uint = 1;
pub const __WORDSIZE: ::cty::c_uint = 32;
pub const __WORDSIZE32_SIZE_ULONG: ::cty::c_uint = 0;
pub const __WORDSIZE32_PTRDIFF_LONG: ::cty::c_uint = 0;
pub const __WORDSIZE_TIME64_COMPAT32: ::cty::c_uint = 0;
pub const __GLIBC_USE_LIB_EXT2: ::cty::c_uint = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: ::cty::c_uint = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: ::cty::c_uint = 0;
pub const _BITS_TYPES_H: ::cty::c_uint = 1;
pub const _BITS_TYPESIZES_H: ::cty::c_uint = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: ::cty::c_uint = 0;
pub const __FD_SETSIZE: ::cty::c_uint = 1024;
pub const _BITS_WCHAR_H: ::cty::c_uint = 1;
pub const INT8_MIN: ::cty::c_int = -128;
pub const INT16_MIN: ::cty::c_int = -32768;
pub const INT32_MIN: ::cty::c_int = -2147483648;
pub const INT8_MAX: ::cty::c_uint = 127;
pub const INT16_MAX: ::cty::c_uint = 32767;
pub const INT32_MAX: ::cty::c_uint = 2147483647;
pub const UINT8_MAX: ::cty::c_uint = 255;
pub const UINT16_MAX: ::cty::c_uint = 65535;
pub const UINT32_MAX: ::cty::c_uint = 4294967295;
pub const INT_LEAST8_MIN: ::cty::c_int = -128;
pub const INT_LEAST16_MIN: ::cty::c_int = -32768;
pub const INT_LEAST32_MIN: ::cty::c_int = -2147483648;
pub const INT_LEAST8_MAX: ::cty::c_uint = 127;
pub const INT_LEAST16_MAX: ::cty::c_uint = 32767;
pub const INT_LEAST32_MAX: ::cty::c_uint = 2147483647;
pub const UINT_LEAST8_MAX: ::cty::c_uint = 255;
pub const UINT_LEAST16_MAX: ::cty::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::cty::c_uint = 4294967295;
pub const INT_FAST8_MIN: ::cty::c_int = -128;
pub const INT_FAST16_MIN: ::cty::c_int = -2147483648;
pub const INT_FAST32_MIN: ::cty::c_int = -2147483648;
pub const INT_FAST8_MAX: ::cty::c_uint = 127;
pub const INT_FAST16_MAX: ::cty::c_uint = 2147483647;
pub const INT_FAST32_MAX: ::cty::c_uint = 2147483647;
pub const UINT_FAST8_MAX: ::cty::c_uint = 255;
pub const UINT_FAST16_MAX: ::cty::c_uint = 4294967295;
pub const UINT_FAST32_MAX: ::cty::c_uint = 4294967295;
pub const INTPTR_MIN: ::cty::c_int = -2147483648;
pub const INTPTR_MAX: ::cty::c_uint = 2147483647;
pub const UINTPTR_MAX: ::cty::c_uint = 4294967295;
pub const PTRDIFF_MIN: ::cty::c_int = -2147483648;
pub const PTRDIFF_MAX: ::cty::c_uint = 2147483647;
pub const SIG_ATOMIC_MIN: ::cty::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::cty::c_uint = 2147483647;
pub const SIZE_MAX: ::cty::c_uint = 4294967295;
pub const WINT_MIN: ::cty::c_uint = 0;
pub const WINT_MAX: ::cty::c_uint = 4294967295;
pub const _STDIO_H: ::cty::c_uint = 1;
pub const __FILE_defined: ::cty::c_uint = 1;
pub const ____FILE_defined: ::cty::c_uint = 1;
pub const _G_config_h: ::cty::c_uint = 1;
pub const ____mbstate_t_defined: ::cty::c_uint = 1;
pub const _G_HAVE_MMAP: ::cty::c_uint = 1;
pub const _G_HAVE_MREMAP: ::cty::c_uint = 1;
pub const _G_IO_IO_FILE_VERSION: ::cty::c_uint = 131073;
pub const _G_BUFSIZ: ::cty::c_uint = 8192;
pub const _IO_BUFSIZ: ::cty::c_uint = 8192;
pub const __GNUC_VA_LIST: ::cty::c_uint = 1;
pub const _IO_UNIFIED_JUMPTABLES: ::cty::c_uint = 1;
pub const EOF: ::cty::c_int = -1;
pub const _IOS_INPUT: ::cty::c_uint = 1;
pub const _IOS_OUTPUT: ::cty::c_uint = 2;
pub const _IOS_ATEND: ::cty::c_uint = 4;
pub const _IOS_APPEND: ::cty::c_uint = 8;
pub const _IOS_TRUNC: ::cty::c_uint = 16;
pub const _IOS_NOCREATE: ::cty::c_uint = 32;
pub const _IOS_NOREPLACE: ::cty::c_uint = 64;
pub const _IOS_BIN: ::cty::c_uint = 128;
pub const _IO_MAGIC: ::cty::c_uint = 4222418944;
pub const _OLD_STDIO_MAGIC: ::cty::c_uint = 4206624768;
pub const _IO_MAGIC_MASK: ::cty::c_uint = 4294901760;
pub const _IO_USER_BUF: ::cty::c_uint = 1;
pub const _IO_UNBUFFERED: ::cty::c_uint = 2;
pub const _IO_NO_READS: ::cty::c_uint = 4;
pub const _IO_NO_WRITES: ::cty::c_uint = 8;
pub const _IO_EOF_SEEN: ::cty::c_uint = 16;
pub const _IO_ERR_SEEN: ::cty::c_uint = 32;
pub const _IO_DELETE_DONT_CLOSE: ::cty::c_uint = 64;
pub const _IO_LINKED: ::cty::c_uint = 128;
pub const _IO_IN_BACKUP: ::cty::c_uint = 256;
pub const _IO_LINE_BUF: ::cty::c_uint = 512;
pub const _IO_TIED_PUT_GET: ::cty::c_uint = 1024;
pub const _IO_CURRENTLY_PUTTING: ::cty::c_uint = 2048;
pub const _IO_IS_APPENDING: ::cty::c_uint = 4096;
pub const _IO_IS_FILEBUF: ::cty::c_uint = 8192;
pub const _IO_BAD_SEEN: ::cty::c_uint = 16384;
pub const _IO_USER_LOCK: ::cty::c_uint = 32768;
pub const _IO_FLAGS2_MMAP: ::cty::c_uint = 1;
pub const _IO_FLAGS2_NOTCANCEL: ::cty::c_uint = 2;
pub const _IO_FLAGS2_USER_WBUF: ::cty::c_uint = 8;
pub const _IO_SKIPWS: ::cty::c_uint = 1;
pub const _IO_LEFT: ::cty::c_uint = 2;
pub const _IO_RIGHT: ::cty::c_uint = 4;
pub const _IO_INTERNAL: ::cty::c_uint = 8;
pub const _IO_DEC: ::cty::c_uint = 16;
pub const _IO_OCT: ::cty::c_uint = 32;
pub const _IO_HEX: ::cty::c_uint = 64;
pub const _IO_SHOWBASE: ::cty::c_uint = 128;
pub const _IO_SHOWPOINT: ::cty::c_uint = 256;
pub const _IO_UPPERCASE: ::cty::c_uint = 512;
pub const _IO_SHOWPOS: ::cty::c_uint = 1024;
pub const _IO_SCIENTIFIC: ::cty::c_uint = 2048;
pub const _IO_FIXED: ::cty::c_uint = 4096;
pub const _IO_UNITBUF: ::cty::c_uint = 8192;
pub const _IO_STDIO: ::cty::c_uint = 16384;
pub const _IO_DONT_CLOSE: ::cty::c_uint = 32768;
pub const _IO_BOOLALPHA: ::cty::c_uint = 65536;
pub const _IOFBF: ::cty::c_uint = 0;
pub const _IOLBF: ::cty::c_uint = 1;
pub const _IONBF: ::cty::c_uint = 2;
pub const BUFSIZ: ::cty::c_uint = 8192;
pub const SEEK_SET: ::cty::c_uint = 0;
pub const SEEK_CUR: ::cty::c_uint = 1;
pub const SEEK_END: ::cty::c_uint = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\x00";
pub const L_tmpnam: ::cty::c_uint = 20;
pub const TMP_MAX: ::cty::c_uint = 238328;
pub const FILENAME_MAX: ::cty::c_uint = 4096;
pub const L_ctermid: ::cty::c_uint = 9;
pub const FOPEN_MAX: ::cty::c_uint = 16;
pub const true_: ::cty::c_uint = 1;
pub const false_: ::cty::c_uint = 0;
pub const __bool_true_false_are_defined: ::cty::c_uint = 1;
pub const MDK_MAJOR_VERSION: ::cty::c_uint = 8;
pub const MDK_MINOR_VERSION: ::cty::c_uint = 11;
pub const MDK_MICRO_VERSION: ::cty::c_uint = 1;
pub const __CM0_REV: ::cty::c_uint = 769;
pub const __MPU_PRESENT: ::cty::c_uint = 0;
pub const __NVIC_PRIO_BITS: ::cty::c_uint = 2;
pub const __Vendor_SysTickConfig: ::cty::c_uint = 0;
pub const __CM0_CMSIS_VERSION_MAIN: ::cty::c_uint = 4;
pub const __CM0_CMSIS_VERSION_SUB: ::cty::c_uint = 30;
pub const __CM0_CMSIS_VERSION: ::cty::c_uint = 262174;
pub const __CORTEX_M: ::cty::c_uint = 0;
pub const __FPU_USED: ::cty::c_uint = 0;
pub const APSR_N_Pos: ::cty::c_uint = 31;
pub const APSR_N_Msk: ::cty::c_uint = 2147483648;
pub const APSR_Z_Pos: ::cty::c_uint = 30;
pub const APSR_Z_Msk: ::cty::c_uint = 1073741824;
pub const APSR_C_Pos: ::cty::c_uint = 29;
pub const APSR_C_Msk: ::cty::c_uint = 536870912;
pub const APSR_V_Pos: ::cty::c_uint = 28;
pub const APSR_V_Msk: ::cty::c_uint = 268435456;
pub const IPSR_ISR_Pos: ::cty::c_uint = 0;
pub const IPSR_ISR_Msk: ::cty::c_uint = 511;
pub const xPSR_N_Pos: ::cty::c_uint = 31;
pub const xPSR_N_Msk: ::cty::c_uint = 2147483648;
pub const xPSR_Z_Pos: ::cty::c_uint = 30;
pub const xPSR_Z_Msk: ::cty::c_uint = 1073741824;
pub const xPSR_C_Pos: ::cty::c_uint = 29;
pub const xPSR_C_Msk: ::cty::c_uint = 536870912;
pub const xPSR_V_Pos: ::cty::c_uint = 28;
pub const xPSR_V_Msk: ::cty::c_uint = 268435456;
pub const xPSR_T_Pos: ::cty::c_uint = 24;
pub const xPSR_T_Msk: ::cty::c_uint = 16777216;
pub const xPSR_ISR_Pos: ::cty::c_uint = 0;
pub const xPSR_ISR_Msk: ::cty::c_uint = 511;
pub const CONTROL_SPSEL_Pos: ::cty::c_uint = 1;
pub const CONTROL_SPSEL_Msk: ::cty::c_uint = 2;
pub const SCB_CPUID_IMPLEMENTER_Pos: ::cty::c_uint = 24;
pub const SCB_CPUID_IMPLEMENTER_Msk: ::cty::c_uint = 4278190080;
pub const SCB_CPUID_VARIANT_Pos: ::cty::c_uint = 20;
pub const SCB_CPUID_VARIANT_Msk: ::cty::c_uint = 15728640;
pub const SCB_CPUID_ARCHITECTURE_Pos: ::cty::c_uint = 16;
pub const SCB_CPUID_ARCHITECTURE_Msk: ::cty::c_uint = 983040;
pub const SCB_CPUID_PARTNO_Pos: ::cty::c_uint = 4;
pub const SCB_CPUID_PARTNO_Msk: ::cty::c_uint = 65520;
pub const SCB_CPUID_REVISION_Pos: ::cty::c_uint = 0;
pub const SCB_CPUID_REVISION_Msk: ::cty::c_uint = 15;
pub const SCB_ICSR_NMIPENDSET_Pos: ::cty::c_uint = 31;
pub const SCB_ICSR_NMIPENDSET_Msk: ::cty::c_uint = 2147483648;
pub const SCB_ICSR_PENDSVSET_Pos: ::cty::c_uint = 28;
pub const SCB_ICSR_PENDSVSET_Msk: ::cty::c_uint = 268435456;
pub const SCB_ICSR_PENDSVCLR_Pos: ::cty::c_uint = 27;
pub const SCB_ICSR_PENDSVCLR_Msk: ::cty::c_uint = 134217728;
pub const SCB_ICSR_PENDSTSET_Pos: ::cty::c_uint = 26;
pub const SCB_ICSR_PENDSTSET_Msk: ::cty::c_uint = 67108864;
pub const SCB_ICSR_PENDSTCLR_Pos: ::cty::c_uint = 25;
pub const SCB_ICSR_PENDSTCLR_Msk: ::cty::c_uint = 33554432;
pub const SCB_ICSR_ISRPREEMPT_Pos: ::cty::c_uint = 23;
pub const SCB_ICSR_ISRPREEMPT_Msk: ::cty::c_uint = 8388608;
pub const SCB_ICSR_ISRPENDING_Pos: ::cty::c_uint = 22;
pub const SCB_ICSR_ISRPENDING_Msk: ::cty::c_uint = 4194304;
pub const SCB_ICSR_VECTPENDING_Pos: ::cty::c_uint = 12;
pub const SCB_ICSR_VECTPENDING_Msk: ::cty::c_uint = 2093056;
pub const SCB_ICSR_VECTACTIVE_Pos: ::cty::c_uint = 0;
pub const SCB_ICSR_VECTACTIVE_Msk: ::cty::c_uint = 511;
pub const SCB_AIRCR_VECTKEY_Pos: ::cty::c_uint = 16;
pub const SCB_AIRCR_VECTKEY_Msk: ::cty::c_uint = 4294901760;
pub const SCB_AIRCR_VECTKEYSTAT_Pos: ::cty::c_uint = 16;
pub const SCB_AIRCR_VECTKEYSTAT_Msk: ::cty::c_uint = 4294901760;
pub const SCB_AIRCR_ENDIANESS_Pos: ::cty::c_uint = 15;
pub const SCB_AIRCR_ENDIANESS_Msk: ::cty::c_uint = 32768;
pub const SCB_AIRCR_SYSRESETREQ_Pos: ::cty::c_uint = 2;
pub const SCB_AIRCR_SYSRESETREQ_Msk: ::cty::c_uint = 4;
pub const SCB_AIRCR_VECTCLRACTIVE_Pos: ::cty::c_uint = 1;
pub const SCB_AIRCR_VECTCLRACTIVE_Msk: ::cty::c_uint = 2;
pub const SCB_SCR_SEVONPEND_Pos: ::cty::c_uint = 4;
pub const SCB_SCR_SEVONPEND_Msk: ::cty::c_uint = 16;
pub const SCB_SCR_SLEEPDEEP_Pos: ::cty::c_uint = 2;
pub const SCB_SCR_SLEEPDEEP_Msk: ::cty::c_uint = 4;
pub const SCB_SCR_SLEEPONEXIT_Pos: ::cty::c_uint = 1;
pub const SCB_SCR_SLEEPONEXIT_Msk: ::cty::c_uint = 2;
pub const SCB_CCR_STKALIGN_Pos: ::cty::c_uint = 9;
pub const SCB_CCR_STKALIGN_Msk: ::cty::c_uint = 512;
pub const SCB_CCR_UNALIGN_TRP_Pos: ::cty::c_uint = 3;
pub const SCB_CCR_UNALIGN_TRP_Msk: ::cty::c_uint = 8;
pub const SCB_SHCSR_SVCALLPENDED_Pos: ::cty::c_uint = 15;
pub const SCB_SHCSR_SVCALLPENDED_Msk: ::cty::c_uint = 32768;
pub const SysTick_CTRL_COUNTFLAG_Pos: ::cty::c_uint = 16;
pub const SysTick_CTRL_COUNTFLAG_Msk: ::cty::c_uint = 65536;
pub const SysTick_CTRL_CLKSOURCE_Pos: ::cty::c_uint = 2;
pub const SysTick_CTRL_CLKSOURCE_Msk: ::cty::c_uint = 4;
pub const SysTick_CTRL_TICKINT_Pos: ::cty::c_uint = 1;
pub const SysTick_CTRL_TICKINT_Msk: ::cty::c_uint = 2;
pub const SysTick_CTRL_ENABLE_Pos: ::cty::c_uint = 0;
pub const SysTick_CTRL_ENABLE_Msk: ::cty::c_uint = 1;
pub const SysTick_LOAD_RELOAD_Pos: ::cty::c_uint = 0;
pub const SysTick_LOAD_RELOAD_Msk: ::cty::c_uint = 16777215;
pub const SysTick_VAL_CURRENT_Pos: ::cty::c_uint = 0;
pub const SysTick_VAL_CURRENT_Msk: ::cty::c_uint = 16777215;
pub const SysTick_CALIB_NOREF_Pos: ::cty::c_uint = 31;
pub const SysTick_CALIB_NOREF_Msk: ::cty::c_uint = 2147483648;
pub const SysTick_CALIB_SKEW_Pos: ::cty::c_uint = 30;
pub const SysTick_CALIB_SKEW_Msk: ::cty::c_uint = 1073741824;
pub const SysTick_CALIB_TENMS_Pos: ::cty::c_uint = 0;
pub const SysTick_CALIB_TENMS_Msk: ::cty::c_uint = 16777215;
pub const SCS_BASE: ::cty::c_uint = 3758153728;
pub const SysTick_BASE: ::cty::c_uint = 3758153744;
pub const NVIC_BASE: ::cty::c_uint = 3758153984;
pub const SCB_BASE: ::cty::c_uint = 3758157056;
pub const NRF_POWER_BASE: ::cty::c_uint = 1073741824;
pub const NRF_CLOCK_BASE: ::cty::c_uint = 1073741824;
pub const NRF_MPU_BASE: ::cty::c_uint = 1073741824;
pub const NRF_RADIO_BASE: ::cty::c_uint = 1073745920;
pub const NRF_UART0_BASE: ::cty::c_uint = 1073750016;
pub const NRF_SPI0_BASE: ::cty::c_uint = 1073754112;
pub const NRF_TWI0_BASE: ::cty::c_uint = 1073754112;
pub const NRF_SPI1_BASE: ::cty::c_uint = 1073758208;
pub const NRF_TWI1_BASE: ::cty::c_uint = 1073758208;
pub const NRF_SPIS1_BASE: ::cty::c_uint = 1073758208;
pub const NRF_GPIOTE_BASE: ::cty::c_uint = 1073766400;
pub const NRF_ADC_BASE: ::cty::c_uint = 1073770496;
pub const NRF_TIMER0_BASE: ::cty::c_uint = 1073774592;
pub const NRF_TIMER1_BASE: ::cty::c_uint = 1073778688;
pub const NRF_TIMER2_BASE: ::cty::c_uint = 1073782784;
pub const NRF_RTC0_BASE: ::cty::c_uint = 1073786880;
pub const NRF_TEMP_BASE: ::cty::c_uint = 1073790976;
pub const NRF_RNG_BASE: ::cty::c_uint = 1073795072;
pub const NRF_ECB_BASE: ::cty::c_uint = 1073799168;
pub const NRF_AAR_BASE: ::cty::c_uint = 1073803264;
pub const NRF_CCM_BASE: ::cty::c_uint = 1073803264;
pub const NRF_WDT_BASE: ::cty::c_uint = 1073807360;
pub const NRF_RTC1_BASE: ::cty::c_uint = 1073811456;
pub const NRF_QDEC_BASE: ::cty::c_uint = 1073815552;
pub const NRF_LPCOMP_BASE: ::cty::c_uint = 1073819648;
pub const NRF_SWI_BASE: ::cty::c_uint = 1073823744;
pub const NRF_NVMC_BASE: ::cty::c_uint = 1073864704;
pub const NRF_PPI_BASE: ::cty::c_uint = 1073868800;
pub const NRF_FICR_BASE: ::cty::c_uint = 268435456;
pub const NRF_UICR_BASE: ::cty::c_uint = 268439552;
pub const NRF_GPIO_BASE: ::cty::c_uint = 1342177280;
pub const AAR_INTENSET_NOTRESOLVED_Pos: ::cty::c_uint = 2;
pub const AAR_INTENSET_NOTRESOLVED_Msk: ::cty::c_uint = 4;
pub const AAR_INTENSET_NOTRESOLVED_Disabled: ::cty::c_uint = 0;
pub const AAR_INTENSET_NOTRESOLVED_Enabled: ::cty::c_uint = 1;
pub const AAR_INTENSET_NOTRESOLVED_Set: ::cty::c_uint = 1;
pub const AAR_INTENSET_RESOLVED_Pos: ::cty::c_uint = 1;
pub const AAR_INTENSET_RESOLVED_Msk: ::cty::c_uint = 2;
pub const AAR_INTENSET_RESOLVED_Disabled: ::cty::c_uint = 0;
pub const AAR_INTENSET_RESOLVED_Enabled: ::cty::c_uint = 1;
pub const AAR_INTENSET_RESOLVED_Set: ::cty::c_uint = 1;
pub const AAR_INTENSET_END_Pos: ::cty::c_uint = 0;
pub const AAR_INTENSET_END_Msk: ::cty::c_uint = 1;
pub const AAR_INTENSET_END_Disabled: ::cty::c_uint = 0;
pub const AAR_INTENSET_END_Enabled: ::cty::c_uint = 1;
pub const AAR_INTENSET_END_Set: ::cty::c_uint = 1;
pub const AAR_INTENCLR_NOTRESOLVED_Pos: ::cty::c_uint = 2;
pub const AAR_INTENCLR_NOTRESOLVED_Msk: ::cty::c_uint = 4;
pub const AAR_INTENCLR_NOTRESOLVED_Disabled: ::cty::c_uint = 0;
pub const AAR_INTENCLR_NOTRESOLVED_Enabled: ::cty::c_uint = 1;
pub const AAR_INTENCLR_NOTRESOLVED_Clear: ::cty::c_uint = 1;
pub const AAR_INTENCLR_RESOLVED_Pos: ::cty::c_uint = 1;
pub const AAR_INTENCLR_RESOLVED_Msk: ::cty::c_uint = 2;
pub const AAR_INTENCLR_RESOLVED_Disabled: ::cty::c_uint = 0;
pub const AAR_INTENCLR_RESOLVED_Enabled: ::cty::c_uint = 1;
pub const AAR_INTENCLR_RESOLVED_Clear: ::cty::c_uint = 1;
pub const AAR_INTENCLR_END_Pos: ::cty::c_uint = 0;
pub const AAR_INTENCLR_END_Msk: ::cty::c_uint = 1;
pub const AAR_INTENCLR_END_Disabled: ::cty::c_uint = 0;
pub const AAR_INTENCLR_END_Enabled: ::cty::c_uint = 1;
pub const AAR_INTENCLR_END_Clear: ::cty::c_uint = 1;
pub const AAR_STATUS_STATUS_Pos: ::cty::c_uint = 0;
pub const AAR_STATUS_STATUS_Msk: ::cty::c_uint = 15;
pub const AAR_ENABLE_ENABLE_Pos: ::cty::c_uint = 0;
pub const AAR_ENABLE_ENABLE_Msk: ::cty::c_uint = 3;
pub const AAR_ENABLE_ENABLE_Disabled: ::cty::c_uint = 0;
pub const AAR_ENABLE_ENABLE_Enabled: ::cty::c_uint = 3;
pub const AAR_NIRK_NIRK_Pos: ::cty::c_uint = 0;
pub const AAR_NIRK_NIRK_Msk: ::cty::c_uint = 31;
pub const AAR_POWER_POWER_Pos: ::cty::c_uint = 0;
pub const AAR_POWER_POWER_Msk: ::cty::c_uint = 1;
pub const AAR_POWER_POWER_Disabled: ::cty::c_uint = 0;
pub const AAR_POWER_POWER_Enabled: ::cty::c_uint = 1;
pub const ADC_INTENSET_END_Pos: ::cty::c_uint = 0;
pub const ADC_INTENSET_END_Msk: ::cty::c_uint = 1;
pub const ADC_INTENSET_END_Disabled: ::cty::c_uint = 0;
pub const ADC_INTENSET_END_Enabled: ::cty::c_uint = 1;
pub const ADC_INTENSET_END_Set: ::cty::c_uint = 1;
pub const ADC_INTENCLR_END_Pos: ::cty::c_uint = 0;
pub const ADC_INTENCLR_END_Msk: ::cty::c_uint = 1;
pub const ADC_INTENCLR_END_Disabled: ::cty::c_uint = 0;
pub const ADC_INTENCLR_END_Enabled: ::cty::c_uint = 1;
pub const ADC_INTENCLR_END_Clear: ::cty::c_uint = 1;
pub const ADC_BUSY_BUSY_Pos: ::cty::c_uint = 0;
pub const ADC_BUSY_BUSY_Msk: ::cty::c_uint = 1;
pub const ADC_BUSY_BUSY_Ready: ::cty::c_uint = 0;
pub const ADC_BUSY_BUSY_Busy: ::cty::c_uint = 1;
pub const ADC_ENABLE_ENABLE_Pos: ::cty::c_uint = 0;
pub const ADC_ENABLE_ENABLE_Msk: ::cty::c_uint = 3;
pub const ADC_ENABLE_ENABLE_Disabled: ::cty::c_uint = 0;
pub const ADC_ENABLE_ENABLE_Enabled: ::cty::c_uint = 1;
pub const ADC_CONFIG_EXTREFSEL_Pos: ::cty::c_uint = 16;
pub const ADC_CONFIG_EXTREFSEL_Msk: ::cty::c_uint = 196608;
pub const ADC_CONFIG_EXTREFSEL_None: ::cty::c_uint = 0;
pub const ADC_CONFIG_EXTREFSEL_AnalogReference0: ::cty::c_uint = 1;
pub const ADC_CONFIG_EXTREFSEL_AnalogReference1: ::cty::c_uint = 2;
pub const ADC_CONFIG_PSEL_Pos: ::cty::c_uint = 8;
pub const ADC_CONFIG_PSEL_Msk: ::cty::c_uint = 65280;
pub const ADC_CONFIG_PSEL_Disabled: ::cty::c_uint = 0;
pub const ADC_CONFIG_PSEL_AnalogInput0: ::cty::c_uint = 1;
pub const ADC_CONFIG_PSEL_AnalogInput1: ::cty::c_uint = 2;
pub const ADC_CONFIG_PSEL_AnalogInput2: ::cty::c_uint = 4;
pub const ADC_CONFIG_PSEL_AnalogInput3: ::cty::c_uint = 8;
pub const ADC_CONFIG_PSEL_AnalogInput4: ::cty::c_uint = 16;
pub const ADC_CONFIG_PSEL_AnalogInput5: ::cty::c_uint = 32;
pub const ADC_CONFIG_PSEL_AnalogInput6: ::cty::c_uint = 64;
pub const ADC_CONFIG_PSEL_AnalogInput7: ::cty::c_uint = 128;
pub const ADC_CONFIG_REFSEL_Pos: ::cty::c_uint = 5;
pub const ADC_CONFIG_REFSEL_Msk: ::cty::c_uint = 96;
pub const ADC_CONFIG_REFSEL_VBG: ::cty::c_uint = 0;
pub const ADC_CONFIG_REFSEL_External: ::cty::c_uint = 1;
pub const ADC_CONFIG_REFSEL_SupplyOneHalfPrescaling: ::cty::c_uint = 2;
pub const ADC_CONFIG_REFSEL_SupplyOneThirdPrescaling: ::cty::c_uint = 3;
pub const ADC_CONFIG_INPSEL_Pos: ::cty::c_uint = 2;
pub const ADC_CONFIG_INPSEL_Msk: ::cty::c_uint = 28;
pub const ADC_CONFIG_INPSEL_AnalogInputNoPrescaling: ::cty::c_uint = 0;
pub const ADC_CONFIG_INPSEL_AnalogInputTwoThirdsPrescaling: ::cty::c_uint = 1;
pub const ADC_CONFIG_INPSEL_AnalogInputOneThirdPrescaling: ::cty::c_uint = 2;
pub const ADC_CONFIG_INPSEL_SupplyTwoThirdsPrescaling: ::cty::c_uint = 5;
pub const ADC_CONFIG_INPSEL_SupplyOneThirdPrescaling: ::cty::c_uint = 6;
pub const ADC_CONFIG_RES_Pos: ::cty::c_uint = 0;
pub const ADC_CONFIG_RES_Msk: ::cty::c_uint = 3;
pub const ADC_CONFIG_RES_8bit: ::cty::c_uint = 0;
pub const ADC_CONFIG_RES_9bit: ::cty::c_uint = 1;
pub const ADC_CONFIG_RES_10bit: ::cty::c_uint = 2;
pub const ADC_RESULT_RESULT_Pos: ::cty::c_uint = 0;
pub const ADC_RESULT_RESULT_Msk: ::cty::c_uint = 1023;
pub const ADC_POWER_POWER_Pos: ::cty::c_uint = 0;
pub const ADC_POWER_POWER_Msk: ::cty::c_uint = 1;
pub const ADC_POWER_POWER_Disabled: ::cty::c_uint = 0;
pub const ADC_POWER_POWER_Enabled: ::cty::c_uint = 1;
pub const CCM_SHORTS_ENDKSGEN_CRYPT_Pos: ::cty::c_uint = 0;
pub const CCM_SHORTS_ENDKSGEN_CRYPT_Msk: ::cty::c_uint = 1;
pub const CCM_SHORTS_ENDKSGEN_CRYPT_Disabled: ::cty::c_uint = 0;
pub const CCM_SHORTS_ENDKSGEN_CRYPT_Enabled: ::cty::c_uint = 1;
pub const CCM_INTENSET_ERROR_Pos: ::cty::c_uint = 2;
pub const CCM_INTENSET_ERROR_Msk: ::cty::c_uint = 4;
pub const CCM_INTENSET_ERROR_Disabled: ::cty::c_uint = 0;
pub const CCM_INTENSET_ERROR_Enabled: ::cty::c_uint = 1;
pub const CCM_INTENSET_ERROR_Set: ::cty::c_uint = 1;
pub const CCM_INTENSET_ENDCRYPT_Pos: ::cty::c_uint = 1;
pub const CCM_INTENSET_ENDCRYPT_Msk: ::cty::c_uint = 2;
pub const CCM_INTENSET_ENDCRYPT_Disabled: ::cty::c_uint = 0;
pub const CCM_INTENSET_ENDCRYPT_Enabled: ::cty::c_uint = 1;
pub const CCM_INTENSET_ENDCRYPT_Set: ::cty::c_uint = 1;
pub const CCM_INTENSET_ENDKSGEN_Pos: ::cty::c_uint = 0;
pub const CCM_INTENSET_ENDKSGEN_Msk: ::cty::c_uint = 1;
pub const CCM_INTENSET_ENDKSGEN_Disabled: ::cty::c_uint = 0;
pub const CCM_INTENSET_ENDKSGEN_Enabled: ::cty::c_uint = 1;
pub const CCM_INTENSET_ENDKSGEN_Set: ::cty::c_uint = 1;
pub const CCM_INTENCLR_ERROR_Pos: ::cty::c_uint = 2;
pub const CCM_INTENCLR_ERROR_Msk: ::cty::c_uint = 4;
pub const CCM_INTENCLR_ERROR_Disabled: ::cty::c_uint = 0;
pub const CCM_INTENCLR_ERROR_Enabled: ::cty::c_uint = 1;
pub const CCM_INTENCLR_ERROR_Clear: ::cty::c_uint = 1;
pub const CCM_INTENCLR_ENDCRYPT_Pos: ::cty::c_uint = 1;
pub const CCM_INTENCLR_ENDCRYPT_Msk: ::cty::c_uint = 2;
pub const CCM_INTENCLR_ENDCRYPT_Disabled: ::cty::c_uint = 0;
pub const CCM_INTENCLR_ENDCRYPT_Enabled: ::cty::c_uint = 1;
pub const CCM_INTENCLR_ENDCRYPT_Clear: ::cty::c_uint = 1;
pub const CCM_INTENCLR_ENDKSGEN_Pos: ::cty::c_uint = 0;
pub const CCM_INTENCLR_ENDKSGEN_Msk: ::cty::c_uint = 1;
pub const CCM_INTENCLR_ENDKSGEN_Disabled: ::cty::c_uint = 0;
pub const CCM_INTENCLR_ENDKSGEN_Enabled: ::cty::c_uint = 1;
pub const CCM_INTENCLR_ENDKSGEN_Clear: ::cty::c_uint = 1;
pub const CCM_MICSTATUS_MICSTATUS_Pos: ::cty::c_uint = 0;
pub const CCM_MICSTATUS_MICSTATUS_Msk: ::cty::c_uint = 1;
pub const CCM_MICSTATUS_MICSTATUS_CheckFailed: ::cty::c_uint = 0;
pub const CCM_MICSTATUS_MICSTATUS_CheckPassed: ::cty::c_uint = 1;
pub const CCM_ENABLE_ENABLE_Pos: ::cty::c_uint = 0;
pub const CCM_ENABLE_ENABLE_Msk: ::cty::c_uint = 3;
pub const CCM_ENABLE_ENABLE_Disabled: ::cty::c_uint = 0;
pub const CCM_ENABLE_ENABLE_Enabled: ::cty::c_uint = 2;
pub const CCM_MODE_MODE_Pos: ::cty::c_uint = 0;
pub const CCM_MODE_MODE_Msk: ::cty::c_uint = 1;
pub const CCM_MODE_MODE_Encryption: ::cty::c_uint = 0;
pub const CCM_MODE_MODE_Decryption: ::cty::c_uint = 1;
pub const CCM_POWER_POWER_Pos: ::cty::c_uint = 0;
pub const CCM_POWER_POWER_Msk: ::cty::c_uint = 1;
pub const CCM_POWER_POWER_Disabled: ::cty::c_uint = 0;
pub const CCM_POWER_POWER_Enabled: ::cty::c_uint = 1;
pub const CLOCK_INTENSET_CTTO_Pos: ::cty::c_uint = 4;
pub const CLOCK_INTENSET_CTTO_Msk: ::cty::c_uint = 16;
pub const CLOCK_INTENSET_CTTO_Disabled: ::cty::c_uint = 0;
pub const CLOCK_INTENSET_CTTO_Enabled: ::cty::c_uint = 1;
pub const CLOCK_INTENSET_CTTO_Set: ::cty::c_uint = 1;
pub const CLOCK_INTENSET_DONE_Pos: ::cty::c_uint = 3;
pub const CLOCK_INTENSET_DONE_Msk: ::cty::c_uint = 8;
pub const CLOCK_INTENSET_DONE_Disabled: ::cty::c_uint = 0;
pub const CLOCK_INTENSET_DONE_Enabled: ::cty::c_uint = 1;
pub const CLOCK_INTENSET_DONE_Set: ::cty::c_uint = 1;
pub const CLOCK_INTENSET_LFCLKSTARTED_Pos: ::cty::c_uint = 1;
pub const CLOCK_INTENSET_LFCLKSTARTED_Msk: ::cty::c_uint = 2;
pub const CLOCK_INTENSET_LFCLKSTARTED_Disabled: ::cty::c_uint = 0;
pub const CLOCK_INTENSET_LFCLKSTARTED_Enabled: ::cty::c_uint = 1;
pub const CLOCK_INTENSET_LFCLKSTARTED_Set: ::cty::c_uint = 1;
pub const CLOCK_INTENSET_HFCLKSTARTED_Pos: ::cty::c_uint = 0;
pub const CLOCK_INTENSET_HFCLKSTARTED_Msk: ::cty::c_uint = 1;
pub const CLOCK_INTENSET_HFCLKSTARTED_Disabled: ::cty::c_uint = 0;
pub const CLOCK_INTENSET_HFCLKSTARTED_Enabled: ::cty::c_uint = 1;
pub const CLOCK_INTENSET_HFCLKSTARTED_Set: ::cty::c_uint = 1;
pub const CLOCK_INTENCLR_CTTO_Pos: ::cty::c_uint = 4;
pub const CLOCK_INTENCLR_CTTO_Msk: ::cty::c_uint = 16;
pub const CLOCK_INTENCLR_CTTO_Disabled: ::cty::c_uint = 0;
pub const CLOCK_INTENCLR_CTTO_Enabled: ::cty::c_uint = 1;
pub const CLOCK_INTENCLR_CTTO_Clear: ::cty::c_uint = 1;
pub const CLOCK_INTENCLR_DONE_Pos: ::cty::c_uint = 3;
pub const CLOCK_INTENCLR_DONE_Msk: ::cty::c_uint = 8;
pub const CLOCK_INTENCLR_DONE_Disabled: ::cty::c_uint = 0;
pub const CLOCK_INTENCLR_DONE_Enabled: ::cty::c_uint = 1;
pub const CLOCK_INTENCLR_DONE_Clear: ::cty::c_uint = 1;
pub const CLOCK_INTENCLR_LFCLKSTARTED_Pos: ::cty::c_uint = 1;
pub const CLOCK_INTENCLR_LFCLKSTARTED_Msk: ::cty::c_uint = 2;
pub const CLOCK_INTENCLR_LFCLKSTARTED_Disabled: ::cty::c_uint = 0;
pub const CLOCK_INTENCLR_LFCLKSTARTED_Enabled: ::cty::c_uint = 1;
pub const CLOCK_INTENCLR_LFCLKSTARTED_Clear: ::cty::c_uint = 1;
pub const CLOCK_INTENCLR_HFCLKSTARTED_Pos: ::cty::c_uint = 0;
pub const CLOCK_INTENCLR_HFCLKSTARTED_Msk: ::cty::c_uint = 1;
pub const CLOCK_INTENCLR_HFCLKSTARTED_Disabled: ::cty::c_uint = 0;
pub const CLOCK_INTENCLR_HFCLKSTARTED_Enabled: ::cty::c_uint = 1;
pub const CLOCK_INTENCLR_HFCLKSTARTED_Clear: ::cty::c_uint = 1;
pub const CLOCK_HFCLKRUN_STATUS_Pos: ::cty::c_uint = 0;
pub const CLOCK_HFCLKRUN_STATUS_Msk: ::cty::c_uint = 1;
pub const CLOCK_HFCLKRUN_STATUS_NotTriggered: ::cty::c_uint = 0;
pub const CLOCK_HFCLKRUN_STATUS_Triggered: ::cty::c_uint = 1;
pub const CLOCK_HFCLKSTAT_STATE_Pos: ::cty::c_uint = 16;
pub const CLOCK_HFCLKSTAT_STATE_Msk: ::cty::c_uint = 65536;
pub const CLOCK_HFCLKSTAT_STATE_NotRunning: ::cty::c_uint = 0;
pub const CLOCK_HFCLKSTAT_STATE_Running: ::cty::c_uint = 1;
pub const CLOCK_HFCLKSTAT_SRC_Pos: ::cty::c_uint = 0;
pub const CLOCK_HFCLKSTAT_SRC_Msk: ::cty::c_uint = 1;
pub const CLOCK_HFCLKSTAT_SRC_RC: ::cty::c_uint = 0;
pub const CLOCK_HFCLKSTAT_SRC_Xtal: ::cty::c_uint = 1;
pub const CLOCK_LFCLKRUN_STATUS_Pos: ::cty::c_uint = 0;
pub const CLOCK_LFCLKRUN_STATUS_Msk: ::cty::c_uint = 1;
pub const CLOCK_LFCLKRUN_STATUS_NotTriggered: ::cty::c_uint = 0;
pub const CLOCK_LFCLKRUN_STATUS_Triggered: ::cty::c_uint = 1;
pub const CLOCK_LFCLKSTAT_STATE_Pos: ::cty::c_uint = 16;
pub const CLOCK_LFCLKSTAT_STATE_Msk: ::cty::c_uint = 65536;
pub const CLOCK_LFCLKSTAT_STATE_NotRunning: ::cty::c_uint = 0;
pub const CLOCK_LFCLKSTAT_STATE_Running: ::cty::c_uint = 1;
pub const CLOCK_LFCLKSTAT_SRC_Pos: ::cty::c_uint = 0;
pub const CLOCK_LFCLKSTAT_SRC_Msk: ::cty::c_uint = 3;
pub const CLOCK_LFCLKSTAT_SRC_RC: ::cty::c_uint = 0;
pub const CLOCK_LFCLKSTAT_SRC_Xtal: ::cty::c_uint = 1;
pub const CLOCK_LFCLKSTAT_SRC_Synth: ::cty::c_uint = 2;
pub const CLOCK_LFCLKSRCCOPY_SRC_Pos: ::cty::c_uint = 0;
pub const CLOCK_LFCLKSRCCOPY_SRC_Msk: ::cty::c_uint = 3;
pub const CLOCK_LFCLKSRCCOPY_SRC_RC: ::cty::c_uint = 0;
pub const CLOCK_LFCLKSRCCOPY_SRC_Xtal: ::cty::c_uint = 1;
pub const CLOCK_LFCLKSRCCOPY_SRC_Synth: ::cty::c_uint = 2;
pub const CLOCK_LFCLKSRC_SRC_Pos: ::cty::c_uint = 0;
pub const CLOCK_LFCLKSRC_SRC_Msk: ::cty::c_uint = 3;
pub const CLOCK_LFCLKSRC_SRC_RC: ::cty::c_uint = 0;
pub const CLOCK_LFCLKSRC_SRC_Xtal: ::cty::c_uint = 1;
pub const CLOCK_LFCLKSRC_SRC_Synth: ::cty::c_uint = 2;
pub const CLOCK_CTIV_CTIV_Pos: ::cty::c_uint = 0;
pub const CLOCK_CTIV_CTIV_Msk: ::cty::c_uint = 127;
pub const CLOCK_XTALFREQ_XTALFREQ_Pos: ::cty::c_uint = 0;
pub const CLOCK_XTALFREQ_XTALFREQ_Msk: ::cty::c_uint = 255;
pub const CLOCK_XTALFREQ_XTALFREQ_32MHz: ::cty::c_uint = 0;
pub const CLOCK_XTALFREQ_XTALFREQ_16MHz: ::cty::c_uint = 255;
pub const ECB_INTENSET_ERRORECB_Pos: ::cty::c_uint = 1;
pub const ECB_INTENSET_ERRORECB_Msk: ::cty::c_uint = 2;
pub const ECB_INTENSET_ERRORECB_Disabled: ::cty::c_uint = 0;
pub const ECB_INTENSET_ERRORECB_Enabled: ::cty::c_uint = 1;
pub const ECB_INTENSET_ERRORECB_Set: ::cty::c_uint = 1;
pub const ECB_INTENSET_ENDECB_Pos: ::cty::c_uint = 0;
pub const ECB_INTENSET_ENDECB_Msk: ::cty::c_uint = 1;
pub const ECB_INTENSET_ENDECB_Disabled: ::cty::c_uint = 0;
pub const ECB_INTENSET_ENDECB_Enabled: ::cty::c_uint = 1;
pub const ECB_INTENSET_ENDECB_Set: ::cty::c_uint = 1;
pub const ECB_INTENCLR_ERRORECB_Pos: ::cty::c_uint = 1;
pub const ECB_INTENCLR_ERRORECB_Msk: ::cty::c_uint = 2;
pub const ECB_INTENCLR_ERRORECB_Disabled: ::cty::c_uint = 0;
pub const ECB_INTENCLR_ERRORECB_Enabled: ::cty::c_uint = 1;
pub const ECB_INTENCLR_ERRORECB_Clear: ::cty::c_uint = 1;
pub const ECB_INTENCLR_ENDECB_Pos: ::cty::c_uint = 0;
pub const ECB_INTENCLR_ENDECB_Msk: ::cty::c_uint = 1;
pub const ECB_INTENCLR_ENDECB_Disabled: ::cty::c_uint = 0;
pub const ECB_INTENCLR_ENDECB_Enabled: ::cty::c_uint = 1;
pub const ECB_INTENCLR_ENDECB_Clear: ::cty::c_uint = 1;
pub const ECB_POWER_POWER_Pos: ::cty::c_uint = 0;
pub const ECB_POWER_POWER_Msk: ::cty::c_uint = 1;
pub const ECB_POWER_POWER_Disabled: ::cty::c_uint = 0;
pub const ECB_POWER_POWER_Enabled: ::cty::c_uint = 1;
pub const FICR_PPFC_PPFC_Pos: ::cty::c_uint = 0;
pub const FICR_PPFC_PPFC_Msk: ::cty::c_uint = 255;
pub const FICR_PPFC_PPFC_Present: ::cty::c_uint = 0;
pub const FICR_PPFC_PPFC_NotPresent: ::cty::c_uint = 255;
pub const FICR_CONFIGID_FWID_Pos: ::cty::c_uint = 16;
pub const FICR_CONFIGID_FWID_Msk: ::cty::c_uint = 4294901760;
pub const FICR_CONFIGID_HWID_Pos: ::cty::c_uint = 0;
pub const FICR_CONFIGID_HWID_Msk: ::cty::c_uint = 65535;
pub const FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Pos: ::cty::c_uint = 0;
pub const FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Msk: ::cty::c_uint = 1;
pub const FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Public: ::cty::c_uint = 0;
pub const FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Random: ::cty::c_uint = 1;
pub const FICR_OVERRIDEEN_BLE_1MBIT_Pos: ::cty::c_uint = 3;
pub const FICR_OVERRIDEEN_BLE_1MBIT_Msk: ::cty::c_uint = 8;
pub const FICR_OVERRIDEEN_BLE_1MBIT_Override: ::cty::c_uint = 0;
pub const FICR_OVERRIDEEN_BLE_1MBIT_NotOverride: ::cty::c_uint = 1;
pub const FICR_OVERRIDEEN_NRF_1MBIT_Pos: ::cty::c_uint = 0;
pub const FICR_OVERRIDEEN_NRF_1MBIT_Msk: ::cty::c_uint = 1;
pub const FICR_OVERRIDEEN_NRF_1MBIT_Override: ::cty::c_uint = 0;
pub const FICR_OVERRIDEEN_NRF_1MBIT_NotOverride: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN31_Pos: ::cty::c_uint = 31;
pub const GPIO_OUT_PIN31_Msk: ::cty::c_uint = 2147483648;
pub const GPIO_OUT_PIN31_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN31_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN30_Pos: ::cty::c_uint = 30;
pub const GPIO_OUT_PIN30_Msk: ::cty::c_uint = 1073741824;
pub const GPIO_OUT_PIN30_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN30_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN29_Pos: ::cty::c_uint = 29;
pub const GPIO_OUT_PIN29_Msk: ::cty::c_uint = 536870912;
pub const GPIO_OUT_PIN29_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN29_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN28_Pos: ::cty::c_uint = 28;
pub const GPIO_OUT_PIN28_Msk: ::cty::c_uint = 268435456;
pub const GPIO_OUT_PIN28_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN28_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN27_Pos: ::cty::c_uint = 27;
pub const GPIO_OUT_PIN27_Msk: ::cty::c_uint = 134217728;
pub const GPIO_OUT_PIN27_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN27_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN26_Pos: ::cty::c_uint = 26;
pub const GPIO_OUT_PIN26_Msk: ::cty::c_uint = 67108864;
pub const GPIO_OUT_PIN26_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN26_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN25_Pos: ::cty::c_uint = 25;
pub const GPIO_OUT_PIN25_Msk: ::cty::c_uint = 33554432;
pub const GPIO_OUT_PIN25_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN25_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN24_Pos: ::cty::c_uint = 24;
pub const GPIO_OUT_PIN24_Msk: ::cty::c_uint = 16777216;
pub const GPIO_OUT_PIN24_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN24_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN23_Pos: ::cty::c_uint = 23;
pub const GPIO_OUT_PIN23_Msk: ::cty::c_uint = 8388608;
pub const GPIO_OUT_PIN23_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN23_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN22_Pos: ::cty::c_uint = 22;
pub const GPIO_OUT_PIN22_Msk: ::cty::c_uint = 4194304;
pub const GPIO_OUT_PIN22_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN22_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN21_Pos: ::cty::c_uint = 21;
pub const GPIO_OUT_PIN21_Msk: ::cty::c_uint = 2097152;
pub const GPIO_OUT_PIN21_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN21_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN20_Pos: ::cty::c_uint = 20;
pub const GPIO_OUT_PIN20_Msk: ::cty::c_uint = 1048576;
pub const GPIO_OUT_PIN20_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN20_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN19_Pos: ::cty::c_uint = 19;
pub const GPIO_OUT_PIN19_Msk: ::cty::c_uint = 524288;
pub const GPIO_OUT_PIN19_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN19_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN18_Pos: ::cty::c_uint = 18;
pub const GPIO_OUT_PIN18_Msk: ::cty::c_uint = 262144;
pub const GPIO_OUT_PIN18_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN18_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN17_Pos: ::cty::c_uint = 17;
pub const GPIO_OUT_PIN17_Msk: ::cty::c_uint = 131072;
pub const GPIO_OUT_PIN17_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN17_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN16_Pos: ::cty::c_uint = 16;
pub const GPIO_OUT_PIN16_Msk: ::cty::c_uint = 65536;
pub const GPIO_OUT_PIN16_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN16_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN15_Pos: ::cty::c_uint = 15;
pub const GPIO_OUT_PIN15_Msk: ::cty::c_uint = 32768;
pub const GPIO_OUT_PIN15_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN15_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN14_Pos: ::cty::c_uint = 14;
pub const GPIO_OUT_PIN14_Msk: ::cty::c_uint = 16384;
pub const GPIO_OUT_PIN14_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN14_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN13_Pos: ::cty::c_uint = 13;
pub const GPIO_OUT_PIN13_Msk: ::cty::c_uint = 8192;
pub const GPIO_OUT_PIN13_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN13_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN12_Pos: ::cty::c_uint = 12;
pub const GPIO_OUT_PIN12_Msk: ::cty::c_uint = 4096;
pub const GPIO_OUT_PIN12_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN12_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN11_Pos: ::cty::c_uint = 11;
pub const GPIO_OUT_PIN11_Msk: ::cty::c_uint = 2048;
pub const GPIO_OUT_PIN11_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN11_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN10_Pos: ::cty::c_uint = 10;
pub const GPIO_OUT_PIN10_Msk: ::cty::c_uint = 1024;
pub const GPIO_OUT_PIN10_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN10_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN9_Pos: ::cty::c_uint = 9;
pub const GPIO_OUT_PIN9_Msk: ::cty::c_uint = 512;
pub const GPIO_OUT_PIN9_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN9_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN8_Pos: ::cty::c_uint = 8;
pub const GPIO_OUT_PIN8_Msk: ::cty::c_uint = 256;
pub const GPIO_OUT_PIN8_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN8_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN7_Pos: ::cty::c_uint = 7;
pub const GPIO_OUT_PIN7_Msk: ::cty::c_uint = 128;
pub const GPIO_OUT_PIN7_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN7_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN6_Pos: ::cty::c_uint = 6;
pub const GPIO_OUT_PIN6_Msk: ::cty::c_uint = 64;
pub const GPIO_OUT_PIN6_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN6_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN5_Pos: ::cty::c_uint = 5;
pub const GPIO_OUT_PIN5_Msk: ::cty::c_uint = 32;
pub const GPIO_OUT_PIN5_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN5_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN4_Pos: ::cty::c_uint = 4;
pub const GPIO_OUT_PIN4_Msk: ::cty::c_uint = 16;
pub const GPIO_OUT_PIN4_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN4_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN3_Pos: ::cty::c_uint = 3;
pub const GPIO_OUT_PIN3_Msk: ::cty::c_uint = 8;
pub const GPIO_OUT_PIN3_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN3_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN2_Pos: ::cty::c_uint = 2;
pub const GPIO_OUT_PIN2_Msk: ::cty::c_uint = 4;
pub const GPIO_OUT_PIN2_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN2_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN1_Pos: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN1_Msk: ::cty::c_uint = 2;
pub const GPIO_OUT_PIN1_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN1_High: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN0_Pos: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN0_Msk: ::cty::c_uint = 1;
pub const GPIO_OUT_PIN0_Low: ::cty::c_uint = 0;
pub const GPIO_OUT_PIN0_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN31_Pos: ::cty::c_uint = 31;
pub const GPIO_OUTSET_PIN31_Msk: ::cty::c_uint = 2147483648;
pub const GPIO_OUTSET_PIN31_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN31_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN31_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN30_Pos: ::cty::c_uint = 30;
pub const GPIO_OUTSET_PIN30_Msk: ::cty::c_uint = 1073741824;
pub const GPIO_OUTSET_PIN30_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN30_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN30_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN29_Pos: ::cty::c_uint = 29;
pub const GPIO_OUTSET_PIN29_Msk: ::cty::c_uint = 536870912;
pub const GPIO_OUTSET_PIN29_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN29_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN29_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN28_Pos: ::cty::c_uint = 28;
pub const GPIO_OUTSET_PIN28_Msk: ::cty::c_uint = 268435456;
pub const GPIO_OUTSET_PIN28_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN28_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN28_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN27_Pos: ::cty::c_uint = 27;
pub const GPIO_OUTSET_PIN27_Msk: ::cty::c_uint = 134217728;
pub const GPIO_OUTSET_PIN27_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN27_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN27_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN26_Pos: ::cty::c_uint = 26;
pub const GPIO_OUTSET_PIN26_Msk: ::cty::c_uint = 67108864;
pub const GPIO_OUTSET_PIN26_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN26_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN26_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN25_Pos: ::cty::c_uint = 25;
pub const GPIO_OUTSET_PIN25_Msk: ::cty::c_uint = 33554432;
pub const GPIO_OUTSET_PIN25_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN25_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN25_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN24_Pos: ::cty::c_uint = 24;
pub const GPIO_OUTSET_PIN24_Msk: ::cty::c_uint = 16777216;
pub const GPIO_OUTSET_PIN24_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN24_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN24_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN23_Pos: ::cty::c_uint = 23;
pub const GPIO_OUTSET_PIN23_Msk: ::cty::c_uint = 8388608;
pub const GPIO_OUTSET_PIN23_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN23_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN23_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN22_Pos: ::cty::c_uint = 22;
pub const GPIO_OUTSET_PIN22_Msk: ::cty::c_uint = 4194304;
pub const GPIO_OUTSET_PIN22_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN22_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN22_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN21_Pos: ::cty::c_uint = 21;
pub const GPIO_OUTSET_PIN21_Msk: ::cty::c_uint = 2097152;
pub const GPIO_OUTSET_PIN21_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN21_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN21_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN20_Pos: ::cty::c_uint = 20;
pub const GPIO_OUTSET_PIN20_Msk: ::cty::c_uint = 1048576;
pub const GPIO_OUTSET_PIN20_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN20_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN20_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN19_Pos: ::cty::c_uint = 19;
pub const GPIO_OUTSET_PIN19_Msk: ::cty::c_uint = 524288;
pub const GPIO_OUTSET_PIN19_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN19_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN19_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN18_Pos: ::cty::c_uint = 18;
pub const GPIO_OUTSET_PIN18_Msk: ::cty::c_uint = 262144;
pub const GPIO_OUTSET_PIN18_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN18_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN18_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN17_Pos: ::cty::c_uint = 17;
pub const GPIO_OUTSET_PIN17_Msk: ::cty::c_uint = 131072;
pub const GPIO_OUTSET_PIN17_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN17_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN17_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN16_Pos: ::cty::c_uint = 16;
pub const GPIO_OUTSET_PIN16_Msk: ::cty::c_uint = 65536;
pub const GPIO_OUTSET_PIN16_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN16_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN16_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN15_Pos: ::cty::c_uint = 15;
pub const GPIO_OUTSET_PIN15_Msk: ::cty::c_uint = 32768;
pub const GPIO_OUTSET_PIN15_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN15_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN15_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN14_Pos: ::cty::c_uint = 14;
pub const GPIO_OUTSET_PIN14_Msk: ::cty::c_uint = 16384;
pub const GPIO_OUTSET_PIN14_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN14_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN14_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN13_Pos: ::cty::c_uint = 13;
pub const GPIO_OUTSET_PIN13_Msk: ::cty::c_uint = 8192;
pub const GPIO_OUTSET_PIN13_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN13_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN13_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN12_Pos: ::cty::c_uint = 12;
pub const GPIO_OUTSET_PIN12_Msk: ::cty::c_uint = 4096;
pub const GPIO_OUTSET_PIN12_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN12_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN12_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN11_Pos: ::cty::c_uint = 11;
pub const GPIO_OUTSET_PIN11_Msk: ::cty::c_uint = 2048;
pub const GPIO_OUTSET_PIN11_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN11_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN11_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN10_Pos: ::cty::c_uint = 10;
pub const GPIO_OUTSET_PIN10_Msk: ::cty::c_uint = 1024;
pub const GPIO_OUTSET_PIN10_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN10_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN10_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN9_Pos: ::cty::c_uint = 9;
pub const GPIO_OUTSET_PIN9_Msk: ::cty::c_uint = 512;
pub const GPIO_OUTSET_PIN9_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN9_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN9_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN8_Pos: ::cty::c_uint = 8;
pub const GPIO_OUTSET_PIN8_Msk: ::cty::c_uint = 256;
pub const GPIO_OUTSET_PIN8_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN8_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN8_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN7_Pos: ::cty::c_uint = 7;
pub const GPIO_OUTSET_PIN7_Msk: ::cty::c_uint = 128;
pub const GPIO_OUTSET_PIN7_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN7_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN7_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN6_Pos: ::cty::c_uint = 6;
pub const GPIO_OUTSET_PIN6_Msk: ::cty::c_uint = 64;
pub const GPIO_OUTSET_PIN6_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN6_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN6_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN5_Pos: ::cty::c_uint = 5;
pub const GPIO_OUTSET_PIN5_Msk: ::cty::c_uint = 32;
pub const GPIO_OUTSET_PIN5_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN5_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN5_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN4_Pos: ::cty::c_uint = 4;
pub const GPIO_OUTSET_PIN4_Msk: ::cty::c_uint = 16;
pub const GPIO_OUTSET_PIN4_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN4_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN4_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN3_Pos: ::cty::c_uint = 3;
pub const GPIO_OUTSET_PIN3_Msk: ::cty::c_uint = 8;
pub const GPIO_OUTSET_PIN3_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN3_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN3_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN2_Pos: ::cty::c_uint = 2;
pub const GPIO_OUTSET_PIN2_Msk: ::cty::c_uint = 4;
pub const GPIO_OUTSET_PIN2_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN2_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN2_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN1_Pos: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN1_Msk: ::cty::c_uint = 2;
pub const GPIO_OUTSET_PIN1_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN1_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN1_Set: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN0_Pos: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN0_Msk: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN0_Low: ::cty::c_uint = 0;
pub const GPIO_OUTSET_PIN0_High: ::cty::c_uint = 1;
pub const GPIO_OUTSET_PIN0_Set: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN31_Pos: ::cty::c_uint = 31;
pub const GPIO_OUTCLR_PIN31_Msk: ::cty::c_uint = 2147483648;
pub const GPIO_OUTCLR_PIN31_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN31_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN31_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN30_Pos: ::cty::c_uint = 30;
pub const GPIO_OUTCLR_PIN30_Msk: ::cty::c_uint = 1073741824;
pub const GPIO_OUTCLR_PIN30_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN30_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN30_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN29_Pos: ::cty::c_uint = 29;
pub const GPIO_OUTCLR_PIN29_Msk: ::cty::c_uint = 536870912;
pub const GPIO_OUTCLR_PIN29_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN29_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN29_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN28_Pos: ::cty::c_uint = 28;
pub const GPIO_OUTCLR_PIN28_Msk: ::cty::c_uint = 268435456;
pub const GPIO_OUTCLR_PIN28_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN28_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN28_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN27_Pos: ::cty::c_uint = 27;
pub const GPIO_OUTCLR_PIN27_Msk: ::cty::c_uint = 134217728;
pub const GPIO_OUTCLR_PIN27_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN27_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN27_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN26_Pos: ::cty::c_uint = 26;
pub const GPIO_OUTCLR_PIN26_Msk: ::cty::c_uint = 67108864;
pub const GPIO_OUTCLR_PIN26_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN26_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN26_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN25_Pos: ::cty::c_uint = 25;
pub const GPIO_OUTCLR_PIN25_Msk: ::cty::c_uint = 33554432;
pub const GPIO_OUTCLR_PIN25_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN25_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN25_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN24_Pos: ::cty::c_uint = 24;
pub const GPIO_OUTCLR_PIN24_Msk: ::cty::c_uint = 16777216;
pub const GPIO_OUTCLR_PIN24_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN24_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN24_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN23_Pos: ::cty::c_uint = 23;
pub const GPIO_OUTCLR_PIN23_Msk: ::cty::c_uint = 8388608;
pub const GPIO_OUTCLR_PIN23_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN23_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN23_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN22_Pos: ::cty::c_uint = 22;
pub const GPIO_OUTCLR_PIN22_Msk: ::cty::c_uint = 4194304;
pub const GPIO_OUTCLR_PIN22_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN22_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN22_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN21_Pos: ::cty::c_uint = 21;
pub const GPIO_OUTCLR_PIN21_Msk: ::cty::c_uint = 2097152;
pub const GPIO_OUTCLR_PIN21_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN21_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN21_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN20_Pos: ::cty::c_uint = 20;
pub const GPIO_OUTCLR_PIN20_Msk: ::cty::c_uint = 1048576;
pub const GPIO_OUTCLR_PIN20_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN20_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN20_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN19_Pos: ::cty::c_uint = 19;
pub const GPIO_OUTCLR_PIN19_Msk: ::cty::c_uint = 524288;
pub const GPIO_OUTCLR_PIN19_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN19_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN19_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN18_Pos: ::cty::c_uint = 18;
pub const GPIO_OUTCLR_PIN18_Msk: ::cty::c_uint = 262144;
pub const GPIO_OUTCLR_PIN18_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN18_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN18_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN17_Pos: ::cty::c_uint = 17;
pub const GPIO_OUTCLR_PIN17_Msk: ::cty::c_uint = 131072;
pub const GPIO_OUTCLR_PIN17_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN17_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN17_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN16_Pos: ::cty::c_uint = 16;
pub const GPIO_OUTCLR_PIN16_Msk: ::cty::c_uint = 65536;
pub const GPIO_OUTCLR_PIN16_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN16_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN16_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN15_Pos: ::cty::c_uint = 15;
pub const GPIO_OUTCLR_PIN15_Msk: ::cty::c_uint = 32768;
pub const GPIO_OUTCLR_PIN15_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN15_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN15_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN14_Pos: ::cty::c_uint = 14;
pub const GPIO_OUTCLR_PIN14_Msk: ::cty::c_uint = 16384;
pub const GPIO_OUTCLR_PIN14_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN14_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN14_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN13_Pos: ::cty::c_uint = 13;
pub const GPIO_OUTCLR_PIN13_Msk: ::cty::c_uint = 8192;
pub const GPIO_OUTCLR_PIN13_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN13_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN13_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN12_Pos: ::cty::c_uint = 12;
pub const GPIO_OUTCLR_PIN12_Msk: ::cty::c_uint = 4096;
pub const GPIO_OUTCLR_PIN12_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN12_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN12_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN11_Pos: ::cty::c_uint = 11;
pub const GPIO_OUTCLR_PIN11_Msk: ::cty::c_uint = 2048;
pub const GPIO_OUTCLR_PIN11_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN11_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN11_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN10_Pos: ::cty::c_uint = 10;
pub const GPIO_OUTCLR_PIN10_Msk: ::cty::c_uint = 1024;
pub const GPIO_OUTCLR_PIN10_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN10_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN10_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN9_Pos: ::cty::c_uint = 9;
pub const GPIO_OUTCLR_PIN9_Msk: ::cty::c_uint = 512;
pub const GPIO_OUTCLR_PIN9_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN9_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN9_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN8_Pos: ::cty::c_uint = 8;
pub const GPIO_OUTCLR_PIN8_Msk: ::cty::c_uint = 256;
pub const GPIO_OUTCLR_PIN8_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN8_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN8_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN7_Pos: ::cty::c_uint = 7;
pub const GPIO_OUTCLR_PIN7_Msk: ::cty::c_uint = 128;
pub const GPIO_OUTCLR_PIN7_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN7_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN7_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN6_Pos: ::cty::c_uint = 6;
pub const GPIO_OUTCLR_PIN6_Msk: ::cty::c_uint = 64;
pub const GPIO_OUTCLR_PIN6_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN6_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN6_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN5_Pos: ::cty::c_uint = 5;
pub const GPIO_OUTCLR_PIN5_Msk: ::cty::c_uint = 32;
pub const GPIO_OUTCLR_PIN5_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN5_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN5_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN4_Pos: ::cty::c_uint = 4;
pub const GPIO_OUTCLR_PIN4_Msk: ::cty::c_uint = 16;
pub const GPIO_OUTCLR_PIN4_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN4_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN4_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN3_Pos: ::cty::c_uint = 3;
pub const GPIO_OUTCLR_PIN3_Msk: ::cty::c_uint = 8;
pub const GPIO_OUTCLR_PIN3_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN3_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN3_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN2_Pos: ::cty::c_uint = 2;
pub const GPIO_OUTCLR_PIN2_Msk: ::cty::c_uint = 4;
pub const GPIO_OUTCLR_PIN2_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN2_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN2_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN1_Pos: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN1_Msk: ::cty::c_uint = 2;
pub const GPIO_OUTCLR_PIN1_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN1_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN1_Clear: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN0_Pos: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN0_Msk: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN0_Low: ::cty::c_uint = 0;
pub const GPIO_OUTCLR_PIN0_High: ::cty::c_uint = 1;
pub const GPIO_OUTCLR_PIN0_Clear: ::cty::c_uint = 1;
pub const GPIO_IN_PIN31_Pos: ::cty::c_uint = 31;
pub const GPIO_IN_PIN31_Msk: ::cty::c_uint = 2147483648;
pub const GPIO_IN_PIN31_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN31_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN30_Pos: ::cty::c_uint = 30;
pub const GPIO_IN_PIN30_Msk: ::cty::c_uint = 1073741824;
pub const GPIO_IN_PIN30_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN30_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN29_Pos: ::cty::c_uint = 29;
pub const GPIO_IN_PIN29_Msk: ::cty::c_uint = 536870912;
pub const GPIO_IN_PIN29_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN29_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN28_Pos: ::cty::c_uint = 28;
pub const GPIO_IN_PIN28_Msk: ::cty::c_uint = 268435456;
pub const GPIO_IN_PIN28_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN28_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN27_Pos: ::cty::c_uint = 27;
pub const GPIO_IN_PIN27_Msk: ::cty::c_uint = 134217728;
pub const GPIO_IN_PIN27_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN27_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN26_Pos: ::cty::c_uint = 26;
pub const GPIO_IN_PIN26_Msk: ::cty::c_uint = 67108864;
pub const GPIO_IN_PIN26_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN26_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN25_Pos: ::cty::c_uint = 25;
pub const GPIO_IN_PIN25_Msk: ::cty::c_uint = 33554432;
pub const GPIO_IN_PIN25_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN25_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN24_Pos: ::cty::c_uint = 24;
pub const GPIO_IN_PIN24_Msk: ::cty::c_uint = 16777216;
pub const GPIO_IN_PIN24_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN24_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN23_Pos: ::cty::c_uint = 23;
pub const GPIO_IN_PIN23_Msk: ::cty::c_uint = 8388608;
pub const GPIO_IN_PIN23_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN23_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN22_Pos: ::cty::c_uint = 22;
pub const GPIO_IN_PIN22_Msk: ::cty::c_uint = 4194304;
pub const GPIO_IN_PIN22_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN22_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN21_Pos: ::cty::c_uint = 21;
pub const GPIO_IN_PIN21_Msk: ::cty::c_uint = 2097152;
pub const GPIO_IN_PIN21_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN21_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN20_Pos: ::cty::c_uint = 20;
pub const GPIO_IN_PIN20_Msk: ::cty::c_uint = 1048576;
pub const GPIO_IN_PIN20_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN20_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN19_Pos: ::cty::c_uint = 19;
pub const GPIO_IN_PIN19_Msk: ::cty::c_uint = 524288;
pub const GPIO_IN_PIN19_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN19_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN18_Pos: ::cty::c_uint = 18;
pub const GPIO_IN_PIN18_Msk: ::cty::c_uint = 262144;
pub const GPIO_IN_PIN18_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN18_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN17_Pos: ::cty::c_uint = 17;
pub const GPIO_IN_PIN17_Msk: ::cty::c_uint = 131072;
pub const GPIO_IN_PIN17_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN17_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN16_Pos: ::cty::c_uint = 16;
pub const GPIO_IN_PIN16_Msk: ::cty::c_uint = 65536;
pub const GPIO_IN_PIN16_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN16_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN15_Pos: ::cty::c_uint = 15;
pub const GPIO_IN_PIN15_Msk: ::cty::c_uint = 32768;
pub const GPIO_IN_PIN15_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN15_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN14_Pos: ::cty::c_uint = 14;
pub const GPIO_IN_PIN14_Msk: ::cty::c_uint = 16384;
pub const GPIO_IN_PIN14_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN14_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN13_Pos: ::cty::c_uint = 13;
pub const GPIO_IN_PIN13_Msk: ::cty::c_uint = 8192;
pub const GPIO_IN_PIN13_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN13_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN12_Pos: ::cty::c_uint = 12;
pub const GPIO_IN_PIN12_Msk: ::cty::c_uint = 4096;
pub const GPIO_IN_PIN12_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN12_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN11_Pos: ::cty::c_uint = 11;
pub const GPIO_IN_PIN11_Msk: ::cty::c_uint = 2048;
pub const GPIO_IN_PIN11_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN11_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN10_Pos: ::cty::c_uint = 10;
pub const GPIO_IN_PIN10_Msk: ::cty::c_uint = 1024;
pub const GPIO_IN_PIN10_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN10_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN9_Pos: ::cty::c_uint = 9;
pub const GPIO_IN_PIN9_Msk: ::cty::c_uint = 512;
pub const GPIO_IN_PIN9_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN9_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN8_Pos: ::cty::c_uint = 8;
pub const GPIO_IN_PIN8_Msk: ::cty::c_uint = 256;
pub const GPIO_IN_PIN8_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN8_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN7_Pos: ::cty::c_uint = 7;
pub const GPIO_IN_PIN7_Msk: ::cty::c_uint = 128;
pub const GPIO_IN_PIN7_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN7_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN6_Pos: ::cty::c_uint = 6;
pub const GPIO_IN_PIN6_Msk: ::cty::c_uint = 64;
pub const GPIO_IN_PIN6_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN6_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN5_Pos: ::cty::c_uint = 5;
pub const GPIO_IN_PIN5_Msk: ::cty::c_uint = 32;
pub const GPIO_IN_PIN5_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN5_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN4_Pos: ::cty::c_uint = 4;
pub const GPIO_IN_PIN4_Msk: ::cty::c_uint = 16;
pub const GPIO_IN_PIN4_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN4_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN3_Pos: ::cty::c_uint = 3;
pub const GPIO_IN_PIN3_Msk: ::cty::c_uint = 8;
pub const GPIO_IN_PIN3_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN3_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN2_Pos: ::cty::c_uint = 2;
pub const GPIO_IN_PIN2_Msk: ::cty::c_uint = 4;
pub const GPIO_IN_PIN2_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN2_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN1_Pos: ::cty::c_uint = 1;
pub const GPIO_IN_PIN1_Msk: ::cty::c_uint = 2;
pub const GPIO_IN_PIN1_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN1_High: ::cty::c_uint = 1;
pub const GPIO_IN_PIN0_Pos: ::cty::c_uint = 0;
pub const GPIO_IN_PIN0_Msk: ::cty::c_uint = 1;
pub const GPIO_IN_PIN0_Low: ::cty::c_uint = 0;
pub const GPIO_IN_PIN0_High: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN31_Pos: ::cty::c_uint = 31;
pub const GPIO_DIR_PIN31_Msk: ::cty::c_uint = 2147483648;
pub const GPIO_DIR_PIN31_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN31_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN30_Pos: ::cty::c_uint = 30;
pub const GPIO_DIR_PIN30_Msk: ::cty::c_uint = 1073741824;
pub const GPIO_DIR_PIN30_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN30_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN29_Pos: ::cty::c_uint = 29;
pub const GPIO_DIR_PIN29_Msk: ::cty::c_uint = 536870912;
pub const GPIO_DIR_PIN29_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN29_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN28_Pos: ::cty::c_uint = 28;
pub const GPIO_DIR_PIN28_Msk: ::cty::c_uint = 268435456;
pub const GPIO_DIR_PIN28_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN28_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN27_Pos: ::cty::c_uint = 27;
pub const GPIO_DIR_PIN27_Msk: ::cty::c_uint = 134217728;
pub const GPIO_DIR_PIN27_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN27_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN26_Pos: ::cty::c_uint = 26;
pub const GPIO_DIR_PIN26_Msk: ::cty::c_uint = 67108864;
pub const GPIO_DIR_PIN26_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN26_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN25_Pos: ::cty::c_uint = 25;
pub const GPIO_DIR_PIN25_Msk: ::cty::c_uint = 33554432;
pub const GPIO_DIR_PIN25_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN25_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN24_Pos: ::cty::c_uint = 24;
pub const GPIO_DIR_PIN24_Msk: ::cty::c_uint = 16777216;
pub const GPIO_DIR_PIN24_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN24_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN23_Pos: ::cty::c_uint = 23;
pub const GPIO_DIR_PIN23_Msk: ::cty::c_uint = 8388608;
pub const GPIO_DIR_PIN23_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN23_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN22_Pos: ::cty::c_uint = 22;
pub const GPIO_DIR_PIN22_Msk: ::cty::c_uint = 4194304;
pub const GPIO_DIR_PIN22_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN22_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN21_Pos: ::cty::c_uint = 21;
pub const GPIO_DIR_PIN21_Msk: ::cty::c_uint = 2097152;
pub const GPIO_DIR_PIN21_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN21_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN20_Pos: ::cty::c_uint = 20;
pub const GPIO_DIR_PIN20_Msk: ::cty::c_uint = 1048576;
pub const GPIO_DIR_PIN20_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN20_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN19_Pos: ::cty::c_uint = 19;
pub const GPIO_DIR_PIN19_Msk: ::cty::c_uint = 524288;
pub const GPIO_DIR_PIN19_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN19_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN18_Pos: ::cty::c_uint = 18;
pub const GPIO_DIR_PIN18_Msk: ::cty::c_uint = 262144;
pub const GPIO_DIR_PIN18_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN18_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN17_Pos: ::cty::c_uint = 17;
pub const GPIO_DIR_PIN17_Msk: ::cty::c_uint = 131072;
pub const GPIO_DIR_PIN17_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN17_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN16_Pos: ::cty::c_uint = 16;
pub const GPIO_DIR_PIN16_Msk: ::cty::c_uint = 65536;
pub const GPIO_DIR_PIN16_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN16_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN15_Pos: ::cty::c_uint = 15;
pub const GPIO_DIR_PIN15_Msk: ::cty::c_uint = 32768;
pub const GPIO_DIR_PIN15_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN15_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN14_Pos: ::cty::c_uint = 14;
pub const GPIO_DIR_PIN14_Msk: ::cty::c_uint = 16384;
pub const GPIO_DIR_PIN14_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN14_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN13_Pos: ::cty::c_uint = 13;
pub const GPIO_DIR_PIN13_Msk: ::cty::c_uint = 8192;
pub const GPIO_DIR_PIN13_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN13_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN12_Pos: ::cty::c_uint = 12;
pub const GPIO_DIR_PIN12_Msk: ::cty::c_uint = 4096;
pub const GPIO_DIR_PIN12_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN12_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN11_Pos: ::cty::c_uint = 11;
pub const GPIO_DIR_PIN11_Msk: ::cty::c_uint = 2048;
pub const GPIO_DIR_PIN11_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN11_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN10_Pos: ::cty::c_uint = 10;
pub const GPIO_DIR_PIN10_Msk: ::cty::c_uint = 1024;
pub const GPIO_DIR_PIN10_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN10_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN9_Pos: ::cty::c_uint = 9;
pub const GPIO_DIR_PIN9_Msk: ::cty::c_uint = 512;
pub const GPIO_DIR_PIN9_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN9_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN8_Pos: ::cty::c_uint = 8;
pub const GPIO_DIR_PIN8_Msk: ::cty::c_uint = 256;
pub const GPIO_DIR_PIN8_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN8_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN7_Pos: ::cty::c_uint = 7;
pub const GPIO_DIR_PIN7_Msk: ::cty::c_uint = 128;
pub const GPIO_DIR_PIN7_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN7_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN6_Pos: ::cty::c_uint = 6;
pub const GPIO_DIR_PIN6_Msk: ::cty::c_uint = 64;
pub const GPIO_DIR_PIN6_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN6_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN5_Pos: ::cty::c_uint = 5;
pub const GPIO_DIR_PIN5_Msk: ::cty::c_uint = 32;
pub const GPIO_DIR_PIN5_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN5_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN4_Pos: ::cty::c_uint = 4;
pub const GPIO_DIR_PIN4_Msk: ::cty::c_uint = 16;
pub const GPIO_DIR_PIN4_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN4_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN3_Pos: ::cty::c_uint = 3;
pub const GPIO_DIR_PIN3_Msk: ::cty::c_uint = 8;
pub const GPIO_DIR_PIN3_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN3_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN2_Pos: ::cty::c_uint = 2;
pub const GPIO_DIR_PIN2_Msk: ::cty::c_uint = 4;
pub const GPIO_DIR_PIN2_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN2_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN1_Pos: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN1_Msk: ::cty::c_uint = 2;
pub const GPIO_DIR_PIN1_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN1_Output: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN0_Pos: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN0_Msk: ::cty::c_uint = 1;
pub const GPIO_DIR_PIN0_Input: ::cty::c_uint = 0;
pub const GPIO_DIR_PIN0_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN31_Pos: ::cty::c_uint = 31;
pub const GPIO_DIRSET_PIN31_Msk: ::cty::c_uint = 2147483648;
pub const GPIO_DIRSET_PIN31_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN31_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN31_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN30_Pos: ::cty::c_uint = 30;
pub const GPIO_DIRSET_PIN30_Msk: ::cty::c_uint = 1073741824;
pub const GPIO_DIRSET_PIN30_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN30_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN30_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN29_Pos: ::cty::c_uint = 29;
pub const GPIO_DIRSET_PIN29_Msk: ::cty::c_uint = 536870912;
pub const GPIO_DIRSET_PIN29_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN29_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN29_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN28_Pos: ::cty::c_uint = 28;
pub const GPIO_DIRSET_PIN28_Msk: ::cty::c_uint = 268435456;
pub const GPIO_DIRSET_PIN28_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN28_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN28_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN27_Pos: ::cty::c_uint = 27;
pub const GPIO_DIRSET_PIN27_Msk: ::cty::c_uint = 134217728;
pub const GPIO_DIRSET_PIN27_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN27_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN27_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN26_Pos: ::cty::c_uint = 26;
pub const GPIO_DIRSET_PIN26_Msk: ::cty::c_uint = 67108864;
pub const GPIO_DIRSET_PIN26_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN26_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN26_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN25_Pos: ::cty::c_uint = 25;
pub const GPIO_DIRSET_PIN25_Msk: ::cty::c_uint = 33554432;
pub const GPIO_DIRSET_PIN25_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN25_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN25_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN24_Pos: ::cty::c_uint = 24;
pub const GPIO_DIRSET_PIN24_Msk: ::cty::c_uint = 16777216;
pub const GPIO_DIRSET_PIN24_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN24_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN24_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN23_Pos: ::cty::c_uint = 23;
pub const GPIO_DIRSET_PIN23_Msk: ::cty::c_uint = 8388608;
pub const GPIO_DIRSET_PIN23_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN23_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN23_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN22_Pos: ::cty::c_uint = 22;
pub const GPIO_DIRSET_PIN22_Msk: ::cty::c_uint = 4194304;
pub const GPIO_DIRSET_PIN22_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN22_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN22_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN21_Pos: ::cty::c_uint = 21;
pub const GPIO_DIRSET_PIN21_Msk: ::cty::c_uint = 2097152;
pub const GPIO_DIRSET_PIN21_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN21_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN21_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN20_Pos: ::cty::c_uint = 20;
pub const GPIO_DIRSET_PIN20_Msk: ::cty::c_uint = 1048576;
pub const GPIO_DIRSET_PIN20_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN20_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN20_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN19_Pos: ::cty::c_uint = 19;
pub const GPIO_DIRSET_PIN19_Msk: ::cty::c_uint = 524288;
pub const GPIO_DIRSET_PIN19_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN19_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN19_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN18_Pos: ::cty::c_uint = 18;
pub const GPIO_DIRSET_PIN18_Msk: ::cty::c_uint = 262144;
pub const GPIO_DIRSET_PIN18_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN18_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN18_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN17_Pos: ::cty::c_uint = 17;
pub const GPIO_DIRSET_PIN17_Msk: ::cty::c_uint = 131072;
pub const GPIO_DIRSET_PIN17_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN17_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN17_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN16_Pos: ::cty::c_uint = 16;
pub const GPIO_DIRSET_PIN16_Msk: ::cty::c_uint = 65536;
pub const GPIO_DIRSET_PIN16_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN16_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN16_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN15_Pos: ::cty::c_uint = 15;
pub const GPIO_DIRSET_PIN15_Msk: ::cty::c_uint = 32768;
pub const GPIO_DIRSET_PIN15_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN15_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN15_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN14_Pos: ::cty::c_uint = 14;
pub const GPIO_DIRSET_PIN14_Msk: ::cty::c_uint = 16384;
pub const GPIO_DIRSET_PIN14_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN14_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN14_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN13_Pos: ::cty::c_uint = 13;
pub const GPIO_DIRSET_PIN13_Msk: ::cty::c_uint = 8192;
pub const GPIO_DIRSET_PIN13_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN13_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN13_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN12_Pos: ::cty::c_uint = 12;
pub const GPIO_DIRSET_PIN12_Msk: ::cty::c_uint = 4096;
pub const GPIO_DIRSET_PIN12_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN12_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN12_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN11_Pos: ::cty::c_uint = 11;
pub const GPIO_DIRSET_PIN11_Msk: ::cty::c_uint = 2048;
pub const GPIO_DIRSET_PIN11_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN11_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN11_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN10_Pos: ::cty::c_uint = 10;
pub const GPIO_DIRSET_PIN10_Msk: ::cty::c_uint = 1024;
pub const GPIO_DIRSET_PIN10_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN10_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN10_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN9_Pos: ::cty::c_uint = 9;
pub const GPIO_DIRSET_PIN9_Msk: ::cty::c_uint = 512;
pub const GPIO_DIRSET_PIN9_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN9_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN9_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN8_Pos: ::cty::c_uint = 8;
pub const GPIO_DIRSET_PIN8_Msk: ::cty::c_uint = 256;
pub const GPIO_DIRSET_PIN8_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN8_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN8_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN7_Pos: ::cty::c_uint = 7;
pub const GPIO_DIRSET_PIN7_Msk: ::cty::c_uint = 128;
pub const GPIO_DIRSET_PIN7_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN7_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN7_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN6_Pos: ::cty::c_uint = 6;
pub const GPIO_DIRSET_PIN6_Msk: ::cty::c_uint = 64;
pub const GPIO_DIRSET_PIN6_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN6_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN6_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN5_Pos: ::cty::c_uint = 5;
pub const GPIO_DIRSET_PIN5_Msk: ::cty::c_uint = 32;
pub const GPIO_DIRSET_PIN5_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN5_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN5_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN4_Pos: ::cty::c_uint = 4;
pub const GPIO_DIRSET_PIN4_Msk: ::cty::c_uint = 16;
pub const GPIO_DIRSET_PIN4_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN4_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN4_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN3_Pos: ::cty::c_uint = 3;
pub const GPIO_DIRSET_PIN3_Msk: ::cty::c_uint = 8;
pub const GPIO_DIRSET_PIN3_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN3_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN3_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN2_Pos: ::cty::c_uint = 2;
pub const GPIO_DIRSET_PIN2_Msk: ::cty::c_uint = 4;
pub const GPIO_DIRSET_PIN2_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN2_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN2_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN1_Pos: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN1_Msk: ::cty::c_uint = 2;
pub const GPIO_DIRSET_PIN1_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN1_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN1_Set: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN0_Pos: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN0_Msk: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN0_Input: ::cty::c_uint = 0;
pub const GPIO_DIRSET_PIN0_Output: ::cty::c_uint = 1;
pub const GPIO_DIRSET_PIN0_Set: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN31_Pos: ::cty::c_uint = 31;
pub const GPIO_DIRCLR_PIN31_Msk: ::cty::c_uint = 2147483648;
pub const GPIO_DIRCLR_PIN31_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN31_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN31_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN30_Pos: ::cty::c_uint = 30;
pub const GPIO_DIRCLR_PIN30_Msk: ::cty::c_uint = 1073741824;
pub const GPIO_DIRCLR_PIN30_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN30_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN30_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN29_Pos: ::cty::c_uint = 29;
pub const GPIO_DIRCLR_PIN29_Msk: ::cty::c_uint = 536870912;
pub const GPIO_DIRCLR_PIN29_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN29_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN29_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN28_Pos: ::cty::c_uint = 28;
pub const GPIO_DIRCLR_PIN28_Msk: ::cty::c_uint = 268435456;
pub const GPIO_DIRCLR_PIN28_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN28_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN28_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN27_Pos: ::cty::c_uint = 27;
pub const GPIO_DIRCLR_PIN27_Msk: ::cty::c_uint = 134217728;
pub const GPIO_DIRCLR_PIN27_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN27_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN27_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN26_Pos: ::cty::c_uint = 26;
pub const GPIO_DIRCLR_PIN26_Msk: ::cty::c_uint = 67108864;
pub const GPIO_DIRCLR_PIN26_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN26_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN26_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN25_Pos: ::cty::c_uint = 25;
pub const GPIO_DIRCLR_PIN25_Msk: ::cty::c_uint = 33554432;
pub const GPIO_DIRCLR_PIN25_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN25_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN25_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN24_Pos: ::cty::c_uint = 24;
pub const GPIO_DIRCLR_PIN24_Msk: ::cty::c_uint = 16777216;
pub const GPIO_DIRCLR_PIN24_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN24_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN24_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN23_Pos: ::cty::c_uint = 23;
pub const GPIO_DIRCLR_PIN23_Msk: ::cty::c_uint = 8388608;
pub const GPIO_DIRCLR_PIN23_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN23_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN23_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN22_Pos: ::cty::c_uint = 22;
pub const GPIO_DIRCLR_PIN22_Msk: ::cty::c_uint = 4194304;
pub const GPIO_DIRCLR_PIN22_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN22_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN22_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN21_Pos: ::cty::c_uint = 21;
pub const GPIO_DIRCLR_PIN21_Msk: ::cty::c_uint = 2097152;
pub const GPIO_DIRCLR_PIN21_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN21_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN21_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN20_Pos: ::cty::c_uint = 20;
pub const GPIO_DIRCLR_PIN20_Msk: ::cty::c_uint = 1048576;
pub const GPIO_DIRCLR_PIN20_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN20_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN20_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN19_Pos: ::cty::c_uint = 19;
pub const GPIO_DIRCLR_PIN19_Msk: ::cty::c_uint = 524288;
pub const GPIO_DIRCLR_PIN19_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN19_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN19_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN18_Pos: ::cty::c_uint = 18;
pub const GPIO_DIRCLR_PIN18_Msk: ::cty::c_uint = 262144;
pub const GPIO_DIRCLR_PIN18_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN18_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN18_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN17_Pos: ::cty::c_uint = 17;
pub const GPIO_DIRCLR_PIN17_Msk: ::cty::c_uint = 131072;
pub const GPIO_DIRCLR_PIN17_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN17_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN17_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN16_Pos: ::cty::c_uint = 16;
pub const GPIO_DIRCLR_PIN16_Msk: ::cty::c_uint = 65536;
pub const GPIO_DIRCLR_PIN16_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN16_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN16_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN15_Pos: ::cty::c_uint = 15;
pub const GPIO_DIRCLR_PIN15_Msk: ::cty::c_uint = 32768;
pub const GPIO_DIRCLR_PIN15_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN15_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN15_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN14_Pos: ::cty::c_uint = 14;
pub const GPIO_DIRCLR_PIN14_Msk: ::cty::c_uint = 16384;
pub const GPIO_DIRCLR_PIN14_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN14_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN14_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN13_Pos: ::cty::c_uint = 13;
pub const GPIO_DIRCLR_PIN13_Msk: ::cty::c_uint = 8192;
pub const GPIO_DIRCLR_PIN13_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN13_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN13_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN12_Pos: ::cty::c_uint = 12;
pub const GPIO_DIRCLR_PIN12_Msk: ::cty::c_uint = 4096;
pub const GPIO_DIRCLR_PIN12_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN12_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN12_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN11_Pos: ::cty::c_uint = 11;
pub const GPIO_DIRCLR_PIN11_Msk: ::cty::c_uint = 2048;
pub const GPIO_DIRCLR_PIN11_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN11_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN11_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN10_Pos: ::cty::c_uint = 10;
pub const GPIO_DIRCLR_PIN10_Msk: ::cty::c_uint = 1024;
pub const GPIO_DIRCLR_PIN10_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN10_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN10_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN9_Pos: ::cty::c_uint = 9;
pub const GPIO_DIRCLR_PIN9_Msk: ::cty::c_uint = 512;
pub const GPIO_DIRCLR_PIN9_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN9_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN9_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN8_Pos: ::cty::c_uint = 8;
pub const GPIO_DIRCLR_PIN8_Msk: ::cty::c_uint = 256;
pub const GPIO_DIRCLR_PIN8_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN8_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN8_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN7_Pos: ::cty::c_uint = 7;
pub const GPIO_DIRCLR_PIN7_Msk: ::cty::c_uint = 128;
pub const GPIO_DIRCLR_PIN7_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN7_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN7_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN6_Pos: ::cty::c_uint = 6;
pub const GPIO_DIRCLR_PIN6_Msk: ::cty::c_uint = 64;
pub const GPIO_DIRCLR_PIN6_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN6_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN6_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN5_Pos: ::cty::c_uint = 5;
pub const GPIO_DIRCLR_PIN5_Msk: ::cty::c_uint = 32;
pub const GPIO_DIRCLR_PIN5_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN5_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN5_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN4_Pos: ::cty::c_uint = 4;
pub const GPIO_DIRCLR_PIN4_Msk: ::cty::c_uint = 16;
pub const GPIO_DIRCLR_PIN4_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN4_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN4_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN3_Pos: ::cty::c_uint = 3;
pub const GPIO_DIRCLR_PIN3_Msk: ::cty::c_uint = 8;
pub const GPIO_DIRCLR_PIN3_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN3_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN3_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN2_Pos: ::cty::c_uint = 2;
pub const GPIO_DIRCLR_PIN2_Msk: ::cty::c_uint = 4;
pub const GPIO_DIRCLR_PIN2_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN2_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN2_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN1_Pos: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN1_Msk: ::cty::c_uint = 2;
pub const GPIO_DIRCLR_PIN1_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN1_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN1_Clear: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN0_Pos: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN0_Msk: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN0_Input: ::cty::c_uint = 0;
pub const GPIO_DIRCLR_PIN0_Output: ::cty::c_uint = 1;
pub const GPIO_DIRCLR_PIN0_Clear: ::cty::c_uint = 1;
pub const GPIO_PIN_CNF_SENSE_Pos: ::cty::c_uint = 16;
pub const GPIO_PIN_CNF_SENSE_Msk: ::cty::c_uint = 196608;
pub const GPIO_PIN_CNF_SENSE_Disabled: ::cty::c_uint = 0;
pub const GPIO_PIN_CNF_SENSE_High: ::cty::c_uint = 2;
pub const GPIO_PIN_CNF_SENSE_Low: ::cty::c_uint = 3;
pub const GPIO_PIN_CNF_DRIVE_Pos: ::cty::c_uint = 8;
pub const GPIO_PIN_CNF_DRIVE_Msk: ::cty::c_uint = 1792;
pub const GPIO_PIN_CNF_DRIVE_S0S1: ::cty::c_uint = 0;
pub const GPIO_PIN_CNF_DRIVE_H0S1: ::cty::c_uint = 1;
pub const GPIO_PIN_CNF_DRIVE_S0H1: ::cty::c_uint = 2;
pub const GPIO_PIN_CNF_DRIVE_H0H1: ::cty::c_uint = 3;
pub const GPIO_PIN_CNF_DRIVE_D0S1: ::cty::c_uint = 4;
pub const GPIO_PIN_CNF_DRIVE_D0H1: ::cty::c_uint = 5;
pub const GPIO_PIN_CNF_DRIVE_S0D1: ::cty::c_uint = 6;
pub const GPIO_PIN_CNF_DRIVE_H0D1: ::cty::c_uint = 7;
pub const GPIO_PIN_CNF_PULL_Pos: ::cty::c_uint = 2;
pub const GPIO_PIN_CNF_PULL_Msk: ::cty::c_uint = 12;
pub const GPIO_PIN_CNF_PULL_Disabled: ::cty::c_uint = 0;
pub const GPIO_PIN_CNF_PULL_Pulldown: ::cty::c_uint = 1;
pub const GPIO_PIN_CNF_PULL_Pullup: ::cty::c_uint = 3;
pub const GPIO_PIN_CNF_INPUT_Pos: ::cty::c_uint = 1;
pub const GPIO_PIN_CNF_INPUT_Msk: ::cty::c_uint = 2;
pub const GPIO_PIN_CNF_INPUT_Connect: ::cty::c_uint = 0;
pub const GPIO_PIN_CNF_INPUT_Disconnect: ::cty::c_uint = 1;
pub const GPIO_PIN_CNF_DIR_Pos: ::cty::c_uint = 0;
pub const GPIO_PIN_CNF_DIR_Msk: ::cty::c_uint = 1;
pub const GPIO_PIN_CNF_DIR_Input: ::cty::c_uint = 0;
pub const GPIO_PIN_CNF_DIR_Output: ::cty::c_uint = 1;
pub const GPIOTE_INTENSET_PORT_Pos: ::cty::c_uint = 31;
pub const GPIOTE_INTENSET_PORT_Msk: ::cty::c_uint = 2147483648;
pub const GPIOTE_INTENSET_PORT_Disabled: ::cty::c_uint = 0;
pub const GPIOTE_INTENSET_PORT_Enabled: ::cty::c_uint = 1;
pub const GPIOTE_INTENSET_PORT_Set: ::cty::c_uint = 1;
pub const GPIOTE_INTENSET_IN3_Pos: ::cty::c_uint = 3;
pub const GPIOTE_INTENSET_IN3_Msk: ::cty::c_uint = 8;
pub const GPIOTE_INTENSET_IN3_Disabled: ::cty::c_uint = 0;
pub const GPIOTE_INTENSET_IN3_Enabled: ::cty::c_uint = 1;
pub const GPIOTE_INTENSET_IN3_Set: ::cty::c_uint = 1;
pub const GPIOTE_INTENSET_IN2_Pos: ::cty::c_uint = 2;
pub const GPIOTE_INTENSET_IN2_Msk: ::cty::c_uint = 4;
pub const GPIOTE_INTENSET_IN2_Disabled: ::cty::c_uint = 0;
pub const GPIOTE_INTENSET_IN2_Enabled: ::cty::c_uint = 1;
pub const GPIOTE_INTENSET_IN2_Set: ::cty::c_uint = 1;
pub const GPIOTE_INTENSET_IN1_Pos: ::cty::c_uint = 1;
pub const GPIOTE_INTENSET_IN1_Msk: ::cty::c_uint = 2;
pub const GPIOTE_INTENSET_IN1_Disabled: ::cty::c_uint = 0;
pub const GPIOTE_INTENSET_IN1_Enabled: ::cty::c_uint = 1;
pub const GPIOTE_INTENSET_IN1_Set: ::cty::c_uint = 1;
pub const GPIOTE_INTENSET_IN0_Pos: ::cty::c_uint = 0;
pub const GPIOTE_INTENSET_IN0_Msk: ::cty::c_uint = 1;
pub const GPIOTE_INTENSET_IN0_Disabled: ::cty::c_uint = 0;
pub const GPIOTE_INTENSET_IN0_Enabled: ::cty::c_uint = 1;
pub const GPIOTE_INTENSET_IN0_Set: ::cty::c_uint = 1;
pub const GPIOTE_INTENCLR_PORT_Pos: ::cty::c_uint = 31;
pub const GPIOTE_INTENCLR_PORT_Msk: ::cty::c_uint = 2147483648;
pub const GPIOTE_INTENCLR_PORT_Disabled: ::cty::c_uint = 0;
pub const GPIOTE_INTENCLR_PORT_Enabled: ::cty::c_uint = 1;
pub const GPIOTE_INTENCLR_PORT_Clear: ::cty::c_uint = 1;
pub const GPIOTE_INTENCLR_IN3_Pos: ::cty::c_uint = 3;
pub const GPIOTE_INTENCLR_IN3_Msk: ::cty::c_uint = 8;
pub const GPIOTE_INTENCLR_IN3_Disabled: ::cty::c_uint = 0;
pub const GPIOTE_INTENCLR_IN3_Enabled: ::cty::c_uint = 1;
pub const GPIOTE_INTENCLR_IN3_Clear: ::cty::c_uint = 1;
pub const GPIOTE_INTENCLR_IN2_Pos: ::cty::c_uint = 2;
pub const GPIOTE_INTENCLR_IN2_Msk: ::cty::c_uint = 4;
pub const GPIOTE_INTENCLR_IN2_Disabled: ::cty::c_uint = 0;
pub const GPIOTE_INTENCLR_IN2_Enabled: ::cty::c_uint = 1;
pub const GPIOTE_INTENCLR_IN2_Clear: ::cty::c_uint = 1;
pub const GPIOTE_INTENCLR_IN1_Pos: ::cty::c_uint = 1;
pub const GPIOTE_INTENCLR_IN1_Msk: ::cty::c_uint = 2;
pub const GPIOTE_INTENCLR_IN1_Disabled: ::cty::c_uint = 0;
pub const GPIOTE_INTENCLR_IN1_Enabled: ::cty::c_uint = 1;
pub const GPIOTE_INTENCLR_IN1_Clear: ::cty::c_uint = 1;
pub const GPIOTE_INTENCLR_IN0_Pos: ::cty::c_uint = 0;
pub const GPIOTE_INTENCLR_IN0_Msk: ::cty::c_uint = 1;
pub const GPIOTE_INTENCLR_IN0_Disabled: ::cty::c_uint = 0;
pub const GPIOTE_INTENCLR_IN0_Enabled: ::cty::c_uint = 1;
pub const GPIOTE_INTENCLR_IN0_Clear: ::cty::c_uint = 1;
pub const GPIOTE_CONFIG_OUTINIT_Pos: ::cty::c_uint = 20;
pub const GPIOTE_CONFIG_OUTINIT_Msk: ::cty::c_uint = 1048576;
pub const GPIOTE_CONFIG_OUTINIT_Low: ::cty::c_uint = 0;
pub const GPIOTE_CONFIG_OUTINIT_High: ::cty::c_uint = 1;
pub const GPIOTE_CONFIG_POLARITY_Pos: ::cty::c_uint = 16;
pub const GPIOTE_CONFIG_POLARITY_Msk: ::cty::c_uint = 196608;
pub const GPIOTE_CONFIG_POLARITY_None: ::cty::c_uint = 0;
pub const GPIOTE_CONFIG_POLARITY_LoToHi: ::cty::c_uint = 1;
pub const GPIOTE_CONFIG_POLARITY_HiToLo: ::cty::c_uint = 2;
pub const GPIOTE_CONFIG_POLARITY_Toggle: ::cty::c_uint = 3;
pub const GPIOTE_CONFIG_PSEL_Pos: ::cty::c_uint = 8;
pub const GPIOTE_CONFIG_PSEL_Msk: ::cty::c_uint = 7936;
pub const GPIOTE_CONFIG_MODE_Pos: ::cty::c_uint = 0;
pub const GPIOTE_CONFIG_MODE_Msk: ::cty::c_uint = 3;
pub const GPIOTE_CONFIG_MODE_Disabled: ::cty::c_uint = 0;
pub const GPIOTE_CONFIG_MODE_Event: ::cty::c_uint = 1;
pub const GPIOTE_CONFIG_MODE_Task: ::cty::c_uint = 3;
pub const GPIOTE_POWER_POWER_Pos: ::cty::c_uint = 0;
pub const GPIOTE_POWER_POWER_Msk: ::cty::c_uint = 1;
pub const GPIOTE_POWER_POWER_Disabled: ::cty::c_uint = 0;
pub const GPIOTE_POWER_POWER_Enabled: ::cty::c_uint = 1;
pub const LPCOMP_SHORTS_CROSS_STOP_Pos: ::cty::c_uint = 4;
pub const LPCOMP_SHORTS_CROSS_STOP_Msk: ::cty::c_uint = 16;
pub const LPCOMP_SHORTS_CROSS_STOP_Disabled: ::cty::c_uint = 0;
pub const LPCOMP_SHORTS_CROSS_STOP_Enabled: ::cty::c_uint = 1;
pub const LPCOMP_SHORTS_UP_STOP_Pos: ::cty::c_uint = 3;
pub const LPCOMP_SHORTS_UP_STOP_Msk: ::cty::c_uint = 8;
pub const LPCOMP_SHORTS_UP_STOP_Disabled: ::cty::c_uint = 0;
pub const LPCOMP_SHORTS_UP_STOP_Enabled: ::cty::c_uint = 1;
pub const LPCOMP_SHORTS_DOWN_STOP_Pos: ::cty::c_uint = 2;
pub const LPCOMP_SHORTS_DOWN_STOP_Msk: ::cty::c_uint = 4;
pub const LPCOMP_SHORTS_DOWN_STOP_Disabled: ::cty::c_uint = 0;
pub const LPCOMP_SHORTS_DOWN_STOP_Enabled: ::cty::c_uint = 1;
pub const LPCOMP_SHORTS_READY_STOP_Pos: ::cty::c_uint = 1;
pub const LPCOMP_SHORTS_READY_STOP_Msk: ::cty::c_uint = 2;
pub const LPCOMP_SHORTS_READY_STOP_Disabled: ::cty::c_uint = 0;
pub const LPCOMP_SHORTS_READY_STOP_Enabled: ::cty::c_uint = 1;
pub const LPCOMP_SHORTS_READY_SAMPLE_Pos: ::cty::c_uint = 0;
pub const LPCOMP_SHORTS_READY_SAMPLE_Msk: ::cty::c_uint = 1;
pub const LPCOMP_SHORTS_READY_SAMPLE_Disabled: ::cty::c_uint = 0;
pub const LPCOMP_SHORTS_READY_SAMPLE_Enabled: ::cty::c_uint = 1;
pub const LPCOMP_INTENSET_CROSS_Pos: ::cty::c_uint = 3;
pub const LPCOMP_INTENSET_CROSS_Msk: ::cty::c_uint = 8;
pub const LPCOMP_INTENSET_CROSS_Disabled: ::cty::c_uint = 0;
pub const LPCOMP_INTENSET_CROSS_Enabled: ::cty::c_uint = 1;
pub const LPCOMP_INTENSET_CROSS_Set: ::cty::c_uint = 1;
pub const LPCOMP_INTENSET_UP_Pos: ::cty::c_uint = 2;
pub const LPCOMP_INTENSET_UP_Msk: ::cty::c_uint = 4;
pub const LPCOMP_INTENSET_UP_Disabled: ::cty::c_uint = 0;
pub const LPCOMP_INTENSET_UP_Enabled: ::cty::c_uint = 1;
pub const LPCOMP_INTENSET_UP_Set: ::cty::c_uint = 1;
pub const LPCOMP_INTENSET_DOWN_Pos: ::cty::c_uint = 1;
pub const LPCOMP_INTENSET_DOWN_Msk: ::cty::c_uint = 2;
pub const LPCOMP_INTENSET_DOWN_Disabled: ::cty::c_uint = 0;
pub const LPCOMP_INTENSET_DOWN_Enabled: ::cty::c_uint = 1;
pub const LPCOMP_INTENSET_DOWN_Set: ::cty::c_uint = 1;
pub const LPCOMP_INTENSET_READY_Pos: ::cty::c_uint = 0;
pub const LPCOMP_INTENSET_READY_Msk: ::cty::c_uint = 1;
pub const LPCOMP_INTENSET_READY_Disabled: ::cty::c_uint = 0;
pub const LPCOMP_INTENSET_READY_Enabled: ::cty::c_uint = 1;
pub const LPCOMP_INTENSET_READY_Set: ::cty::c_uint = 1;
pub const LPCOMP_INTENCLR_CROSS_Pos: ::cty::c_uint = 3;
pub const LPCOMP_INTENCLR_CROSS_Msk: ::cty::c_uint = 8;
pub const LPCOMP_INTENCLR_CROSS_Disabled: ::cty::c_uint = 0;
pub const LPCOMP_INTENCLR_CROSS_Enabled: ::cty::c_uint = 1;
pub const LPCOMP_INTENCLR_CROSS_Clear: ::cty::c_uint = 1;
pub const LPCOMP_INTENCLR_UP_Pos: ::cty::c_uint = 2;
pub const LPCOMP_INTENCLR_UP_Msk: ::cty::c_uint = 4;
pub const LPCOMP_INTENCLR_UP_Disabled: ::cty::c_uint = 0;
pub const LPCOMP_INTENCLR_UP_Enabled: ::cty::c_uint = 1;
pub const LPCOMP_INTENCLR_UP_Clear: ::cty::c_uint = 1;
pub const LPCOMP_INTENCLR_DOWN_Pos: ::cty::c_uint = 1;
pub const LPCOMP_INTENCLR_DOWN_Msk: ::cty::c_uint = 2;
pub const LPCOMP_INTENCLR_DOWN_Disabled: ::cty::c_uint = 0;
pub const LPCOMP_INTENCLR_DOWN_Enabled: ::cty::c_uint = 1;
pub const LPCOMP_INTENCLR_DOWN_Clear: ::cty::c_uint = 1;
pub const LPCOMP_INTENCLR_READY_Pos: ::cty::c_uint = 0;
pub const LPCOMP_INTENCLR_READY_Msk: ::cty::c_uint = 1;
pub const LPCOMP_INTENCLR_READY_Disabled: ::cty::c_uint = 0;
pub const LPCOMP_INTENCLR_READY_Enabled: ::cty::c_uint = 1;
pub const LPCOMP_INTENCLR_READY_Clear: ::cty::c_uint = 1;
pub const LPCOMP_RESULT_RESULT_Pos: ::cty::c_uint = 0;
pub const LPCOMP_RESULT_RESULT_Msk: ::cty::c_uint = 1;
pub const LPCOMP_RESULT_RESULT_Below: ::cty::c_uint = 0;
pub const LPCOMP_RESULT_RESULT_Above: ::cty::c_uint = 1;
pub const LPCOMP_ENABLE_ENABLE_Pos: ::cty::c_uint = 0;
pub const LPCOMP_ENABLE_ENABLE_Msk: ::cty::c_uint = 3;
pub const LPCOMP_ENABLE_ENABLE_Disabled: ::cty::c_uint = 0;
pub const LPCOMP_ENABLE_ENABLE_Enabled: ::cty::c_uint = 1;
pub const LPCOMP_PSEL_PSEL_Pos: ::cty::c_uint = 0;
pub const LPCOMP_PSEL_PSEL_Msk: ::cty::c_uint = 7;
pub const LPCOMP_PSEL_PSEL_AnalogInput0: ::cty::c_uint = 0;
pub const LPCOMP_PSEL_PSEL_AnalogInput1: ::cty::c_uint = 1;
pub const LPCOMP_PSEL_PSEL_AnalogInput2: ::cty::c_uint = 2;
pub const LPCOMP_PSEL_PSEL_AnalogInput3: ::cty::c_uint = 3;
pub const LPCOMP_PSEL_PSEL_AnalogInput4: ::cty::c_uint = 4;
pub const LPCOMP_PSEL_PSEL_AnalogInput5: ::cty::c_uint = 5;
pub const LPCOMP_PSEL_PSEL_AnalogInput6: ::cty::c_uint = 6;
pub const LPCOMP_PSEL_PSEL_AnalogInput7: ::cty::c_uint = 7;
pub const LPCOMP_REFSEL_REFSEL_Pos: ::cty::c_uint = 0;
pub const LPCOMP_REFSEL_REFSEL_Msk: ::cty::c_uint = 7;
pub const LPCOMP_REFSEL_REFSEL_SupplyOneEighthPrescaling: ::cty::c_uint = 0;
pub const LPCOMP_REFSEL_REFSEL_SupplyTwoEighthsPrescaling: ::cty::c_uint = 1;
pub const LPCOMP_REFSEL_REFSEL_SupplyThreeEighthsPrescaling: ::cty::c_uint =
    2;
pub const LPCOMP_REFSEL_REFSEL_SupplyFourEighthsPrescaling: ::cty::c_uint = 3;
pub const LPCOMP_REFSEL_REFSEL_SupplyFiveEighthsPrescaling: ::cty::c_uint = 4;
pub const LPCOMP_REFSEL_REFSEL_SupplySixEighthsPrescaling: ::cty::c_uint = 5;
pub const LPCOMP_REFSEL_REFSEL_SupplySevenEighthsPrescaling: ::cty::c_uint =
    6;
pub const LPCOMP_REFSEL_REFSEL_ARef: ::cty::c_uint = 7;
pub const LPCOMP_EXTREFSEL_EXTREFSEL_Pos: ::cty::c_uint = 0;
pub const LPCOMP_EXTREFSEL_EXTREFSEL_Msk: ::cty::c_uint = 1;
pub const LPCOMP_EXTREFSEL_EXTREFSEL_AnalogReference0: ::cty::c_uint = 0;
pub const LPCOMP_EXTREFSEL_EXTREFSEL_AnalogReference1: ::cty::c_uint = 1;
pub const LPCOMP_ANADETECT_ANADETECT_Pos: ::cty::c_uint = 0;
pub const LPCOMP_ANADETECT_ANADETECT_Msk: ::cty::c_uint = 3;
pub const LPCOMP_ANADETECT_ANADETECT_Cross: ::cty::c_uint = 0;
pub const LPCOMP_ANADETECT_ANADETECT_Up: ::cty::c_uint = 1;
pub const LPCOMP_ANADETECT_ANADETECT_Down: ::cty::c_uint = 2;
pub const LPCOMP_POWER_POWER_Pos: ::cty::c_uint = 0;
pub const LPCOMP_POWER_POWER_Msk: ::cty::c_uint = 1;
pub const LPCOMP_POWER_POWER_Disabled: ::cty::c_uint = 0;
pub const LPCOMP_POWER_POWER_Enabled: ::cty::c_uint = 1;
pub const MPU_PERR0_PPI_Pos: ::cty::c_uint = 31;
pub const MPU_PERR0_PPI_Msk: ::cty::c_uint = 2147483648;
pub const MPU_PERR0_PPI_InRegion1: ::cty::c_uint = 0;
pub const MPU_PERR0_PPI_InRegion0: ::cty::c_uint = 1;
pub const MPU_PERR0_NVMC_Pos: ::cty::c_uint = 30;
pub const MPU_PERR0_NVMC_Msk: ::cty::c_uint = 1073741824;
pub const MPU_PERR0_NVMC_InRegion1: ::cty::c_uint = 0;
pub const MPU_PERR0_NVMC_InRegion0: ::cty::c_uint = 1;
pub const MPU_PERR0_LPCOMP_Pos: ::cty::c_uint = 19;
pub const MPU_PERR0_LPCOMP_Msk: ::cty::c_uint = 524288;
pub const MPU_PERR0_LPCOMP_InRegion1: ::cty::c_uint = 0;
pub const MPU_PERR0_LPCOMP_InRegion0: ::cty::c_uint = 1;
pub const MPU_PERR0_QDEC_Pos: ::cty::c_uint = 18;
pub const MPU_PERR0_QDEC_Msk: ::cty::c_uint = 262144;
pub const MPU_PERR0_QDEC_InRegion1: ::cty::c_uint = 0;
pub const MPU_PERR0_QDEC_InRegion0: ::cty::c_uint = 1;
pub const MPU_PERR0_RTC1_Pos: ::cty::c_uint = 17;
pub const MPU_PERR0_RTC1_Msk: ::cty::c_uint = 131072;
pub const MPU_PERR0_RTC1_InRegion1: ::cty::c_uint = 0;
pub const MPU_PERR0_RTC1_InRegion0: ::cty::c_uint = 1;
pub const MPU_PERR0_WDT_Pos: ::cty::c_uint = 16;
pub const MPU_PERR0_WDT_Msk: ::cty::c_uint = 65536;
pub const MPU_PERR0_WDT_InRegion1: ::cty::c_uint = 0;
pub const MPU_PERR0_WDT_InRegion0: ::cty::c_uint = 1;
pub const MPU_PERR0_CCM_AAR_Pos: ::cty::c_uint = 15;
pub const MPU_PERR0_CCM_AAR_Msk: ::cty::c_uint = 32768;
pub const MPU_PERR0_CCM_AAR_InRegion1: ::cty::c_uint = 0;
pub const MPU_PERR0_CCM_AAR_InRegion0: ::cty::c_uint = 1;
pub const MPU_PERR0_ECB_Pos: ::cty::c_uint = 14;
pub const MPU_PERR0_ECB_Msk: ::cty::c_uint = 16384;
pub const MPU_PERR0_ECB_InRegion1: ::cty::c_uint = 0;
pub const MPU_PERR0_ECB_InRegion0: ::cty::c_uint = 1;
pub const MPU_PERR0_RNG_Pos: ::cty::c_uint = 13;
pub const MPU_PERR0_RNG_Msk: ::cty::c_uint = 8192;
pub const MPU_PERR0_RNG_InRegion1: ::cty::c_uint = 0;
pub const MPU_PERR0_RNG_InRegion0: ::cty::c_uint = 1;
pub const MPU_PERR0_TEMP_Pos: ::cty::c_uint = 12;
pub const MPU_PERR0_TEMP_Msk: ::cty::c_uint = 4096;
pub const MPU_PERR0_TEMP_InRegion1: ::cty::c_uint = 0;
pub const MPU_PERR0_TEMP_InRegion0: ::cty::c_uint = 1;
pub const MPU_PERR0_RTC0_Pos: ::cty::c_uint = 11;
pub const MPU_PERR0_RTC0_Msk: ::cty::c_uint = 2048;
pub const MPU_PERR0_RTC0_InRegion1: ::cty::c_uint = 0;
pub const MPU_PERR0_RTC0_InRegion0: ::cty::c_uint = 1;
pub const MPU_PERR0_TIMER2_Pos: ::cty::c_uint = 10;
pub const MPU_PERR0_TIMER2_Msk: ::cty::c_uint = 1024;
pub const MPU_PERR0_TIMER2_InRegion1: ::cty::c_uint = 0;
pub const MPU_PERR0_TIMER2_InRegion0: ::cty::c_uint = 1;
pub const MPU_PERR0_TIMER1_Pos: ::cty::c_uint = 9;
pub const MPU_PERR0_TIMER1_Msk: ::cty::c_uint = 512;
pub const MPU_PERR0_TIMER1_InRegion1: ::cty::c_uint = 0;
pub const MPU_PERR0_TIMER1_InRegion0: ::cty::c_uint = 1;
pub const MPU_PERR0_TIMER0_Pos: ::cty::c_uint = 8;
pub const MPU_PERR0_TIMER0_Msk: ::cty::c_uint = 256;
pub const MPU_PERR0_TIMER0_InRegion1: ::cty::c_uint = 0;
pub const MPU_PERR0_TIMER0_InRegion0: ::cty::c_uint = 1;
pub const MPU_PERR0_ADC_Pos: ::cty::c_uint = 7;
pub const MPU_PERR0_ADC_Msk: ::cty::c_uint = 128;
pub const MPU_PERR0_ADC_InRegion1: ::cty::c_uint = 0;
pub const MPU_PERR0_ADC_InRegion0: ::cty::c_uint = 1;
pub const MPU_PERR0_GPIOTE_Pos: ::cty::c_uint = 6;
pub const MPU_PERR0_GPIOTE_Msk: ::cty::c_uint = 64;
pub const MPU_PERR0_GPIOTE_InRegion1: ::cty::c_uint = 0;
pub const MPU_PERR0_GPIOTE_InRegion0: ::cty::c_uint = 1;
pub const MPU_PERR0_SPI1_TWI1_Pos: ::cty::c_uint = 4;
pub const MPU_PERR0_SPI1_TWI1_Msk: ::cty::c_uint = 16;
pub const MPU_PERR0_SPI1_TWI1_InRegion1: ::cty::c_uint = 0;
pub const MPU_PERR0_SPI1_TWI1_InRegion0: ::cty::c_uint = 1;
pub const MPU_PERR0_SPI0_TWI0_Pos: ::cty::c_uint = 3;
pub const MPU_PERR0_SPI0_TWI0_Msk: ::cty::c_uint = 8;
pub const MPU_PERR0_SPI0_TWI0_InRegion1: ::cty::c_uint = 0;
pub const MPU_PERR0_SPI0_TWI0_InRegion0: ::cty::c_uint = 1;
pub const MPU_PERR0_UART0_Pos: ::cty::c_uint = 2;
pub const MPU_PERR0_UART0_Msk: ::cty::c_uint = 4;
pub const MPU_PERR0_UART0_InRegion1: ::cty::c_uint = 0;
pub const MPU_PERR0_UART0_InRegion0: ::cty::c_uint = 1;
pub const MPU_PERR0_RADIO_Pos: ::cty::c_uint = 1;
pub const MPU_PERR0_RADIO_Msk: ::cty::c_uint = 2;
pub const MPU_PERR0_RADIO_InRegion1: ::cty::c_uint = 0;
pub const MPU_PERR0_RADIO_InRegion0: ::cty::c_uint = 1;
pub const MPU_PERR0_POWER_CLOCK_Pos: ::cty::c_uint = 0;
pub const MPU_PERR0_POWER_CLOCK_Msk: ::cty::c_uint = 1;
pub const MPU_PERR0_POWER_CLOCK_InRegion1: ::cty::c_uint = 0;
pub const MPU_PERR0_POWER_CLOCK_InRegion0: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG31_Pos: ::cty::c_uint = 31;
pub const MPU_PROTENSET0_PROTREG31_Msk: ::cty::c_uint = 2147483648;
pub const MPU_PROTENSET0_PROTREG31_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG31_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG31_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG30_Pos: ::cty::c_uint = 30;
pub const MPU_PROTENSET0_PROTREG30_Msk: ::cty::c_uint = 1073741824;
pub const MPU_PROTENSET0_PROTREG30_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG30_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG30_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG29_Pos: ::cty::c_uint = 29;
pub const MPU_PROTENSET0_PROTREG29_Msk: ::cty::c_uint = 536870912;
pub const MPU_PROTENSET0_PROTREG29_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG29_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG29_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG28_Pos: ::cty::c_uint = 28;
pub const MPU_PROTENSET0_PROTREG28_Msk: ::cty::c_uint = 268435456;
pub const MPU_PROTENSET0_PROTREG28_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG28_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG28_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG27_Pos: ::cty::c_uint = 27;
pub const MPU_PROTENSET0_PROTREG27_Msk: ::cty::c_uint = 134217728;
pub const MPU_PROTENSET0_PROTREG27_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG27_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG27_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG26_Pos: ::cty::c_uint = 26;
pub const MPU_PROTENSET0_PROTREG26_Msk: ::cty::c_uint = 67108864;
pub const MPU_PROTENSET0_PROTREG26_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG26_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG26_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG25_Pos: ::cty::c_uint = 25;
pub const MPU_PROTENSET0_PROTREG25_Msk: ::cty::c_uint = 33554432;
pub const MPU_PROTENSET0_PROTREG25_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG25_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG25_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG24_Pos: ::cty::c_uint = 24;
pub const MPU_PROTENSET0_PROTREG24_Msk: ::cty::c_uint = 16777216;
pub const MPU_PROTENSET0_PROTREG24_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG24_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG24_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG23_Pos: ::cty::c_uint = 23;
pub const MPU_PROTENSET0_PROTREG23_Msk: ::cty::c_uint = 8388608;
pub const MPU_PROTENSET0_PROTREG23_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG23_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG23_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG22_Pos: ::cty::c_uint = 22;
pub const MPU_PROTENSET0_PROTREG22_Msk: ::cty::c_uint = 4194304;
pub const MPU_PROTENSET0_PROTREG22_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG22_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG22_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG21_Pos: ::cty::c_uint = 21;
pub const MPU_PROTENSET0_PROTREG21_Msk: ::cty::c_uint = 2097152;
pub const MPU_PROTENSET0_PROTREG21_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG21_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG21_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG20_Pos: ::cty::c_uint = 20;
pub const MPU_PROTENSET0_PROTREG20_Msk: ::cty::c_uint = 1048576;
pub const MPU_PROTENSET0_PROTREG20_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG20_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG20_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG19_Pos: ::cty::c_uint = 19;
pub const MPU_PROTENSET0_PROTREG19_Msk: ::cty::c_uint = 524288;
pub const MPU_PROTENSET0_PROTREG19_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG19_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG19_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG18_Pos: ::cty::c_uint = 18;
pub const MPU_PROTENSET0_PROTREG18_Msk: ::cty::c_uint = 262144;
pub const MPU_PROTENSET0_PROTREG18_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG18_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG18_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG17_Pos: ::cty::c_uint = 17;
pub const MPU_PROTENSET0_PROTREG17_Msk: ::cty::c_uint = 131072;
pub const MPU_PROTENSET0_PROTREG17_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG17_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG17_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG16_Pos: ::cty::c_uint = 16;
pub const MPU_PROTENSET0_PROTREG16_Msk: ::cty::c_uint = 65536;
pub const MPU_PROTENSET0_PROTREG16_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG16_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG16_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG15_Pos: ::cty::c_uint = 15;
pub const MPU_PROTENSET0_PROTREG15_Msk: ::cty::c_uint = 32768;
pub const MPU_PROTENSET0_PROTREG15_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG15_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG15_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG14_Pos: ::cty::c_uint = 14;
pub const MPU_PROTENSET0_PROTREG14_Msk: ::cty::c_uint = 16384;
pub const MPU_PROTENSET0_PROTREG14_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG14_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG14_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG13_Pos: ::cty::c_uint = 13;
pub const MPU_PROTENSET0_PROTREG13_Msk: ::cty::c_uint = 8192;
pub const MPU_PROTENSET0_PROTREG13_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG13_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG13_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG12_Pos: ::cty::c_uint = 12;
pub const MPU_PROTENSET0_PROTREG12_Msk: ::cty::c_uint = 4096;
pub const MPU_PROTENSET0_PROTREG12_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG12_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG12_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG11_Pos: ::cty::c_uint = 11;
pub const MPU_PROTENSET0_PROTREG11_Msk: ::cty::c_uint = 2048;
pub const MPU_PROTENSET0_PROTREG11_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG11_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG11_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG10_Pos: ::cty::c_uint = 10;
pub const MPU_PROTENSET0_PROTREG10_Msk: ::cty::c_uint = 1024;
pub const MPU_PROTENSET0_PROTREG10_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG10_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG10_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG9_Pos: ::cty::c_uint = 9;
pub const MPU_PROTENSET0_PROTREG9_Msk: ::cty::c_uint = 512;
pub const MPU_PROTENSET0_PROTREG9_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG9_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG9_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG8_Pos: ::cty::c_uint = 8;
pub const MPU_PROTENSET0_PROTREG8_Msk: ::cty::c_uint = 256;
pub const MPU_PROTENSET0_PROTREG8_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG8_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG8_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG7_Pos: ::cty::c_uint = 7;
pub const MPU_PROTENSET0_PROTREG7_Msk: ::cty::c_uint = 128;
pub const MPU_PROTENSET0_PROTREG7_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG7_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG7_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG6_Pos: ::cty::c_uint = 6;
pub const MPU_PROTENSET0_PROTREG6_Msk: ::cty::c_uint = 64;
pub const MPU_PROTENSET0_PROTREG6_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG6_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG6_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG5_Pos: ::cty::c_uint = 5;
pub const MPU_PROTENSET0_PROTREG5_Msk: ::cty::c_uint = 32;
pub const MPU_PROTENSET0_PROTREG5_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG5_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG5_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG4_Pos: ::cty::c_uint = 4;
pub const MPU_PROTENSET0_PROTREG4_Msk: ::cty::c_uint = 16;
pub const MPU_PROTENSET0_PROTREG4_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG4_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG4_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG3_Pos: ::cty::c_uint = 3;
pub const MPU_PROTENSET0_PROTREG3_Msk: ::cty::c_uint = 8;
pub const MPU_PROTENSET0_PROTREG3_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG3_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG3_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG2_Pos: ::cty::c_uint = 2;
pub const MPU_PROTENSET0_PROTREG2_Msk: ::cty::c_uint = 4;
pub const MPU_PROTENSET0_PROTREG2_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG2_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG2_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG1_Pos: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG1_Msk: ::cty::c_uint = 2;
pub const MPU_PROTENSET0_PROTREG1_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG1_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG1_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG0_Pos: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG0_Msk: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG0_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET0_PROTREG0_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET0_PROTREG0_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG63_Pos: ::cty::c_uint = 31;
pub const MPU_PROTENSET1_PROTREG63_Msk: ::cty::c_uint = 2147483648;
pub const MPU_PROTENSET1_PROTREG63_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG63_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG63_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG62_Pos: ::cty::c_uint = 30;
pub const MPU_PROTENSET1_PROTREG62_Msk: ::cty::c_uint = 1073741824;
pub const MPU_PROTENSET1_PROTREG62_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG62_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG62_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG61_Pos: ::cty::c_uint = 29;
pub const MPU_PROTENSET1_PROTREG61_Msk: ::cty::c_uint = 536870912;
pub const MPU_PROTENSET1_PROTREG61_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG61_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG61_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG60_Pos: ::cty::c_uint = 28;
pub const MPU_PROTENSET1_PROTREG60_Msk: ::cty::c_uint = 268435456;
pub const MPU_PROTENSET1_PROTREG60_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG60_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG60_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG59_Pos: ::cty::c_uint = 27;
pub const MPU_PROTENSET1_PROTREG59_Msk: ::cty::c_uint = 134217728;
pub const MPU_PROTENSET1_PROTREG59_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG59_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG59_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG58_Pos: ::cty::c_uint = 26;
pub const MPU_PROTENSET1_PROTREG58_Msk: ::cty::c_uint = 67108864;
pub const MPU_PROTENSET1_PROTREG58_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG58_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG58_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG57_Pos: ::cty::c_uint = 25;
pub const MPU_PROTENSET1_PROTREG57_Msk: ::cty::c_uint = 33554432;
pub const MPU_PROTENSET1_PROTREG57_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG57_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG57_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG56_Pos: ::cty::c_uint = 24;
pub const MPU_PROTENSET1_PROTREG56_Msk: ::cty::c_uint = 16777216;
pub const MPU_PROTENSET1_PROTREG56_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG56_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG56_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG55_Pos: ::cty::c_uint = 23;
pub const MPU_PROTENSET1_PROTREG55_Msk: ::cty::c_uint = 8388608;
pub const MPU_PROTENSET1_PROTREG55_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG55_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG55_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG54_Pos: ::cty::c_uint = 22;
pub const MPU_PROTENSET1_PROTREG54_Msk: ::cty::c_uint = 4194304;
pub const MPU_PROTENSET1_PROTREG54_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG54_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG54_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG53_Pos: ::cty::c_uint = 21;
pub const MPU_PROTENSET1_PROTREG53_Msk: ::cty::c_uint = 2097152;
pub const MPU_PROTENSET1_PROTREG53_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG53_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG53_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG52_Pos: ::cty::c_uint = 20;
pub const MPU_PROTENSET1_PROTREG52_Msk: ::cty::c_uint = 1048576;
pub const MPU_PROTENSET1_PROTREG52_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG52_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG52_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG51_Pos: ::cty::c_uint = 19;
pub const MPU_PROTENSET1_PROTREG51_Msk: ::cty::c_uint = 524288;
pub const MPU_PROTENSET1_PROTREG51_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG51_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG51_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG50_Pos: ::cty::c_uint = 18;
pub const MPU_PROTENSET1_PROTREG50_Msk: ::cty::c_uint = 262144;
pub const MPU_PROTENSET1_PROTREG50_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG50_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG50_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG49_Pos: ::cty::c_uint = 17;
pub const MPU_PROTENSET1_PROTREG49_Msk: ::cty::c_uint = 131072;
pub const MPU_PROTENSET1_PROTREG49_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG49_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG49_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG48_Pos: ::cty::c_uint = 16;
pub const MPU_PROTENSET1_PROTREG48_Msk: ::cty::c_uint = 65536;
pub const MPU_PROTENSET1_PROTREG48_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG48_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG48_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG47_Pos: ::cty::c_uint = 15;
pub const MPU_PROTENSET1_PROTREG47_Msk: ::cty::c_uint = 32768;
pub const MPU_PROTENSET1_PROTREG47_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG47_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG47_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG46_Pos: ::cty::c_uint = 14;
pub const MPU_PROTENSET1_PROTREG46_Msk: ::cty::c_uint = 16384;
pub const MPU_PROTENSET1_PROTREG46_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG46_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG46_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG45_Pos: ::cty::c_uint = 13;
pub const MPU_PROTENSET1_PROTREG45_Msk: ::cty::c_uint = 8192;
pub const MPU_PROTENSET1_PROTREG45_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG45_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG45_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG44_Pos: ::cty::c_uint = 12;
pub const MPU_PROTENSET1_PROTREG44_Msk: ::cty::c_uint = 4096;
pub const MPU_PROTENSET1_PROTREG44_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG44_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG44_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG43_Pos: ::cty::c_uint = 11;
pub const MPU_PROTENSET1_PROTREG43_Msk: ::cty::c_uint = 2048;
pub const MPU_PROTENSET1_PROTREG43_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG43_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG43_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG42_Pos: ::cty::c_uint = 10;
pub const MPU_PROTENSET1_PROTREG42_Msk: ::cty::c_uint = 1024;
pub const MPU_PROTENSET1_PROTREG42_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG42_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG42_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG41_Pos: ::cty::c_uint = 9;
pub const MPU_PROTENSET1_PROTREG41_Msk: ::cty::c_uint = 512;
pub const MPU_PROTENSET1_PROTREG41_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG41_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG41_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG40_Pos: ::cty::c_uint = 8;
pub const MPU_PROTENSET1_PROTREG40_Msk: ::cty::c_uint = 256;
pub const MPU_PROTENSET1_PROTREG40_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG40_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG40_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG39_Pos: ::cty::c_uint = 7;
pub const MPU_PROTENSET1_PROTREG39_Msk: ::cty::c_uint = 128;
pub const MPU_PROTENSET1_PROTREG39_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG39_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG39_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG38_Pos: ::cty::c_uint = 6;
pub const MPU_PROTENSET1_PROTREG38_Msk: ::cty::c_uint = 64;
pub const MPU_PROTENSET1_PROTREG38_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG38_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG38_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG37_Pos: ::cty::c_uint = 5;
pub const MPU_PROTENSET1_PROTREG37_Msk: ::cty::c_uint = 32;
pub const MPU_PROTENSET1_PROTREG37_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG37_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG37_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG36_Pos: ::cty::c_uint = 4;
pub const MPU_PROTENSET1_PROTREG36_Msk: ::cty::c_uint = 16;
pub const MPU_PROTENSET1_PROTREG36_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG36_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG36_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG35_Pos: ::cty::c_uint = 3;
pub const MPU_PROTENSET1_PROTREG35_Msk: ::cty::c_uint = 8;
pub const MPU_PROTENSET1_PROTREG35_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG35_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG35_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG34_Pos: ::cty::c_uint = 2;
pub const MPU_PROTENSET1_PROTREG34_Msk: ::cty::c_uint = 4;
pub const MPU_PROTENSET1_PROTREG34_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG34_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG34_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG33_Pos: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG33_Msk: ::cty::c_uint = 2;
pub const MPU_PROTENSET1_PROTREG33_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG33_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG33_Set: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG32_Pos: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG32_Msk: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG32_Disabled: ::cty::c_uint = 0;
pub const MPU_PROTENSET1_PROTREG32_Enabled: ::cty::c_uint = 1;
pub const MPU_PROTENSET1_PROTREG32_Set: ::cty::c_uint = 1;
pub const MPU_DISABLEINDEBUG_DISABLEINDEBUG_Pos: ::cty::c_uint = 0;
pub const MPU_DISABLEINDEBUG_DISABLEINDEBUG_Msk: ::cty::c_uint = 1;
pub const MPU_DISABLEINDEBUG_DISABLEINDEBUG_Enabled: ::cty::c_uint = 0;
pub const MPU_DISABLEINDEBUG_DISABLEINDEBUG_Disabled: ::cty::c_uint = 1;
pub const MPU_PROTBLOCKSIZE_PROTBLOCKSIZE_Pos: ::cty::c_uint = 0;
pub const MPU_PROTBLOCKSIZE_PROTBLOCKSIZE_Msk: ::cty::c_uint = 3;
pub const MPU_PROTBLOCKSIZE_PROTBLOCKSIZE_4k: ::cty::c_uint = 0;
pub const NVMC_READY_READY_Pos: ::cty::c_uint = 0;
pub const NVMC_READY_READY_Msk: ::cty::c_uint = 1;
pub const NVMC_READY_READY_Busy: ::cty::c_uint = 0;
pub const NVMC_READY_READY_Ready: ::cty::c_uint = 1;
pub const NVMC_CONFIG_WEN_Pos: ::cty::c_uint = 0;
pub const NVMC_CONFIG_WEN_Msk: ::cty::c_uint = 3;
pub const NVMC_CONFIG_WEN_Ren: ::cty::c_uint = 0;
pub const NVMC_CONFIG_WEN_Wen: ::cty::c_uint = 1;
pub const NVMC_CONFIG_WEN_Een: ::cty::c_uint = 2;
pub const NVMC_ERASEALL_ERASEALL_Pos: ::cty::c_uint = 0;
pub const NVMC_ERASEALL_ERASEALL_Msk: ::cty::c_uint = 1;
pub const NVMC_ERASEALL_ERASEALL_NoOperation: ::cty::c_uint = 0;
pub const NVMC_ERASEALL_ERASEALL_Erase: ::cty::c_uint = 1;
pub const NVMC_ERASEUICR_ERASEUICR_Pos: ::cty::c_uint = 0;
pub const NVMC_ERASEUICR_ERASEUICR_Msk: ::cty::c_uint = 1;
pub const NVMC_ERASEUICR_ERASEUICR_NoOperation: ::cty::c_uint = 0;
pub const NVMC_ERASEUICR_ERASEUICR_Erase: ::cty::c_uint = 1;
pub const POWER_INTENSET_POFWARN_Pos: ::cty::c_uint = 2;
pub const POWER_INTENSET_POFWARN_Msk: ::cty::c_uint = 4;
pub const POWER_INTENSET_POFWARN_Disabled: ::cty::c_uint = 0;
pub const POWER_INTENSET_POFWARN_Enabled: ::cty::c_uint = 1;
pub const POWER_INTENSET_POFWARN_Set: ::cty::c_uint = 1;
pub const POWER_INTENCLR_POFWARN_Pos: ::cty::c_uint = 2;
pub const POWER_INTENCLR_POFWARN_Msk: ::cty::c_uint = 4;
pub const POWER_INTENCLR_POFWARN_Disabled: ::cty::c_uint = 0;
pub const POWER_INTENCLR_POFWARN_Enabled: ::cty::c_uint = 1;
pub const POWER_INTENCLR_POFWARN_Clear: ::cty::c_uint = 1;
pub const POWER_RESETREAS_DIF_Pos: ::cty::c_uint = 18;
pub const POWER_RESETREAS_DIF_Msk: ::cty::c_uint = 262144;
pub const POWER_RESETREAS_DIF_NotDetected: ::cty::c_uint = 0;
pub const POWER_RESETREAS_DIF_Detected: ::cty::c_uint = 1;
pub const POWER_RESETREAS_LPCOMP_Pos: ::cty::c_uint = 17;
pub const POWER_RESETREAS_LPCOMP_Msk: ::cty::c_uint = 131072;
pub const POWER_RESETREAS_LPCOMP_NotDetected: ::cty::c_uint = 0;
pub const POWER_RESETREAS_LPCOMP_Detected: ::cty::c_uint = 1;
pub const POWER_RESETREAS_OFF_Pos: ::cty::c_uint = 16;
pub const POWER_RESETREAS_OFF_Msk: ::cty::c_uint = 65536;
pub const POWER_RESETREAS_OFF_NotDetected: ::cty::c_uint = 0;
pub const POWER_RESETREAS_OFF_Detected: ::cty::c_uint = 1;
pub const POWER_RESETREAS_LOCKUP_Pos: ::cty::c_uint = 3;
pub const POWER_RESETREAS_LOCKUP_Msk: ::cty::c_uint = 8;
pub const POWER_RESETREAS_LOCKUP_NotDetected: ::cty::c_uint = 0;
pub const POWER_RESETREAS_LOCKUP_Detected: ::cty::c_uint = 1;
pub const POWER_RESETREAS_SREQ_Pos: ::cty::c_uint = 2;
pub const POWER_RESETREAS_SREQ_Msk: ::cty::c_uint = 4;
pub const POWER_RESETREAS_SREQ_NotDetected: ::cty::c_uint = 0;
pub const POWER_RESETREAS_SREQ_Detected: ::cty::c_uint = 1;
pub const POWER_RESETREAS_DOG_Pos: ::cty::c_uint = 1;
pub const POWER_RESETREAS_DOG_Msk: ::cty::c_uint = 2;
pub const POWER_RESETREAS_DOG_NotDetected: ::cty::c_uint = 0;
pub const POWER_RESETREAS_DOG_Detected: ::cty::c_uint = 1;
pub const POWER_RESETREAS_RESETPIN_Pos: ::cty::c_uint = 0;
pub const POWER_RESETREAS_RESETPIN_Msk: ::cty::c_uint = 1;
pub const POWER_RESETREAS_RESETPIN_NotDetected: ::cty::c_uint = 0;
pub const POWER_RESETREAS_RESETPIN_Detected: ::cty::c_uint = 1;
pub const POWER_RAMSTATUS_RAMBLOCK3_Pos: ::cty::c_uint = 3;
pub const POWER_RAMSTATUS_RAMBLOCK3_Msk: ::cty::c_uint = 8;
pub const POWER_RAMSTATUS_RAMBLOCK3_Off: ::cty::c_uint = 0;
pub const POWER_RAMSTATUS_RAMBLOCK3_On: ::cty::c_uint = 1;
pub const POWER_RAMSTATUS_RAMBLOCK2_Pos: ::cty::c_uint = 2;
pub const POWER_RAMSTATUS_RAMBLOCK2_Msk: ::cty::c_uint = 4;
pub const POWER_RAMSTATUS_RAMBLOCK2_Off: ::cty::c_uint = 0;
pub const POWER_RAMSTATUS_RAMBLOCK2_On: ::cty::c_uint = 1;
pub const POWER_RAMSTATUS_RAMBLOCK1_Pos: ::cty::c_uint = 1;
pub const POWER_RAMSTATUS_RAMBLOCK1_Msk: ::cty::c_uint = 2;
pub const POWER_RAMSTATUS_RAMBLOCK1_Off: ::cty::c_uint = 0;
pub const POWER_RAMSTATUS_RAMBLOCK1_On: ::cty::c_uint = 1;
pub const POWER_RAMSTATUS_RAMBLOCK0_Pos: ::cty::c_uint = 0;
pub const POWER_RAMSTATUS_RAMBLOCK0_Msk: ::cty::c_uint = 1;
pub const POWER_RAMSTATUS_RAMBLOCK0_Off: ::cty::c_uint = 0;
pub const POWER_RAMSTATUS_RAMBLOCK0_On: ::cty::c_uint = 1;
pub const POWER_SYSTEMOFF_SYSTEMOFF_Pos: ::cty::c_uint = 0;
pub const POWER_SYSTEMOFF_SYSTEMOFF_Msk: ::cty::c_uint = 1;
pub const POWER_SYSTEMOFF_SYSTEMOFF_Enter: ::cty::c_uint = 1;
pub const POWER_POFCON_THRESHOLD_Pos: ::cty::c_uint = 1;
pub const POWER_POFCON_THRESHOLD_Msk: ::cty::c_uint = 6;
pub const POWER_POFCON_THRESHOLD_V21: ::cty::c_uint = 0;
pub const POWER_POFCON_THRESHOLD_V23: ::cty::c_uint = 1;
pub const POWER_POFCON_THRESHOLD_V25: ::cty::c_uint = 2;
pub const POWER_POFCON_THRESHOLD_V27: ::cty::c_uint = 3;
pub const POWER_POFCON_POF_Pos: ::cty::c_uint = 0;
pub const POWER_POFCON_POF_Msk: ::cty::c_uint = 1;
pub const POWER_POFCON_POF_Disabled: ::cty::c_uint = 0;
pub const POWER_POFCON_POF_Enabled: ::cty::c_uint = 1;
pub const POWER_GPREGRET_GPREGRET_Pos: ::cty::c_uint = 0;
pub const POWER_GPREGRET_GPREGRET_Msk: ::cty::c_uint = 255;
pub const POWER_RAMON_OFFRAM1_Pos: ::cty::c_uint = 17;
pub const POWER_RAMON_OFFRAM1_Msk: ::cty::c_uint = 131072;
pub const POWER_RAMON_OFFRAM1_RAM1Off: ::cty::c_uint = 0;
pub const POWER_RAMON_OFFRAM1_RAM1On: ::cty::c_uint = 1;
pub const POWER_RAMON_OFFRAM0_Pos: ::cty::c_uint = 16;
pub const POWER_RAMON_OFFRAM0_Msk: ::cty::c_uint = 65536;
pub const POWER_RAMON_OFFRAM0_RAM0Off: ::cty::c_uint = 0;
pub const POWER_RAMON_OFFRAM0_RAM0On: ::cty::c_uint = 1;
pub const POWER_RAMON_ONRAM1_Pos: ::cty::c_uint = 1;
pub const POWER_RAMON_ONRAM1_Msk: ::cty::c_uint = 2;
pub const POWER_RAMON_ONRAM1_RAM1Off: ::cty::c_uint = 0;
pub const POWER_RAMON_ONRAM1_RAM1On: ::cty::c_uint = 1;
pub const POWER_RAMON_ONRAM0_Pos: ::cty::c_uint = 0;
pub const POWER_RAMON_ONRAM0_Msk: ::cty::c_uint = 1;
pub const POWER_RAMON_ONRAM0_RAM0Off: ::cty::c_uint = 0;
pub const POWER_RAMON_ONRAM0_RAM0On: ::cty::c_uint = 1;
pub const POWER_RESET_RESET_Pos: ::cty::c_uint = 0;
pub const POWER_RESET_RESET_Msk: ::cty::c_uint = 1;
pub const POWER_RESET_RESET_Disabled: ::cty::c_uint = 0;
pub const POWER_RESET_RESET_Enabled: ::cty::c_uint = 1;
pub const POWER_RAMONB_OFFRAM3_Pos: ::cty::c_uint = 17;
pub const POWER_RAMONB_OFFRAM3_Msk: ::cty::c_uint = 131072;
pub const POWER_RAMONB_OFFRAM3_RAM3Off: ::cty::c_uint = 0;
pub const POWER_RAMONB_OFFRAM3_RAM3On: ::cty::c_uint = 1;
pub const POWER_RAMONB_OFFRAM2_Pos: ::cty::c_uint = 16;
pub const POWER_RAMONB_OFFRAM2_Msk: ::cty::c_uint = 65536;
pub const POWER_RAMONB_OFFRAM2_RAM2Off: ::cty::c_uint = 0;
pub const POWER_RAMONB_OFFRAM2_RAM2On: ::cty::c_uint = 1;
pub const POWER_RAMONB_ONRAM3_Pos: ::cty::c_uint = 1;
pub const POWER_RAMONB_ONRAM3_Msk: ::cty::c_uint = 2;
pub const POWER_RAMONB_ONRAM3_RAM3Off: ::cty::c_uint = 0;
pub const POWER_RAMONB_ONRAM3_RAM3On: ::cty::c_uint = 1;
pub const POWER_RAMONB_ONRAM2_Pos: ::cty::c_uint = 0;
pub const POWER_RAMONB_ONRAM2_Msk: ::cty::c_uint = 1;
pub const POWER_RAMONB_ONRAM2_RAM2Off: ::cty::c_uint = 0;
pub const POWER_RAMONB_ONRAM2_RAM2On: ::cty::c_uint = 1;
pub const POWER_DCDCEN_DCDCEN_Pos: ::cty::c_uint = 0;
pub const POWER_DCDCEN_DCDCEN_Msk: ::cty::c_uint = 1;
pub const POWER_DCDCEN_DCDCEN_Disabled: ::cty::c_uint = 0;
pub const POWER_DCDCEN_DCDCEN_Enabled: ::cty::c_uint = 1;
pub const POWER_DCDCFORCE_FORCEON_Pos: ::cty::c_uint = 1;
pub const POWER_DCDCFORCE_FORCEON_Msk: ::cty::c_uint = 2;
pub const POWER_DCDCFORCE_FORCEON_NoForce: ::cty::c_uint = 0;
pub const POWER_DCDCFORCE_FORCEON_Force: ::cty::c_uint = 1;
pub const POWER_DCDCFORCE_FORCEOFF_Pos: ::cty::c_uint = 0;
pub const POWER_DCDCFORCE_FORCEOFF_Msk: ::cty::c_uint = 1;
pub const POWER_DCDCFORCE_FORCEOFF_NoForce: ::cty::c_uint = 0;
pub const POWER_DCDCFORCE_FORCEOFF_Force: ::cty::c_uint = 1;
pub const PPI_CHEN_CH31_Pos: ::cty::c_uint = 31;
pub const PPI_CHEN_CH31_Msk: ::cty::c_uint = 2147483648;
pub const PPI_CHEN_CH31_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH31_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH30_Pos: ::cty::c_uint = 30;
pub const PPI_CHEN_CH30_Msk: ::cty::c_uint = 1073741824;
pub const PPI_CHEN_CH30_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH30_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH29_Pos: ::cty::c_uint = 29;
pub const PPI_CHEN_CH29_Msk: ::cty::c_uint = 536870912;
pub const PPI_CHEN_CH29_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH29_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH28_Pos: ::cty::c_uint = 28;
pub const PPI_CHEN_CH28_Msk: ::cty::c_uint = 268435456;
pub const PPI_CHEN_CH28_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH28_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH27_Pos: ::cty::c_uint = 27;
pub const PPI_CHEN_CH27_Msk: ::cty::c_uint = 134217728;
pub const PPI_CHEN_CH27_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH27_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH26_Pos: ::cty::c_uint = 26;
pub const PPI_CHEN_CH26_Msk: ::cty::c_uint = 67108864;
pub const PPI_CHEN_CH26_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH26_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH25_Pos: ::cty::c_uint = 25;
pub const PPI_CHEN_CH25_Msk: ::cty::c_uint = 33554432;
pub const PPI_CHEN_CH25_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH25_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH24_Pos: ::cty::c_uint = 24;
pub const PPI_CHEN_CH24_Msk: ::cty::c_uint = 16777216;
pub const PPI_CHEN_CH24_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH24_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH23_Pos: ::cty::c_uint = 23;
pub const PPI_CHEN_CH23_Msk: ::cty::c_uint = 8388608;
pub const PPI_CHEN_CH23_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH23_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH22_Pos: ::cty::c_uint = 22;
pub const PPI_CHEN_CH22_Msk: ::cty::c_uint = 4194304;
pub const PPI_CHEN_CH22_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH22_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH21_Pos: ::cty::c_uint = 21;
pub const PPI_CHEN_CH21_Msk: ::cty::c_uint = 2097152;
pub const PPI_CHEN_CH21_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH21_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH20_Pos: ::cty::c_uint = 20;
pub const PPI_CHEN_CH20_Msk: ::cty::c_uint = 1048576;
pub const PPI_CHEN_CH20_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH20_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH15_Pos: ::cty::c_uint = 15;
pub const PPI_CHEN_CH15_Msk: ::cty::c_uint = 32768;
pub const PPI_CHEN_CH15_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH15_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH14_Pos: ::cty::c_uint = 14;
pub const PPI_CHEN_CH14_Msk: ::cty::c_uint = 16384;
pub const PPI_CHEN_CH14_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH14_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH13_Pos: ::cty::c_uint = 13;
pub const PPI_CHEN_CH13_Msk: ::cty::c_uint = 8192;
pub const PPI_CHEN_CH13_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH13_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH12_Pos: ::cty::c_uint = 12;
pub const PPI_CHEN_CH12_Msk: ::cty::c_uint = 4096;
pub const PPI_CHEN_CH12_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH12_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH11_Pos: ::cty::c_uint = 11;
pub const PPI_CHEN_CH11_Msk: ::cty::c_uint = 2048;
pub const PPI_CHEN_CH11_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH11_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH10_Pos: ::cty::c_uint = 10;
pub const PPI_CHEN_CH10_Msk: ::cty::c_uint = 1024;
pub const PPI_CHEN_CH10_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH10_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH9_Pos: ::cty::c_uint = 9;
pub const PPI_CHEN_CH9_Msk: ::cty::c_uint = 512;
pub const PPI_CHEN_CH9_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH9_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH8_Pos: ::cty::c_uint = 8;
pub const PPI_CHEN_CH8_Msk: ::cty::c_uint = 256;
pub const PPI_CHEN_CH8_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH8_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH7_Pos: ::cty::c_uint = 7;
pub const PPI_CHEN_CH7_Msk: ::cty::c_uint = 128;
pub const PPI_CHEN_CH7_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH7_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH6_Pos: ::cty::c_uint = 6;
pub const PPI_CHEN_CH6_Msk: ::cty::c_uint = 64;
pub const PPI_CHEN_CH6_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH6_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH5_Pos: ::cty::c_uint = 5;
pub const PPI_CHEN_CH5_Msk: ::cty::c_uint = 32;
pub const PPI_CHEN_CH5_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH5_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH4_Pos: ::cty::c_uint = 4;
pub const PPI_CHEN_CH4_Msk: ::cty::c_uint = 16;
pub const PPI_CHEN_CH4_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH4_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH3_Pos: ::cty::c_uint = 3;
pub const PPI_CHEN_CH3_Msk: ::cty::c_uint = 8;
pub const PPI_CHEN_CH3_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH3_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH2_Pos: ::cty::c_uint = 2;
pub const PPI_CHEN_CH2_Msk: ::cty::c_uint = 4;
pub const PPI_CHEN_CH2_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH2_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH1_Pos: ::cty::c_uint = 1;
pub const PPI_CHEN_CH1_Msk: ::cty::c_uint = 2;
pub const PPI_CHEN_CH1_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH1_Enabled: ::cty::c_uint = 1;
pub const PPI_CHEN_CH0_Pos: ::cty::c_uint = 0;
pub const PPI_CHEN_CH0_Msk: ::cty::c_uint = 1;
pub const PPI_CHEN_CH0_Disabled: ::cty::c_uint = 0;
pub const PPI_CHEN_CH0_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH31_Pos: ::cty::c_uint = 31;
pub const PPI_CHENSET_CH31_Msk: ::cty::c_uint = 2147483648;
pub const PPI_CHENSET_CH31_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH31_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH31_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH30_Pos: ::cty::c_uint = 30;
pub const PPI_CHENSET_CH30_Msk: ::cty::c_uint = 1073741824;
pub const PPI_CHENSET_CH30_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH30_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH30_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH29_Pos: ::cty::c_uint = 29;
pub const PPI_CHENSET_CH29_Msk: ::cty::c_uint = 536870912;
pub const PPI_CHENSET_CH29_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH29_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH29_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH28_Pos: ::cty::c_uint = 28;
pub const PPI_CHENSET_CH28_Msk: ::cty::c_uint = 268435456;
pub const PPI_CHENSET_CH28_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH28_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH28_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH27_Pos: ::cty::c_uint = 27;
pub const PPI_CHENSET_CH27_Msk: ::cty::c_uint = 134217728;
pub const PPI_CHENSET_CH27_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH27_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH27_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH26_Pos: ::cty::c_uint = 26;
pub const PPI_CHENSET_CH26_Msk: ::cty::c_uint = 67108864;
pub const PPI_CHENSET_CH26_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH26_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH26_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH25_Pos: ::cty::c_uint = 25;
pub const PPI_CHENSET_CH25_Msk: ::cty::c_uint = 33554432;
pub const PPI_CHENSET_CH25_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH25_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH25_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH24_Pos: ::cty::c_uint = 24;
pub const PPI_CHENSET_CH24_Msk: ::cty::c_uint = 16777216;
pub const PPI_CHENSET_CH24_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH24_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH24_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH23_Pos: ::cty::c_uint = 23;
pub const PPI_CHENSET_CH23_Msk: ::cty::c_uint = 8388608;
pub const PPI_CHENSET_CH23_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH23_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH23_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH22_Pos: ::cty::c_uint = 22;
pub const PPI_CHENSET_CH22_Msk: ::cty::c_uint = 4194304;
pub const PPI_CHENSET_CH22_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH22_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH22_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH21_Pos: ::cty::c_uint = 21;
pub const PPI_CHENSET_CH21_Msk: ::cty::c_uint = 2097152;
pub const PPI_CHENSET_CH21_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH21_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH21_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH20_Pos: ::cty::c_uint = 20;
pub const PPI_CHENSET_CH20_Msk: ::cty::c_uint = 1048576;
pub const PPI_CHENSET_CH20_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH20_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH20_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH15_Pos: ::cty::c_uint = 15;
pub const PPI_CHENSET_CH15_Msk: ::cty::c_uint = 32768;
pub const PPI_CHENSET_CH15_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH15_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH15_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH14_Pos: ::cty::c_uint = 14;
pub const PPI_CHENSET_CH14_Msk: ::cty::c_uint = 16384;
pub const PPI_CHENSET_CH14_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH14_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH14_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH13_Pos: ::cty::c_uint = 13;
pub const PPI_CHENSET_CH13_Msk: ::cty::c_uint = 8192;
pub const PPI_CHENSET_CH13_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH13_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH13_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH12_Pos: ::cty::c_uint = 12;
pub const PPI_CHENSET_CH12_Msk: ::cty::c_uint = 4096;
pub const PPI_CHENSET_CH12_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH12_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH12_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH11_Pos: ::cty::c_uint = 11;
pub const PPI_CHENSET_CH11_Msk: ::cty::c_uint = 2048;
pub const PPI_CHENSET_CH11_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH11_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH11_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH10_Pos: ::cty::c_uint = 10;
pub const PPI_CHENSET_CH10_Msk: ::cty::c_uint = 1024;
pub const PPI_CHENSET_CH10_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH10_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH10_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH9_Pos: ::cty::c_uint = 9;
pub const PPI_CHENSET_CH9_Msk: ::cty::c_uint = 512;
pub const PPI_CHENSET_CH9_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH9_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH9_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH8_Pos: ::cty::c_uint = 8;
pub const PPI_CHENSET_CH8_Msk: ::cty::c_uint = 256;
pub const PPI_CHENSET_CH8_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH8_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH8_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH7_Pos: ::cty::c_uint = 7;
pub const PPI_CHENSET_CH7_Msk: ::cty::c_uint = 128;
pub const PPI_CHENSET_CH7_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH7_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH7_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH6_Pos: ::cty::c_uint = 6;
pub const PPI_CHENSET_CH6_Msk: ::cty::c_uint = 64;
pub const PPI_CHENSET_CH6_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH6_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH6_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH5_Pos: ::cty::c_uint = 5;
pub const PPI_CHENSET_CH5_Msk: ::cty::c_uint = 32;
pub const PPI_CHENSET_CH5_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH5_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH5_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH4_Pos: ::cty::c_uint = 4;
pub const PPI_CHENSET_CH4_Msk: ::cty::c_uint = 16;
pub const PPI_CHENSET_CH4_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH4_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH4_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH3_Pos: ::cty::c_uint = 3;
pub const PPI_CHENSET_CH3_Msk: ::cty::c_uint = 8;
pub const PPI_CHENSET_CH3_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH3_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH3_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH2_Pos: ::cty::c_uint = 2;
pub const PPI_CHENSET_CH2_Msk: ::cty::c_uint = 4;
pub const PPI_CHENSET_CH2_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH2_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH2_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH1_Pos: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH1_Msk: ::cty::c_uint = 2;
pub const PPI_CHENSET_CH1_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH1_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH1_Set: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH0_Pos: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH0_Msk: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH0_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENSET_CH0_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENSET_CH0_Set: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH31_Pos: ::cty::c_uint = 31;
pub const PPI_CHENCLR_CH31_Msk: ::cty::c_uint = 2147483648;
pub const PPI_CHENCLR_CH31_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH31_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH31_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH30_Pos: ::cty::c_uint = 30;
pub const PPI_CHENCLR_CH30_Msk: ::cty::c_uint = 1073741824;
pub const PPI_CHENCLR_CH30_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH30_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH30_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH29_Pos: ::cty::c_uint = 29;
pub const PPI_CHENCLR_CH29_Msk: ::cty::c_uint = 536870912;
pub const PPI_CHENCLR_CH29_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH29_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH29_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH28_Pos: ::cty::c_uint = 28;
pub const PPI_CHENCLR_CH28_Msk: ::cty::c_uint = 268435456;
pub const PPI_CHENCLR_CH28_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH28_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH28_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH27_Pos: ::cty::c_uint = 27;
pub const PPI_CHENCLR_CH27_Msk: ::cty::c_uint = 134217728;
pub const PPI_CHENCLR_CH27_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH27_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH27_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH26_Pos: ::cty::c_uint = 26;
pub const PPI_CHENCLR_CH26_Msk: ::cty::c_uint = 67108864;
pub const PPI_CHENCLR_CH26_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH26_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH26_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH25_Pos: ::cty::c_uint = 25;
pub const PPI_CHENCLR_CH25_Msk: ::cty::c_uint = 33554432;
pub const PPI_CHENCLR_CH25_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH25_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH25_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH24_Pos: ::cty::c_uint = 24;
pub const PPI_CHENCLR_CH24_Msk: ::cty::c_uint = 16777216;
pub const PPI_CHENCLR_CH24_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH24_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH24_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH23_Pos: ::cty::c_uint = 23;
pub const PPI_CHENCLR_CH23_Msk: ::cty::c_uint = 8388608;
pub const PPI_CHENCLR_CH23_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH23_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH23_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH22_Pos: ::cty::c_uint = 22;
pub const PPI_CHENCLR_CH22_Msk: ::cty::c_uint = 4194304;
pub const PPI_CHENCLR_CH22_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH22_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH22_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH21_Pos: ::cty::c_uint = 21;
pub const PPI_CHENCLR_CH21_Msk: ::cty::c_uint = 2097152;
pub const PPI_CHENCLR_CH21_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH21_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH21_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH20_Pos: ::cty::c_uint = 20;
pub const PPI_CHENCLR_CH20_Msk: ::cty::c_uint = 1048576;
pub const PPI_CHENCLR_CH20_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH20_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH20_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH15_Pos: ::cty::c_uint = 15;
pub const PPI_CHENCLR_CH15_Msk: ::cty::c_uint = 32768;
pub const PPI_CHENCLR_CH15_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH15_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH15_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH14_Pos: ::cty::c_uint = 14;
pub const PPI_CHENCLR_CH14_Msk: ::cty::c_uint = 16384;
pub const PPI_CHENCLR_CH14_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH14_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH14_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH13_Pos: ::cty::c_uint = 13;
pub const PPI_CHENCLR_CH13_Msk: ::cty::c_uint = 8192;
pub const PPI_CHENCLR_CH13_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH13_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH13_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH12_Pos: ::cty::c_uint = 12;
pub const PPI_CHENCLR_CH12_Msk: ::cty::c_uint = 4096;
pub const PPI_CHENCLR_CH12_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH12_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH12_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH11_Pos: ::cty::c_uint = 11;
pub const PPI_CHENCLR_CH11_Msk: ::cty::c_uint = 2048;
pub const PPI_CHENCLR_CH11_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH11_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH11_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH10_Pos: ::cty::c_uint = 10;
pub const PPI_CHENCLR_CH10_Msk: ::cty::c_uint = 1024;
pub const PPI_CHENCLR_CH10_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH10_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH10_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH9_Pos: ::cty::c_uint = 9;
pub const PPI_CHENCLR_CH9_Msk: ::cty::c_uint = 512;
pub const PPI_CHENCLR_CH9_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH9_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH9_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH8_Pos: ::cty::c_uint = 8;
pub const PPI_CHENCLR_CH8_Msk: ::cty::c_uint = 256;
pub const PPI_CHENCLR_CH8_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH8_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH8_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH7_Pos: ::cty::c_uint = 7;
pub const PPI_CHENCLR_CH7_Msk: ::cty::c_uint = 128;
pub const PPI_CHENCLR_CH7_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH7_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH7_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH6_Pos: ::cty::c_uint = 6;
pub const PPI_CHENCLR_CH6_Msk: ::cty::c_uint = 64;
pub const PPI_CHENCLR_CH6_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH6_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH6_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH5_Pos: ::cty::c_uint = 5;
pub const PPI_CHENCLR_CH5_Msk: ::cty::c_uint = 32;
pub const PPI_CHENCLR_CH5_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH5_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH5_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH4_Pos: ::cty::c_uint = 4;
pub const PPI_CHENCLR_CH4_Msk: ::cty::c_uint = 16;
pub const PPI_CHENCLR_CH4_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH4_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH4_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH3_Pos: ::cty::c_uint = 3;
pub const PPI_CHENCLR_CH3_Msk: ::cty::c_uint = 8;
pub const PPI_CHENCLR_CH3_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH3_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH3_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH2_Pos: ::cty::c_uint = 2;
pub const PPI_CHENCLR_CH2_Msk: ::cty::c_uint = 4;
pub const PPI_CHENCLR_CH2_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH2_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH2_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH1_Pos: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH1_Msk: ::cty::c_uint = 2;
pub const PPI_CHENCLR_CH1_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH1_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH1_Clear: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH0_Pos: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH0_Msk: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH0_Disabled: ::cty::c_uint = 0;
pub const PPI_CHENCLR_CH0_Enabled: ::cty::c_uint = 1;
pub const PPI_CHENCLR_CH0_Clear: ::cty::c_uint = 1;
pub const PPI_CHG_CH31_Pos: ::cty::c_uint = 31;
pub const PPI_CHG_CH31_Msk: ::cty::c_uint = 2147483648;
pub const PPI_CHG_CH31_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH31_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH30_Pos: ::cty::c_uint = 30;
pub const PPI_CHG_CH30_Msk: ::cty::c_uint = 1073741824;
pub const PPI_CHG_CH30_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH30_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH29_Pos: ::cty::c_uint = 29;
pub const PPI_CHG_CH29_Msk: ::cty::c_uint = 536870912;
pub const PPI_CHG_CH29_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH29_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH28_Pos: ::cty::c_uint = 28;
pub const PPI_CHG_CH28_Msk: ::cty::c_uint = 268435456;
pub const PPI_CHG_CH28_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH28_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH27_Pos: ::cty::c_uint = 27;
pub const PPI_CHG_CH27_Msk: ::cty::c_uint = 134217728;
pub const PPI_CHG_CH27_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH27_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH26_Pos: ::cty::c_uint = 26;
pub const PPI_CHG_CH26_Msk: ::cty::c_uint = 67108864;
pub const PPI_CHG_CH26_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH26_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH25_Pos: ::cty::c_uint = 25;
pub const PPI_CHG_CH25_Msk: ::cty::c_uint = 33554432;
pub const PPI_CHG_CH25_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH25_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH24_Pos: ::cty::c_uint = 24;
pub const PPI_CHG_CH24_Msk: ::cty::c_uint = 16777216;
pub const PPI_CHG_CH24_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH24_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH23_Pos: ::cty::c_uint = 23;
pub const PPI_CHG_CH23_Msk: ::cty::c_uint = 8388608;
pub const PPI_CHG_CH23_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH23_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH22_Pos: ::cty::c_uint = 22;
pub const PPI_CHG_CH22_Msk: ::cty::c_uint = 4194304;
pub const PPI_CHG_CH22_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH22_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH21_Pos: ::cty::c_uint = 21;
pub const PPI_CHG_CH21_Msk: ::cty::c_uint = 2097152;
pub const PPI_CHG_CH21_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH21_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH20_Pos: ::cty::c_uint = 20;
pub const PPI_CHG_CH20_Msk: ::cty::c_uint = 1048576;
pub const PPI_CHG_CH20_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH20_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH15_Pos: ::cty::c_uint = 15;
pub const PPI_CHG_CH15_Msk: ::cty::c_uint = 32768;
pub const PPI_CHG_CH15_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH15_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH14_Pos: ::cty::c_uint = 14;
pub const PPI_CHG_CH14_Msk: ::cty::c_uint = 16384;
pub const PPI_CHG_CH14_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH14_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH13_Pos: ::cty::c_uint = 13;
pub const PPI_CHG_CH13_Msk: ::cty::c_uint = 8192;
pub const PPI_CHG_CH13_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH13_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH12_Pos: ::cty::c_uint = 12;
pub const PPI_CHG_CH12_Msk: ::cty::c_uint = 4096;
pub const PPI_CHG_CH12_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH12_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH11_Pos: ::cty::c_uint = 11;
pub const PPI_CHG_CH11_Msk: ::cty::c_uint = 2048;
pub const PPI_CHG_CH11_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH11_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH10_Pos: ::cty::c_uint = 10;
pub const PPI_CHG_CH10_Msk: ::cty::c_uint = 1024;
pub const PPI_CHG_CH10_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH10_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH9_Pos: ::cty::c_uint = 9;
pub const PPI_CHG_CH9_Msk: ::cty::c_uint = 512;
pub const PPI_CHG_CH9_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH9_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH8_Pos: ::cty::c_uint = 8;
pub const PPI_CHG_CH8_Msk: ::cty::c_uint = 256;
pub const PPI_CHG_CH8_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH8_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH7_Pos: ::cty::c_uint = 7;
pub const PPI_CHG_CH7_Msk: ::cty::c_uint = 128;
pub const PPI_CHG_CH7_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH7_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH6_Pos: ::cty::c_uint = 6;
pub const PPI_CHG_CH6_Msk: ::cty::c_uint = 64;
pub const PPI_CHG_CH6_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH6_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH5_Pos: ::cty::c_uint = 5;
pub const PPI_CHG_CH5_Msk: ::cty::c_uint = 32;
pub const PPI_CHG_CH5_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH5_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH4_Pos: ::cty::c_uint = 4;
pub const PPI_CHG_CH4_Msk: ::cty::c_uint = 16;
pub const PPI_CHG_CH4_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH4_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH3_Pos: ::cty::c_uint = 3;
pub const PPI_CHG_CH3_Msk: ::cty::c_uint = 8;
pub const PPI_CHG_CH3_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH3_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH2_Pos: ::cty::c_uint = 2;
pub const PPI_CHG_CH2_Msk: ::cty::c_uint = 4;
pub const PPI_CHG_CH2_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH2_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH1_Pos: ::cty::c_uint = 1;
pub const PPI_CHG_CH1_Msk: ::cty::c_uint = 2;
pub const PPI_CHG_CH1_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH1_Included: ::cty::c_uint = 1;
pub const PPI_CHG_CH0_Pos: ::cty::c_uint = 0;
pub const PPI_CHG_CH0_Msk: ::cty::c_uint = 1;
pub const PPI_CHG_CH0_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG_CH0_Included: ::cty::c_uint = 1;
pub const QDEC_SHORTS_SAMPLERDY_STOP_Pos: ::cty::c_uint = 1;
pub const QDEC_SHORTS_SAMPLERDY_STOP_Msk: ::cty::c_uint = 2;
pub const QDEC_SHORTS_SAMPLERDY_STOP_Disabled: ::cty::c_uint = 0;
pub const QDEC_SHORTS_SAMPLERDY_STOP_Enabled: ::cty::c_uint = 1;
pub const QDEC_SHORTS_REPORTRDY_READCLRACC_Pos: ::cty::c_uint = 0;
pub const QDEC_SHORTS_REPORTRDY_READCLRACC_Msk: ::cty::c_uint = 1;
pub const QDEC_SHORTS_REPORTRDY_READCLRACC_Disabled: ::cty::c_uint = 0;
pub const QDEC_SHORTS_REPORTRDY_READCLRACC_Enabled: ::cty::c_uint = 1;
pub const QDEC_INTENSET_ACCOF_Pos: ::cty::c_uint = 2;
pub const QDEC_INTENSET_ACCOF_Msk: ::cty::c_uint = 4;
pub const QDEC_INTENSET_ACCOF_Disabled: ::cty::c_uint = 0;
pub const QDEC_INTENSET_ACCOF_Enabled: ::cty::c_uint = 1;
pub const QDEC_INTENSET_ACCOF_Set: ::cty::c_uint = 1;
pub const QDEC_INTENSET_REPORTRDY_Pos: ::cty::c_uint = 1;
pub const QDEC_INTENSET_REPORTRDY_Msk: ::cty::c_uint = 2;
pub const QDEC_INTENSET_REPORTRDY_Disabled: ::cty::c_uint = 0;
pub const QDEC_INTENSET_REPORTRDY_Enabled: ::cty::c_uint = 1;
pub const QDEC_INTENSET_REPORTRDY_Set: ::cty::c_uint = 1;
pub const QDEC_INTENSET_SAMPLERDY_Pos: ::cty::c_uint = 0;
pub const QDEC_INTENSET_SAMPLERDY_Msk: ::cty::c_uint = 1;
pub const QDEC_INTENSET_SAMPLERDY_Disabled: ::cty::c_uint = 0;
pub const QDEC_INTENSET_SAMPLERDY_Enabled: ::cty::c_uint = 1;
pub const QDEC_INTENSET_SAMPLERDY_Set: ::cty::c_uint = 1;
pub const QDEC_INTENCLR_ACCOF_Pos: ::cty::c_uint = 2;
pub const QDEC_INTENCLR_ACCOF_Msk: ::cty::c_uint = 4;
pub const QDEC_INTENCLR_ACCOF_Disabled: ::cty::c_uint = 0;
pub const QDEC_INTENCLR_ACCOF_Enabled: ::cty::c_uint = 1;
pub const QDEC_INTENCLR_ACCOF_Clear: ::cty::c_uint = 1;
pub const QDEC_INTENCLR_REPORTRDY_Pos: ::cty::c_uint = 1;
pub const QDEC_INTENCLR_REPORTRDY_Msk: ::cty::c_uint = 2;
pub const QDEC_INTENCLR_REPORTRDY_Disabled: ::cty::c_uint = 0;
pub const QDEC_INTENCLR_REPORTRDY_Enabled: ::cty::c_uint = 1;
pub const QDEC_INTENCLR_REPORTRDY_Clear: ::cty::c_uint = 1;
pub const QDEC_INTENCLR_SAMPLERDY_Pos: ::cty::c_uint = 0;
pub const QDEC_INTENCLR_SAMPLERDY_Msk: ::cty::c_uint = 1;
pub const QDEC_INTENCLR_SAMPLERDY_Disabled: ::cty::c_uint = 0;
pub const QDEC_INTENCLR_SAMPLERDY_Enabled: ::cty::c_uint = 1;
pub const QDEC_INTENCLR_SAMPLERDY_Clear: ::cty::c_uint = 1;
pub const QDEC_ENABLE_ENABLE_Pos: ::cty::c_uint = 0;
pub const QDEC_ENABLE_ENABLE_Msk: ::cty::c_uint = 1;
pub const QDEC_ENABLE_ENABLE_Disabled: ::cty::c_uint = 0;
pub const QDEC_ENABLE_ENABLE_Enabled: ::cty::c_uint = 1;
pub const QDEC_LEDPOL_LEDPOL_Pos: ::cty::c_uint = 0;
pub const QDEC_LEDPOL_LEDPOL_Msk: ::cty::c_uint = 1;
pub const QDEC_LEDPOL_LEDPOL_ActiveLow: ::cty::c_uint = 0;
pub const QDEC_LEDPOL_LEDPOL_ActiveHigh: ::cty::c_uint = 1;
pub const QDEC_SAMPLEPER_SAMPLEPER_Pos: ::cty::c_uint = 0;
pub const QDEC_SAMPLEPER_SAMPLEPER_Msk: ::cty::c_uint = 7;
pub const QDEC_SAMPLEPER_SAMPLEPER_128us: ::cty::c_uint = 0;
pub const QDEC_SAMPLEPER_SAMPLEPER_256us: ::cty::c_uint = 1;
pub const QDEC_SAMPLEPER_SAMPLEPER_512us: ::cty::c_uint = 2;
pub const QDEC_SAMPLEPER_SAMPLEPER_1024us: ::cty::c_uint = 3;
pub const QDEC_SAMPLEPER_SAMPLEPER_2048us: ::cty::c_uint = 4;
pub const QDEC_SAMPLEPER_SAMPLEPER_4096us: ::cty::c_uint = 5;
pub const QDEC_SAMPLEPER_SAMPLEPER_8192us: ::cty::c_uint = 6;
pub const QDEC_SAMPLEPER_SAMPLEPER_16384us: ::cty::c_uint = 7;
pub const QDEC_SAMPLE_SAMPLE_Pos: ::cty::c_uint = 0;
pub const QDEC_SAMPLE_SAMPLE_Msk: ::cty::c_uint = 4294967295;
pub const QDEC_REPORTPER_REPORTPER_Pos: ::cty::c_uint = 0;
pub const QDEC_REPORTPER_REPORTPER_Msk: ::cty::c_uint = 7;
pub const QDEC_REPORTPER_REPORTPER_10Smpl: ::cty::c_uint = 0;
pub const QDEC_REPORTPER_REPORTPER_40Smpl: ::cty::c_uint = 1;
pub const QDEC_REPORTPER_REPORTPER_80Smpl: ::cty::c_uint = 2;
pub const QDEC_REPORTPER_REPORTPER_120Smpl: ::cty::c_uint = 3;
pub const QDEC_REPORTPER_REPORTPER_160Smpl: ::cty::c_uint = 4;
pub const QDEC_REPORTPER_REPORTPER_200Smpl: ::cty::c_uint = 5;
pub const QDEC_REPORTPER_REPORTPER_240Smpl: ::cty::c_uint = 6;
pub const QDEC_REPORTPER_REPORTPER_280Smpl: ::cty::c_uint = 7;
pub const QDEC_DBFEN_DBFEN_Pos: ::cty::c_uint = 0;
pub const QDEC_DBFEN_DBFEN_Msk: ::cty::c_uint = 1;
pub const QDEC_DBFEN_DBFEN_Disabled: ::cty::c_uint = 0;
pub const QDEC_DBFEN_DBFEN_Enabled: ::cty::c_uint = 1;
pub const QDEC_LEDPRE_LEDPRE_Pos: ::cty::c_uint = 0;
pub const QDEC_LEDPRE_LEDPRE_Msk: ::cty::c_uint = 511;
pub const QDEC_ACCDBL_ACCDBL_Pos: ::cty::c_uint = 0;
pub const QDEC_ACCDBL_ACCDBL_Msk: ::cty::c_uint = 15;
pub const QDEC_ACCDBLREAD_ACCDBLREAD_Pos: ::cty::c_uint = 0;
pub const QDEC_ACCDBLREAD_ACCDBLREAD_Msk: ::cty::c_uint = 15;
pub const QDEC_POWER_POWER_Pos: ::cty::c_uint = 0;
pub const QDEC_POWER_POWER_Msk: ::cty::c_uint = 1;
pub const QDEC_POWER_POWER_Disabled: ::cty::c_uint = 0;
pub const QDEC_POWER_POWER_Enabled: ::cty::c_uint = 1;
pub const RADIO_SHORTS_DISABLED_RSSISTOP_Pos: ::cty::c_uint = 8;
pub const RADIO_SHORTS_DISABLED_RSSISTOP_Msk: ::cty::c_uint = 256;
pub const RADIO_SHORTS_DISABLED_RSSISTOP_Disabled: ::cty::c_uint = 0;
pub const RADIO_SHORTS_DISABLED_RSSISTOP_Enabled: ::cty::c_uint = 1;
pub const RADIO_SHORTS_ADDRESS_BCSTART_Pos: ::cty::c_uint = 6;
pub const RADIO_SHORTS_ADDRESS_BCSTART_Msk: ::cty::c_uint = 64;
pub const RADIO_SHORTS_ADDRESS_BCSTART_Disabled: ::cty::c_uint = 0;
pub const RADIO_SHORTS_ADDRESS_BCSTART_Enabled: ::cty::c_uint = 1;
pub const RADIO_SHORTS_END_START_Pos: ::cty::c_uint = 5;
pub const RADIO_SHORTS_END_START_Msk: ::cty::c_uint = 32;
pub const RADIO_SHORTS_END_START_Disabled: ::cty::c_uint = 0;
pub const RADIO_SHORTS_END_START_Enabled: ::cty::c_uint = 1;
pub const RADIO_SHORTS_ADDRESS_RSSISTART_Pos: ::cty::c_uint = 4;
pub const RADIO_SHORTS_ADDRESS_RSSISTART_Msk: ::cty::c_uint = 16;
pub const RADIO_SHORTS_ADDRESS_RSSISTART_Disabled: ::cty::c_uint = 0;
pub const RADIO_SHORTS_ADDRESS_RSSISTART_Enabled: ::cty::c_uint = 1;
pub const RADIO_SHORTS_DISABLED_RXEN_Pos: ::cty::c_uint = 3;
pub const RADIO_SHORTS_DISABLED_RXEN_Msk: ::cty::c_uint = 8;
pub const RADIO_SHORTS_DISABLED_RXEN_Disabled: ::cty::c_uint = 0;
pub const RADIO_SHORTS_DISABLED_RXEN_Enabled: ::cty::c_uint = 1;
pub const RADIO_SHORTS_DISABLED_TXEN_Pos: ::cty::c_uint = 2;
pub const RADIO_SHORTS_DISABLED_TXEN_Msk: ::cty::c_uint = 4;
pub const RADIO_SHORTS_DISABLED_TXEN_Disabled: ::cty::c_uint = 0;
pub const RADIO_SHORTS_DISABLED_TXEN_Enabled: ::cty::c_uint = 1;
pub const RADIO_SHORTS_END_DISABLE_Pos: ::cty::c_uint = 1;
pub const RADIO_SHORTS_END_DISABLE_Msk: ::cty::c_uint = 2;
pub const RADIO_SHORTS_END_DISABLE_Disabled: ::cty::c_uint = 0;
pub const RADIO_SHORTS_END_DISABLE_Enabled: ::cty::c_uint = 1;
pub const RADIO_SHORTS_READY_START_Pos: ::cty::c_uint = 0;
pub const RADIO_SHORTS_READY_START_Msk: ::cty::c_uint = 1;
pub const RADIO_SHORTS_READY_START_Disabled: ::cty::c_uint = 0;
pub const RADIO_SHORTS_READY_START_Enabled: ::cty::c_uint = 1;
pub const RADIO_INTENSET_BCMATCH_Pos: ::cty::c_uint = 10;
pub const RADIO_INTENSET_BCMATCH_Msk: ::cty::c_uint = 1024;
pub const RADIO_INTENSET_BCMATCH_Disabled: ::cty::c_uint = 0;
pub const RADIO_INTENSET_BCMATCH_Enabled: ::cty::c_uint = 1;
pub const RADIO_INTENSET_BCMATCH_Set: ::cty::c_uint = 1;
pub const RADIO_INTENSET_RSSIEND_Pos: ::cty::c_uint = 7;
pub const RADIO_INTENSET_RSSIEND_Msk: ::cty::c_uint = 128;
pub const RADIO_INTENSET_RSSIEND_Disabled: ::cty::c_uint = 0;
pub const RADIO_INTENSET_RSSIEND_Enabled: ::cty::c_uint = 1;
pub const RADIO_INTENSET_RSSIEND_Set: ::cty::c_uint = 1;
pub const RADIO_INTENSET_DEVMISS_Pos: ::cty::c_uint = 6;
pub const RADIO_INTENSET_DEVMISS_Msk: ::cty::c_uint = 64;
pub const RADIO_INTENSET_DEVMISS_Disabled: ::cty::c_uint = 0;
pub const RADIO_INTENSET_DEVMISS_Enabled: ::cty::c_uint = 1;
pub const RADIO_INTENSET_DEVMISS_Set: ::cty::c_uint = 1;
pub const RADIO_INTENSET_DEVMATCH_Pos: ::cty::c_uint = 5;
pub const RADIO_INTENSET_DEVMATCH_Msk: ::cty::c_uint = 32;
pub const RADIO_INTENSET_DEVMATCH_Disabled: ::cty::c_uint = 0;
pub const RADIO_INTENSET_DEVMATCH_Enabled: ::cty::c_uint = 1;
pub const RADIO_INTENSET_DEVMATCH_Set: ::cty::c_uint = 1;
pub const RADIO_INTENSET_DISABLED_Pos: ::cty::c_uint = 4;
pub const RADIO_INTENSET_DISABLED_Msk: ::cty::c_uint = 16;
pub const RADIO_INTENSET_DISABLED_Disabled: ::cty::c_uint = 0;
pub const RADIO_INTENSET_DISABLED_Enabled: ::cty::c_uint = 1;
pub const RADIO_INTENSET_DISABLED_Set: ::cty::c_uint = 1;
pub const RADIO_INTENSET_END_Pos: ::cty::c_uint = 3;
pub const RADIO_INTENSET_END_Msk: ::cty::c_uint = 8;
pub const RADIO_INTENSET_END_Disabled: ::cty::c_uint = 0;
pub const RADIO_INTENSET_END_Enabled: ::cty::c_uint = 1;
pub const RADIO_INTENSET_END_Set: ::cty::c_uint = 1;
pub const RADIO_INTENSET_PAYLOAD_Pos: ::cty::c_uint = 2;
pub const RADIO_INTENSET_PAYLOAD_Msk: ::cty::c_uint = 4;
pub const RADIO_INTENSET_PAYLOAD_Disabled: ::cty::c_uint = 0;
pub const RADIO_INTENSET_PAYLOAD_Enabled: ::cty::c_uint = 1;
pub const RADIO_INTENSET_PAYLOAD_Set: ::cty::c_uint = 1;
pub const RADIO_INTENSET_ADDRESS_Pos: ::cty::c_uint = 1;
pub const RADIO_INTENSET_ADDRESS_Msk: ::cty::c_uint = 2;
pub const RADIO_INTENSET_ADDRESS_Disabled: ::cty::c_uint = 0;
pub const RADIO_INTENSET_ADDRESS_Enabled: ::cty::c_uint = 1;
pub const RADIO_INTENSET_ADDRESS_Set: ::cty::c_uint = 1;
pub const RADIO_INTENSET_READY_Pos: ::cty::c_uint = 0;
pub const RADIO_INTENSET_READY_Msk: ::cty::c_uint = 1;
pub const RADIO_INTENSET_READY_Disabled: ::cty::c_uint = 0;
pub const RADIO_INTENSET_READY_Enabled: ::cty::c_uint = 1;
pub const RADIO_INTENSET_READY_Set: ::cty::c_uint = 1;
pub const RADIO_INTENCLR_BCMATCH_Pos: ::cty::c_uint = 10;
pub const RADIO_INTENCLR_BCMATCH_Msk: ::cty::c_uint = 1024;
pub const RADIO_INTENCLR_BCMATCH_Disabled: ::cty::c_uint = 0;
pub const RADIO_INTENCLR_BCMATCH_Enabled: ::cty::c_uint = 1;
pub const RADIO_INTENCLR_BCMATCH_Clear: ::cty::c_uint = 1;
pub const RADIO_INTENCLR_RSSIEND_Pos: ::cty::c_uint = 7;
pub const RADIO_INTENCLR_RSSIEND_Msk: ::cty::c_uint = 128;
pub const RADIO_INTENCLR_RSSIEND_Disabled: ::cty::c_uint = 0;
pub const RADIO_INTENCLR_RSSIEND_Enabled: ::cty::c_uint = 1;
pub const RADIO_INTENCLR_RSSIEND_Clear: ::cty::c_uint = 1;
pub const RADIO_INTENCLR_DEVMISS_Pos: ::cty::c_uint = 6;
pub const RADIO_INTENCLR_DEVMISS_Msk: ::cty::c_uint = 64;
pub const RADIO_INTENCLR_DEVMISS_Disabled: ::cty::c_uint = 0;
pub const RADIO_INTENCLR_DEVMISS_Enabled: ::cty::c_uint = 1;
pub const RADIO_INTENCLR_DEVMISS_Clear: ::cty::c_uint = 1;
pub const RADIO_INTENCLR_DEVMATCH_Pos: ::cty::c_uint = 5;
pub const RADIO_INTENCLR_DEVMATCH_Msk: ::cty::c_uint = 32;
pub const RADIO_INTENCLR_DEVMATCH_Disabled: ::cty::c_uint = 0;
pub const RADIO_INTENCLR_DEVMATCH_Enabled: ::cty::c_uint = 1;
pub const RADIO_INTENCLR_DEVMATCH_Clear: ::cty::c_uint = 1;
pub const RADIO_INTENCLR_DISABLED_Pos: ::cty::c_uint = 4;
pub const RADIO_INTENCLR_DISABLED_Msk: ::cty::c_uint = 16;
pub const RADIO_INTENCLR_DISABLED_Disabled: ::cty::c_uint = 0;
pub const RADIO_INTENCLR_DISABLED_Enabled: ::cty::c_uint = 1;
pub const RADIO_INTENCLR_DISABLED_Clear: ::cty::c_uint = 1;
pub const RADIO_INTENCLR_END_Pos: ::cty::c_uint = 3;
pub const RADIO_INTENCLR_END_Msk: ::cty::c_uint = 8;
pub const RADIO_INTENCLR_END_Disabled: ::cty::c_uint = 0;
pub const RADIO_INTENCLR_END_Enabled: ::cty::c_uint = 1;
pub const RADIO_INTENCLR_END_Clear: ::cty::c_uint = 1;
pub const RADIO_INTENCLR_PAYLOAD_Pos: ::cty::c_uint = 2;
pub const RADIO_INTENCLR_PAYLOAD_Msk: ::cty::c_uint = 4;
pub const RADIO_INTENCLR_PAYLOAD_Disabled: ::cty::c_uint = 0;
pub const RADIO_INTENCLR_PAYLOAD_Enabled: ::cty::c_uint = 1;
pub const RADIO_INTENCLR_PAYLOAD_Clear: ::cty::c_uint = 1;
pub const RADIO_INTENCLR_ADDRESS_Pos: ::cty::c_uint = 1;
pub const RADIO_INTENCLR_ADDRESS_Msk: ::cty::c_uint = 2;
pub const RADIO_INTENCLR_ADDRESS_Disabled: ::cty::c_uint = 0;
pub const RADIO_INTENCLR_ADDRESS_Enabled: ::cty::c_uint = 1;
pub const RADIO_INTENCLR_ADDRESS_Clear: ::cty::c_uint = 1;
pub const RADIO_INTENCLR_READY_Pos: ::cty::c_uint = 0;
pub const RADIO_INTENCLR_READY_Msk: ::cty::c_uint = 1;
pub const RADIO_INTENCLR_READY_Disabled: ::cty::c_uint = 0;
pub const RADIO_INTENCLR_READY_Enabled: ::cty::c_uint = 1;
pub const RADIO_INTENCLR_READY_Clear: ::cty::c_uint = 1;
pub const RADIO_CRCSTATUS_CRCSTATUS_Pos: ::cty::c_uint = 0;
pub const RADIO_CRCSTATUS_CRCSTATUS_Msk: ::cty::c_uint = 1;
pub const RADIO_CRCSTATUS_CRCSTATUS_CRCError: ::cty::c_uint = 0;
pub const RADIO_CRCSTATUS_CRCSTATUS_CRCOk: ::cty::c_uint = 1;
pub const RADIO_RXMATCH_RXMATCH_Pos: ::cty::c_uint = 0;
pub const RADIO_RXMATCH_RXMATCH_Msk: ::cty::c_uint = 7;
pub const RADIO_RXCRC_RXCRC_Pos: ::cty::c_uint = 0;
pub const RADIO_RXCRC_RXCRC_Msk: ::cty::c_uint = 16777215;
pub const RADIO_DAI_DAI_Pos: ::cty::c_uint = 0;
pub const RADIO_DAI_DAI_Msk: ::cty::c_uint = 7;
pub const RADIO_FREQUENCY_FREQUENCY_Pos: ::cty::c_uint = 0;
pub const RADIO_FREQUENCY_FREQUENCY_Msk: ::cty::c_uint = 127;
pub const RADIO_TXPOWER_TXPOWER_Pos: ::cty::c_uint = 0;
pub const RADIO_TXPOWER_TXPOWER_Msk: ::cty::c_uint = 255;
pub const RADIO_TXPOWER_TXPOWER_0dBm: ::cty::c_uint = 0;
pub const RADIO_TXPOWER_TXPOWER_Pos4dBm: ::cty::c_uint = 4;
pub const RADIO_TXPOWER_TXPOWER_Neg30dBm: ::cty::c_uint = 216;
pub const RADIO_TXPOWER_TXPOWER_Neg20dBm: ::cty::c_uint = 236;
pub const RADIO_TXPOWER_TXPOWER_Neg16dBm: ::cty::c_uint = 240;
pub const RADIO_TXPOWER_TXPOWER_Neg12dBm: ::cty::c_uint = 244;
pub const RADIO_TXPOWER_TXPOWER_Neg8dBm: ::cty::c_uint = 248;
pub const RADIO_TXPOWER_TXPOWER_Neg4dBm: ::cty::c_uint = 252;
pub const RADIO_MODE_MODE_Pos: ::cty::c_uint = 0;
pub const RADIO_MODE_MODE_Msk: ::cty::c_uint = 3;
pub const RADIO_MODE_MODE_Nrf_1Mbit: ::cty::c_uint = 0;
pub const RADIO_MODE_MODE_Nrf_2Mbit: ::cty::c_uint = 1;
pub const RADIO_MODE_MODE_Nrf_250Kbit: ::cty::c_uint = 2;
pub const RADIO_MODE_MODE_Ble_1Mbit: ::cty::c_uint = 3;
pub const RADIO_PCNF0_S1LEN_Pos: ::cty::c_uint = 16;
pub const RADIO_PCNF0_S1LEN_Msk: ::cty::c_uint = 983040;
pub const RADIO_PCNF0_S0LEN_Pos: ::cty::c_uint = 8;
pub const RADIO_PCNF0_S0LEN_Msk: ::cty::c_uint = 256;
pub const RADIO_PCNF0_LFLEN_Pos: ::cty::c_uint = 0;
pub const RADIO_PCNF0_LFLEN_Msk: ::cty::c_uint = 15;
pub const RADIO_PCNF1_WHITEEN_Pos: ::cty::c_uint = 25;
pub const RADIO_PCNF1_WHITEEN_Msk: ::cty::c_uint = 33554432;
pub const RADIO_PCNF1_WHITEEN_Disabled: ::cty::c_uint = 0;
pub const RADIO_PCNF1_WHITEEN_Enabled: ::cty::c_uint = 1;
pub const RADIO_PCNF1_ENDIAN_Pos: ::cty::c_uint = 24;
pub const RADIO_PCNF1_ENDIAN_Msk: ::cty::c_uint = 16777216;
pub const RADIO_PCNF1_ENDIAN_Little: ::cty::c_uint = 0;
pub const RADIO_PCNF1_ENDIAN_Big: ::cty::c_uint = 1;
pub const RADIO_PCNF1_BALEN_Pos: ::cty::c_uint = 16;
pub const RADIO_PCNF1_BALEN_Msk: ::cty::c_uint = 458752;
pub const RADIO_PCNF1_STATLEN_Pos: ::cty::c_uint = 8;
pub const RADIO_PCNF1_STATLEN_Msk: ::cty::c_uint = 65280;
pub const RADIO_PCNF1_MAXLEN_Pos: ::cty::c_uint = 0;
pub const RADIO_PCNF1_MAXLEN_Msk: ::cty::c_uint = 255;
pub const RADIO_PREFIX0_AP3_Pos: ::cty::c_uint = 24;
pub const RADIO_PREFIX0_AP3_Msk: ::cty::c_uint = 4278190080;
pub const RADIO_PREFIX0_AP2_Pos: ::cty::c_uint = 16;
pub const RADIO_PREFIX0_AP2_Msk: ::cty::c_uint = 16711680;
pub const RADIO_PREFIX0_AP1_Pos: ::cty::c_uint = 8;
pub const RADIO_PREFIX0_AP1_Msk: ::cty::c_uint = 65280;
pub const RADIO_PREFIX0_AP0_Pos: ::cty::c_uint = 0;
pub const RADIO_PREFIX0_AP0_Msk: ::cty::c_uint = 255;
pub const RADIO_PREFIX1_AP7_Pos: ::cty::c_uint = 24;
pub const RADIO_PREFIX1_AP7_Msk: ::cty::c_uint = 4278190080;
pub const RADIO_PREFIX1_AP6_Pos: ::cty::c_uint = 16;
pub const RADIO_PREFIX1_AP6_Msk: ::cty::c_uint = 16711680;
pub const RADIO_PREFIX1_AP5_Pos: ::cty::c_uint = 8;
pub const RADIO_PREFIX1_AP5_Msk: ::cty::c_uint = 65280;
pub const RADIO_PREFIX1_AP4_Pos: ::cty::c_uint = 0;
pub const RADIO_PREFIX1_AP4_Msk: ::cty::c_uint = 255;
pub const RADIO_TXADDRESS_TXADDRESS_Pos: ::cty::c_uint = 0;
pub const RADIO_TXADDRESS_TXADDRESS_Msk: ::cty::c_uint = 7;
pub const RADIO_RXADDRESSES_ADDR7_Pos: ::cty::c_uint = 7;
pub const RADIO_RXADDRESSES_ADDR7_Msk: ::cty::c_uint = 128;
pub const RADIO_RXADDRESSES_ADDR7_Disabled: ::cty::c_uint = 0;
pub const RADIO_RXADDRESSES_ADDR7_Enabled: ::cty::c_uint = 1;
pub const RADIO_RXADDRESSES_ADDR6_Pos: ::cty::c_uint = 6;
pub const RADIO_RXADDRESSES_ADDR6_Msk: ::cty::c_uint = 64;
pub const RADIO_RXADDRESSES_ADDR6_Disabled: ::cty::c_uint = 0;
pub const RADIO_RXADDRESSES_ADDR6_Enabled: ::cty::c_uint = 1;
pub const RADIO_RXADDRESSES_ADDR5_Pos: ::cty::c_uint = 5;
pub const RADIO_RXADDRESSES_ADDR5_Msk: ::cty::c_uint = 32;
pub const RADIO_RXADDRESSES_ADDR5_Disabled: ::cty::c_uint = 0;
pub const RADIO_RXADDRESSES_ADDR5_Enabled: ::cty::c_uint = 1;
pub const RADIO_RXADDRESSES_ADDR4_Pos: ::cty::c_uint = 4;
pub const RADIO_RXADDRESSES_ADDR4_Msk: ::cty::c_uint = 16;
pub const RADIO_RXADDRESSES_ADDR4_Disabled: ::cty::c_uint = 0;
pub const RADIO_RXADDRESSES_ADDR4_Enabled: ::cty::c_uint = 1;
pub const RADIO_RXADDRESSES_ADDR3_Pos: ::cty::c_uint = 3;
pub const RADIO_RXADDRESSES_ADDR3_Msk: ::cty::c_uint = 8;
pub const RADIO_RXADDRESSES_ADDR3_Disabled: ::cty::c_uint = 0;
pub const RADIO_RXADDRESSES_ADDR3_Enabled: ::cty::c_uint = 1;
pub const RADIO_RXADDRESSES_ADDR2_Pos: ::cty::c_uint = 2;
pub const RADIO_RXADDRESSES_ADDR2_Msk: ::cty::c_uint = 4;
pub const RADIO_RXADDRESSES_ADDR2_Disabled: ::cty::c_uint = 0;
pub const RADIO_RXADDRESSES_ADDR2_Enabled: ::cty::c_uint = 1;
pub const RADIO_RXADDRESSES_ADDR1_Pos: ::cty::c_uint = 1;
pub const RADIO_RXADDRESSES_ADDR1_Msk: ::cty::c_uint = 2;
pub const RADIO_RXADDRESSES_ADDR1_Disabled: ::cty::c_uint = 0;
pub const RADIO_RXADDRESSES_ADDR1_Enabled: ::cty::c_uint = 1;
pub const RADIO_RXADDRESSES_ADDR0_Pos: ::cty::c_uint = 0;
pub const RADIO_RXADDRESSES_ADDR0_Msk: ::cty::c_uint = 1;
pub const RADIO_RXADDRESSES_ADDR0_Disabled: ::cty::c_uint = 0;
pub const RADIO_RXADDRESSES_ADDR0_Enabled: ::cty::c_uint = 1;
pub const RADIO_CRCCNF_SKIPADDR_Pos: ::cty::c_uint = 8;
pub const RADIO_CRCCNF_SKIPADDR_Msk: ::cty::c_uint = 256;
pub const RADIO_CRCCNF_SKIPADDR_Include: ::cty::c_uint = 0;
pub const RADIO_CRCCNF_SKIPADDR_Skip: ::cty::c_uint = 1;
pub const RADIO_CRCCNF_LEN_Pos: ::cty::c_uint = 0;
pub const RADIO_CRCCNF_LEN_Msk: ::cty::c_uint = 3;
pub const RADIO_CRCCNF_LEN_Disabled: ::cty::c_uint = 0;
pub const RADIO_CRCCNF_LEN_One: ::cty::c_uint = 1;
pub const RADIO_CRCCNF_LEN_Two: ::cty::c_uint = 2;
pub const RADIO_CRCCNF_LEN_Three: ::cty::c_uint = 3;
pub const RADIO_CRCPOLY_CRCPOLY_Pos: ::cty::c_uint = 0;
pub const RADIO_CRCPOLY_CRCPOLY_Msk: ::cty::c_uint = 16777215;
pub const RADIO_CRCINIT_CRCINIT_Pos: ::cty::c_uint = 0;
pub const RADIO_CRCINIT_CRCINIT_Msk: ::cty::c_uint = 16777215;
pub const RADIO_TEST_PLLLOCK_Pos: ::cty::c_uint = 1;
pub const RADIO_TEST_PLLLOCK_Msk: ::cty::c_uint = 2;
pub const RADIO_TEST_PLLLOCK_Disabled: ::cty::c_uint = 0;
pub const RADIO_TEST_PLLLOCK_Enabled: ::cty::c_uint = 1;
pub const RADIO_TEST_CONSTCARRIER_Pos: ::cty::c_uint = 0;
pub const RADIO_TEST_CONSTCARRIER_Msk: ::cty::c_uint = 1;
pub const RADIO_TEST_CONSTCARRIER_Disabled: ::cty::c_uint = 0;
pub const RADIO_TEST_CONSTCARRIER_Enabled: ::cty::c_uint = 1;
pub const RADIO_TIFS_TIFS_Pos: ::cty::c_uint = 0;
pub const RADIO_TIFS_TIFS_Msk: ::cty::c_uint = 255;
pub const RADIO_RSSISAMPLE_RSSISAMPLE_Pos: ::cty::c_uint = 0;
pub const RADIO_RSSISAMPLE_RSSISAMPLE_Msk: ::cty::c_uint = 127;
pub const RADIO_STATE_STATE_Pos: ::cty::c_uint = 0;
pub const RADIO_STATE_STATE_Msk: ::cty::c_uint = 15;
pub const RADIO_STATE_STATE_Disabled: ::cty::c_uint = 0;
pub const RADIO_STATE_STATE_RxRu: ::cty::c_uint = 1;
pub const RADIO_STATE_STATE_RxIdle: ::cty::c_uint = 2;
pub const RADIO_STATE_STATE_Rx: ::cty::c_uint = 3;
pub const RADIO_STATE_STATE_RxDisable: ::cty::c_uint = 4;
pub const RADIO_STATE_STATE_TxRu: ::cty::c_uint = 9;
pub const RADIO_STATE_STATE_TxIdle: ::cty::c_uint = 10;
pub const RADIO_STATE_STATE_Tx: ::cty::c_uint = 11;
pub const RADIO_STATE_STATE_TxDisable: ::cty::c_uint = 12;
pub const RADIO_DATAWHITEIV_DATAWHITEIV_Pos: ::cty::c_uint = 0;
pub const RADIO_DATAWHITEIV_DATAWHITEIV_Msk: ::cty::c_uint = 127;
pub const RADIO_DAP_DAP_Pos: ::cty::c_uint = 0;
pub const RADIO_DAP_DAP_Msk: ::cty::c_uint = 65535;
pub const RADIO_DACNF_TXADD7_Pos: ::cty::c_uint = 15;
pub const RADIO_DACNF_TXADD7_Msk: ::cty::c_uint = 32768;
pub const RADIO_DACNF_TXADD6_Pos: ::cty::c_uint = 14;
pub const RADIO_DACNF_TXADD6_Msk: ::cty::c_uint = 16384;
pub const RADIO_DACNF_TXADD5_Pos: ::cty::c_uint = 13;
pub const RADIO_DACNF_TXADD5_Msk: ::cty::c_uint = 8192;
pub const RADIO_DACNF_TXADD4_Pos: ::cty::c_uint = 12;
pub const RADIO_DACNF_TXADD4_Msk: ::cty::c_uint = 4096;
pub const RADIO_DACNF_TXADD3_Pos: ::cty::c_uint = 11;
pub const RADIO_DACNF_TXADD3_Msk: ::cty::c_uint = 2048;
pub const RADIO_DACNF_TXADD2_Pos: ::cty::c_uint = 10;
pub const RADIO_DACNF_TXADD2_Msk: ::cty::c_uint = 1024;
pub const RADIO_DACNF_TXADD1_Pos: ::cty::c_uint = 9;
pub const RADIO_DACNF_TXADD1_Msk: ::cty::c_uint = 512;
pub const RADIO_DACNF_TXADD0_Pos: ::cty::c_uint = 8;
pub const RADIO_DACNF_TXADD0_Msk: ::cty::c_uint = 256;
pub const RADIO_DACNF_ENA7_Pos: ::cty::c_uint = 7;
pub const RADIO_DACNF_ENA7_Msk: ::cty::c_uint = 128;
pub const RADIO_DACNF_ENA7_Disabled: ::cty::c_uint = 0;
pub const RADIO_DACNF_ENA7_Enabled: ::cty::c_uint = 1;
pub const RADIO_DACNF_ENA6_Pos: ::cty::c_uint = 6;
pub const RADIO_DACNF_ENA6_Msk: ::cty::c_uint = 64;
pub const RADIO_DACNF_ENA6_Disabled: ::cty::c_uint = 0;
pub const RADIO_DACNF_ENA6_Enabled: ::cty::c_uint = 1;
pub const RADIO_DACNF_ENA5_Pos: ::cty::c_uint = 5;
pub const RADIO_DACNF_ENA5_Msk: ::cty::c_uint = 32;
pub const RADIO_DACNF_ENA5_Disabled: ::cty::c_uint = 0;
pub const RADIO_DACNF_ENA5_Enabled: ::cty::c_uint = 1;
pub const RADIO_DACNF_ENA4_Pos: ::cty::c_uint = 4;
pub const RADIO_DACNF_ENA4_Msk: ::cty::c_uint = 16;
pub const RADIO_DACNF_ENA4_Disabled: ::cty::c_uint = 0;
pub const RADIO_DACNF_ENA4_Enabled: ::cty::c_uint = 1;
pub const RADIO_DACNF_ENA3_Pos: ::cty::c_uint = 3;
pub const RADIO_DACNF_ENA3_Msk: ::cty::c_uint = 8;
pub const RADIO_DACNF_ENA3_Disabled: ::cty::c_uint = 0;
pub const RADIO_DACNF_ENA3_Enabled: ::cty::c_uint = 1;
pub const RADIO_DACNF_ENA2_Pos: ::cty::c_uint = 2;
pub const RADIO_DACNF_ENA2_Msk: ::cty::c_uint = 4;
pub const RADIO_DACNF_ENA2_Disabled: ::cty::c_uint = 0;
pub const RADIO_DACNF_ENA2_Enabled: ::cty::c_uint = 1;
pub const RADIO_DACNF_ENA1_Pos: ::cty::c_uint = 1;
pub const RADIO_DACNF_ENA1_Msk: ::cty::c_uint = 2;
pub const RADIO_DACNF_ENA1_Disabled: ::cty::c_uint = 0;
pub const RADIO_DACNF_ENA1_Enabled: ::cty::c_uint = 1;
pub const RADIO_DACNF_ENA0_Pos: ::cty::c_uint = 0;
pub const RADIO_DACNF_ENA0_Msk: ::cty::c_uint = 1;
pub const RADIO_DACNF_ENA0_Disabled: ::cty::c_uint = 0;
pub const RADIO_DACNF_ENA0_Enabled: ::cty::c_uint = 1;
pub const RADIO_OVERRIDE0_OVERRIDE0_Pos: ::cty::c_uint = 0;
pub const RADIO_OVERRIDE0_OVERRIDE0_Msk: ::cty::c_uint = 4294967295;
pub const RADIO_OVERRIDE1_OVERRIDE1_Pos: ::cty::c_uint = 0;
pub const RADIO_OVERRIDE1_OVERRIDE1_Msk: ::cty::c_uint = 4294967295;
pub const RADIO_OVERRIDE2_OVERRIDE2_Pos: ::cty::c_uint = 0;
pub const RADIO_OVERRIDE2_OVERRIDE2_Msk: ::cty::c_uint = 4294967295;
pub const RADIO_OVERRIDE3_OVERRIDE3_Pos: ::cty::c_uint = 0;
pub const RADIO_OVERRIDE3_OVERRIDE3_Msk: ::cty::c_uint = 4294967295;
pub const RADIO_OVERRIDE4_ENABLE_Pos: ::cty::c_uint = 31;
pub const RADIO_OVERRIDE4_ENABLE_Msk: ::cty::c_uint = 2147483648;
pub const RADIO_OVERRIDE4_ENABLE_Disabled: ::cty::c_uint = 0;
pub const RADIO_OVERRIDE4_ENABLE_Enabled: ::cty::c_uint = 1;
pub const RADIO_OVERRIDE4_OVERRIDE4_Pos: ::cty::c_uint = 0;
pub const RADIO_OVERRIDE4_OVERRIDE4_Msk: ::cty::c_uint = 268435455;
pub const RADIO_POWER_POWER_Pos: ::cty::c_uint = 0;
pub const RADIO_POWER_POWER_Msk: ::cty::c_uint = 1;
pub const RADIO_POWER_POWER_Disabled: ::cty::c_uint = 0;
pub const RADIO_POWER_POWER_Enabled: ::cty::c_uint = 1;
pub const RNG_SHORTS_VALRDY_STOP_Pos: ::cty::c_uint = 0;
pub const RNG_SHORTS_VALRDY_STOP_Msk: ::cty::c_uint = 1;
pub const RNG_SHORTS_VALRDY_STOP_Disabled: ::cty::c_uint = 0;
pub const RNG_SHORTS_VALRDY_STOP_Enabled: ::cty::c_uint = 1;
pub const RNG_INTENSET_VALRDY_Pos: ::cty::c_uint = 0;
pub const RNG_INTENSET_VALRDY_Msk: ::cty::c_uint = 1;
pub const RNG_INTENSET_VALRDY_Disabled: ::cty::c_uint = 0;
pub const RNG_INTENSET_VALRDY_Enabled: ::cty::c_uint = 1;
pub const RNG_INTENSET_VALRDY_Set: ::cty::c_uint = 1;
pub const RNG_INTENCLR_VALRDY_Pos: ::cty::c_uint = 0;
pub const RNG_INTENCLR_VALRDY_Msk: ::cty::c_uint = 1;
pub const RNG_INTENCLR_VALRDY_Disabled: ::cty::c_uint = 0;
pub const RNG_INTENCLR_VALRDY_Enabled: ::cty::c_uint = 1;
pub const RNG_INTENCLR_VALRDY_Clear: ::cty::c_uint = 1;
pub const RNG_CONFIG_DERCEN_Pos: ::cty::c_uint = 0;
pub const RNG_CONFIG_DERCEN_Msk: ::cty::c_uint = 1;
pub const RNG_CONFIG_DERCEN_Disabled: ::cty::c_uint = 0;
pub const RNG_CONFIG_DERCEN_Enabled: ::cty::c_uint = 1;
pub const RNG_VALUE_VALUE_Pos: ::cty::c_uint = 0;
pub const RNG_VALUE_VALUE_Msk: ::cty::c_uint = 255;
pub const RNG_POWER_POWER_Pos: ::cty::c_uint = 0;
pub const RNG_POWER_POWER_Msk: ::cty::c_uint = 1;
pub const RNG_POWER_POWER_Disabled: ::cty::c_uint = 0;
pub const RNG_POWER_POWER_Enabled: ::cty::c_uint = 1;
pub const RTC_INTENSET_COMPARE3_Pos: ::cty::c_uint = 19;
pub const RTC_INTENSET_COMPARE3_Msk: ::cty::c_uint = 524288;
pub const RTC_INTENSET_COMPARE3_Disabled: ::cty::c_uint = 0;
pub const RTC_INTENSET_COMPARE3_Enabled: ::cty::c_uint = 1;
pub const RTC_INTENSET_COMPARE3_Set: ::cty::c_uint = 1;
pub const RTC_INTENSET_COMPARE2_Pos: ::cty::c_uint = 18;
pub const RTC_INTENSET_COMPARE2_Msk: ::cty::c_uint = 262144;
pub const RTC_INTENSET_COMPARE2_Disabled: ::cty::c_uint = 0;
pub const RTC_INTENSET_COMPARE2_Enabled: ::cty::c_uint = 1;
pub const RTC_INTENSET_COMPARE2_Set: ::cty::c_uint = 1;
pub const RTC_INTENSET_COMPARE1_Pos: ::cty::c_uint = 17;
pub const RTC_INTENSET_COMPARE1_Msk: ::cty::c_uint = 131072;
pub const RTC_INTENSET_COMPARE1_Disabled: ::cty::c_uint = 0;
pub const RTC_INTENSET_COMPARE1_Enabled: ::cty::c_uint = 1;
pub const RTC_INTENSET_COMPARE1_Set: ::cty::c_uint = 1;
pub const RTC_INTENSET_COMPARE0_Pos: ::cty::c_uint = 16;
pub const RTC_INTENSET_COMPARE0_Msk: ::cty::c_uint = 65536;
pub const RTC_INTENSET_COMPARE0_Disabled: ::cty::c_uint = 0;
pub const RTC_INTENSET_COMPARE0_Enabled: ::cty::c_uint = 1;
pub const RTC_INTENSET_COMPARE0_Set: ::cty::c_uint = 1;
pub const RTC_INTENSET_OVRFLW_Pos: ::cty::c_uint = 1;
pub const RTC_INTENSET_OVRFLW_Msk: ::cty::c_uint = 2;
pub const RTC_INTENSET_OVRFLW_Disabled: ::cty::c_uint = 0;
pub const RTC_INTENSET_OVRFLW_Enabled: ::cty::c_uint = 1;
pub const RTC_INTENSET_OVRFLW_Set: ::cty::c_uint = 1;
pub const RTC_INTENSET_TICK_Pos: ::cty::c_uint = 0;
pub const RTC_INTENSET_TICK_Msk: ::cty::c_uint = 1;
pub const RTC_INTENSET_TICK_Disabled: ::cty::c_uint = 0;
pub const RTC_INTENSET_TICK_Enabled: ::cty::c_uint = 1;
pub const RTC_INTENSET_TICK_Set: ::cty::c_uint = 1;
pub const RTC_INTENCLR_COMPARE3_Pos: ::cty::c_uint = 19;
pub const RTC_INTENCLR_COMPARE3_Msk: ::cty::c_uint = 524288;
pub const RTC_INTENCLR_COMPARE3_Disabled: ::cty::c_uint = 0;
pub const RTC_INTENCLR_COMPARE3_Enabled: ::cty::c_uint = 1;
pub const RTC_INTENCLR_COMPARE3_Clear: ::cty::c_uint = 1;
pub const RTC_INTENCLR_COMPARE2_Pos: ::cty::c_uint = 18;
pub const RTC_INTENCLR_COMPARE2_Msk: ::cty::c_uint = 262144;
pub const RTC_INTENCLR_COMPARE2_Disabled: ::cty::c_uint = 0;
pub const RTC_INTENCLR_COMPARE2_Enabled: ::cty::c_uint = 1;
pub const RTC_INTENCLR_COMPARE2_Clear: ::cty::c_uint = 1;
pub const RTC_INTENCLR_COMPARE1_Pos: ::cty::c_uint = 17;
pub const RTC_INTENCLR_COMPARE1_Msk: ::cty::c_uint = 131072;
pub const RTC_INTENCLR_COMPARE1_Disabled: ::cty::c_uint = 0;
pub const RTC_INTENCLR_COMPARE1_Enabled: ::cty::c_uint = 1;
pub const RTC_INTENCLR_COMPARE1_Clear: ::cty::c_uint = 1;
pub const RTC_INTENCLR_COMPARE0_Pos: ::cty::c_uint = 16;
pub const RTC_INTENCLR_COMPARE0_Msk: ::cty::c_uint = 65536;
pub const RTC_INTENCLR_COMPARE0_Disabled: ::cty::c_uint = 0;
pub const RTC_INTENCLR_COMPARE0_Enabled: ::cty::c_uint = 1;
pub const RTC_INTENCLR_COMPARE0_Clear: ::cty::c_uint = 1;
pub const RTC_INTENCLR_OVRFLW_Pos: ::cty::c_uint = 1;
pub const RTC_INTENCLR_OVRFLW_Msk: ::cty::c_uint = 2;
pub const RTC_INTENCLR_OVRFLW_Disabled: ::cty::c_uint = 0;
pub const RTC_INTENCLR_OVRFLW_Enabled: ::cty::c_uint = 1;
pub const RTC_INTENCLR_OVRFLW_Clear: ::cty::c_uint = 1;
pub const RTC_INTENCLR_TICK_Pos: ::cty::c_uint = 0;
pub const RTC_INTENCLR_TICK_Msk: ::cty::c_uint = 1;
pub const RTC_INTENCLR_TICK_Disabled: ::cty::c_uint = 0;
pub const RTC_INTENCLR_TICK_Enabled: ::cty::c_uint = 1;
pub const RTC_INTENCLR_TICK_Clear: ::cty::c_uint = 1;
pub const RTC_EVTEN_COMPARE3_Pos: ::cty::c_uint = 19;
pub const RTC_EVTEN_COMPARE3_Msk: ::cty::c_uint = 524288;
pub const RTC_EVTEN_COMPARE3_Disabled: ::cty::c_uint = 0;
pub const RTC_EVTEN_COMPARE3_Enabled: ::cty::c_uint = 1;
pub const RTC_EVTEN_COMPARE2_Pos: ::cty::c_uint = 18;
pub const RTC_EVTEN_COMPARE2_Msk: ::cty::c_uint = 262144;
pub const RTC_EVTEN_COMPARE2_Disabled: ::cty::c_uint = 0;
pub const RTC_EVTEN_COMPARE2_Enabled: ::cty::c_uint = 1;
pub const RTC_EVTEN_COMPARE1_Pos: ::cty::c_uint = 17;
pub const RTC_EVTEN_COMPARE1_Msk: ::cty::c_uint = 131072;
pub const RTC_EVTEN_COMPARE1_Disabled: ::cty::c_uint = 0;
pub const RTC_EVTEN_COMPARE1_Enabled: ::cty::c_uint = 1;
pub const RTC_EVTEN_COMPARE0_Pos: ::cty::c_uint = 16;
pub const RTC_EVTEN_COMPARE0_Msk: ::cty::c_uint = 65536;
pub const RTC_EVTEN_COMPARE0_Disabled: ::cty::c_uint = 0;
pub const RTC_EVTEN_COMPARE0_Enabled: ::cty::c_uint = 1;
pub const RTC_EVTEN_OVRFLW_Pos: ::cty::c_uint = 1;
pub const RTC_EVTEN_OVRFLW_Msk: ::cty::c_uint = 2;
pub const RTC_EVTEN_OVRFLW_Disabled: ::cty::c_uint = 0;
pub const RTC_EVTEN_OVRFLW_Enabled: ::cty::c_uint = 1;
pub const RTC_EVTEN_TICK_Pos: ::cty::c_uint = 0;
pub const RTC_EVTEN_TICK_Msk: ::cty::c_uint = 1;
pub const RTC_EVTEN_TICK_Disabled: ::cty::c_uint = 0;
pub const RTC_EVTEN_TICK_Enabled: ::cty::c_uint = 1;
pub const RTC_EVTENSET_COMPARE3_Pos: ::cty::c_uint = 19;
pub const RTC_EVTENSET_COMPARE3_Msk: ::cty::c_uint = 524288;
pub const RTC_EVTENSET_COMPARE3_Disabled: ::cty::c_uint = 0;
pub const RTC_EVTENSET_COMPARE3_Enabled: ::cty::c_uint = 1;
pub const RTC_EVTENSET_COMPARE3_Set: ::cty::c_uint = 1;
pub const RTC_EVTENSET_COMPARE2_Pos: ::cty::c_uint = 18;
pub const RTC_EVTENSET_COMPARE2_Msk: ::cty::c_uint = 262144;
pub const RTC_EVTENSET_COMPARE2_Disabled: ::cty::c_uint = 0;
pub const RTC_EVTENSET_COMPARE2_Enabled: ::cty::c_uint = 1;
pub const RTC_EVTENSET_COMPARE2_Set: ::cty::c_uint = 1;
pub const RTC_EVTENSET_COMPARE1_Pos: ::cty::c_uint = 17;
pub const RTC_EVTENSET_COMPARE1_Msk: ::cty::c_uint = 131072;
pub const RTC_EVTENSET_COMPARE1_Disabled: ::cty::c_uint = 0;
pub const RTC_EVTENSET_COMPARE1_Enabled: ::cty::c_uint = 1;
pub const RTC_EVTENSET_COMPARE1_Set: ::cty::c_uint = 1;
pub const RTC_EVTENSET_COMPARE0_Pos: ::cty::c_uint = 16;
pub const RTC_EVTENSET_COMPARE0_Msk: ::cty::c_uint = 65536;
pub const RTC_EVTENSET_COMPARE0_Disabled: ::cty::c_uint = 0;
pub const RTC_EVTENSET_COMPARE0_Enabled: ::cty::c_uint = 1;
pub const RTC_EVTENSET_COMPARE0_Set: ::cty::c_uint = 1;
pub const RTC_EVTENSET_OVRFLW_Pos: ::cty::c_uint = 1;
pub const RTC_EVTENSET_OVRFLW_Msk: ::cty::c_uint = 2;
pub const RTC_EVTENSET_OVRFLW_Disabled: ::cty::c_uint = 0;
pub const RTC_EVTENSET_OVRFLW_Enabled: ::cty::c_uint = 1;
pub const RTC_EVTENSET_OVRFLW_Set: ::cty::c_uint = 1;
pub const RTC_EVTENSET_TICK_Pos: ::cty::c_uint = 0;
pub const RTC_EVTENSET_TICK_Msk: ::cty::c_uint = 1;
pub const RTC_EVTENSET_TICK_Disabled: ::cty::c_uint = 0;
pub const RTC_EVTENSET_TICK_Enabled: ::cty::c_uint = 1;
pub const RTC_EVTENSET_TICK_Set: ::cty::c_uint = 1;
pub const RTC_EVTENCLR_COMPARE3_Pos: ::cty::c_uint = 19;
pub const RTC_EVTENCLR_COMPARE3_Msk: ::cty::c_uint = 524288;
pub const RTC_EVTENCLR_COMPARE3_Disabled: ::cty::c_uint = 0;
pub const RTC_EVTENCLR_COMPARE3_Enabled: ::cty::c_uint = 1;
pub const RTC_EVTENCLR_COMPARE3_Clear: ::cty::c_uint = 1;
pub const RTC_EVTENCLR_COMPARE2_Pos: ::cty::c_uint = 18;
pub const RTC_EVTENCLR_COMPARE2_Msk: ::cty::c_uint = 262144;
pub const RTC_EVTENCLR_COMPARE2_Disabled: ::cty::c_uint = 0;
pub const RTC_EVTENCLR_COMPARE2_Enabled: ::cty::c_uint = 1;
pub const RTC_EVTENCLR_COMPARE2_Clear: ::cty::c_uint = 1;
pub const RTC_EVTENCLR_COMPARE1_Pos: ::cty::c_uint = 17;
pub const RTC_EVTENCLR_COMPARE1_Msk: ::cty::c_uint = 131072;
pub const RTC_EVTENCLR_COMPARE1_Disabled: ::cty::c_uint = 0;
pub const RTC_EVTENCLR_COMPARE1_Enabled: ::cty::c_uint = 1;
pub const RTC_EVTENCLR_COMPARE1_Clear: ::cty::c_uint = 1;
pub const RTC_EVTENCLR_COMPARE0_Pos: ::cty::c_uint = 16;
pub const RTC_EVTENCLR_COMPARE0_Msk: ::cty::c_uint = 65536;
pub const RTC_EVTENCLR_COMPARE0_Disabled: ::cty::c_uint = 0;
pub const RTC_EVTENCLR_COMPARE0_Enabled: ::cty::c_uint = 1;
pub const RTC_EVTENCLR_COMPARE0_Clear: ::cty::c_uint = 1;
pub const RTC_EVTENCLR_OVRFLW_Pos: ::cty::c_uint = 1;
pub const RTC_EVTENCLR_OVRFLW_Msk: ::cty::c_uint = 2;
pub const RTC_EVTENCLR_OVRFLW_Disabled: ::cty::c_uint = 0;
pub const RTC_EVTENCLR_OVRFLW_Enabled: ::cty::c_uint = 1;
pub const RTC_EVTENCLR_OVRFLW_Clear: ::cty::c_uint = 1;
pub const RTC_EVTENCLR_TICK_Pos: ::cty::c_uint = 0;
pub const RTC_EVTENCLR_TICK_Msk: ::cty::c_uint = 1;
pub const RTC_EVTENCLR_TICK_Disabled: ::cty::c_uint = 0;
pub const RTC_EVTENCLR_TICK_Enabled: ::cty::c_uint = 1;
pub const RTC_EVTENCLR_TICK_Clear: ::cty::c_uint = 1;
pub const RTC_COUNTER_COUNTER_Pos: ::cty::c_uint = 0;
pub const RTC_COUNTER_COUNTER_Msk: ::cty::c_uint = 16777215;
pub const RTC_PRESCALER_PRESCALER_Pos: ::cty::c_uint = 0;
pub const RTC_PRESCALER_PRESCALER_Msk: ::cty::c_uint = 4095;
pub const RTC_CC_COMPARE_Pos: ::cty::c_uint = 0;
pub const RTC_CC_COMPARE_Msk: ::cty::c_uint = 16777215;
pub const RTC_POWER_POWER_Pos: ::cty::c_uint = 0;
pub const RTC_POWER_POWER_Msk: ::cty::c_uint = 1;
pub const RTC_POWER_POWER_Disabled: ::cty::c_uint = 0;
pub const RTC_POWER_POWER_Enabled: ::cty::c_uint = 1;
pub const SPI_INTENSET_READY_Pos: ::cty::c_uint = 2;
pub const SPI_INTENSET_READY_Msk: ::cty::c_uint = 4;
pub const SPI_INTENSET_READY_Disabled: ::cty::c_uint = 0;
pub const SPI_INTENSET_READY_Enabled: ::cty::c_uint = 1;
pub const SPI_INTENSET_READY_Set: ::cty::c_uint = 1;
pub const SPI_INTENCLR_READY_Pos: ::cty::c_uint = 2;
pub const SPI_INTENCLR_READY_Msk: ::cty::c_uint = 4;
pub const SPI_INTENCLR_READY_Disabled: ::cty::c_uint = 0;
pub const SPI_INTENCLR_READY_Enabled: ::cty::c_uint = 1;
pub const SPI_INTENCLR_READY_Clear: ::cty::c_uint = 1;
pub const SPI_ENABLE_ENABLE_Pos: ::cty::c_uint = 0;
pub const SPI_ENABLE_ENABLE_Msk: ::cty::c_uint = 7;
pub const SPI_ENABLE_ENABLE_Disabled: ::cty::c_uint = 0;
pub const SPI_ENABLE_ENABLE_Enabled: ::cty::c_uint = 1;
pub const SPI_RXD_RXD_Pos: ::cty::c_uint = 0;
pub const SPI_RXD_RXD_Msk: ::cty::c_uint = 255;
pub const SPI_TXD_TXD_Pos: ::cty::c_uint = 0;
pub const SPI_TXD_TXD_Msk: ::cty::c_uint = 255;
pub const SPI_FREQUENCY_FREQUENCY_Pos: ::cty::c_uint = 0;
pub const SPI_FREQUENCY_FREQUENCY_Msk: ::cty::c_uint = 4294967295;
pub const SPI_FREQUENCY_FREQUENCY_K125: ::cty::c_uint = 33554432;
pub const SPI_FREQUENCY_FREQUENCY_K250: ::cty::c_uint = 67108864;
pub const SPI_FREQUENCY_FREQUENCY_K500: ::cty::c_uint = 134217728;
pub const SPI_FREQUENCY_FREQUENCY_M1: ::cty::c_uint = 268435456;
pub const SPI_FREQUENCY_FREQUENCY_M2: ::cty::c_uint = 536870912;
pub const SPI_FREQUENCY_FREQUENCY_M4: ::cty::c_uint = 1073741824;
pub const SPI_FREQUENCY_FREQUENCY_M8: ::cty::c_uint = 2147483648;
pub const SPI_CONFIG_CPOL_Pos: ::cty::c_uint = 2;
pub const SPI_CONFIG_CPOL_Msk: ::cty::c_uint = 4;
pub const SPI_CONFIG_CPOL_ActiveHigh: ::cty::c_uint = 0;
pub const SPI_CONFIG_CPOL_ActiveLow: ::cty::c_uint = 1;
pub const SPI_CONFIG_CPHA_Pos: ::cty::c_uint = 1;
pub const SPI_CONFIG_CPHA_Msk: ::cty::c_uint = 2;
pub const SPI_CONFIG_CPHA_Leading: ::cty::c_uint = 0;
pub const SPI_CONFIG_CPHA_Trailing: ::cty::c_uint = 1;
pub const SPI_CONFIG_ORDER_Pos: ::cty::c_uint = 0;
pub const SPI_CONFIG_ORDER_Msk: ::cty::c_uint = 1;
pub const SPI_CONFIG_ORDER_MsbFirst: ::cty::c_uint = 0;
pub const SPI_CONFIG_ORDER_LsbFirst: ::cty::c_uint = 1;
pub const SPI_POWER_POWER_Pos: ::cty::c_uint = 0;
pub const SPI_POWER_POWER_Msk: ::cty::c_uint = 1;
pub const SPI_POWER_POWER_Disabled: ::cty::c_uint = 0;
pub const SPI_POWER_POWER_Enabled: ::cty::c_uint = 1;
pub const SPIS_SHORTS_END_ACQUIRE_Pos: ::cty::c_uint = 2;
pub const SPIS_SHORTS_END_ACQUIRE_Msk: ::cty::c_uint = 4;
pub const SPIS_SHORTS_END_ACQUIRE_Disabled: ::cty::c_uint = 0;
pub const SPIS_SHORTS_END_ACQUIRE_Enabled: ::cty::c_uint = 1;
pub const SPIS_INTENSET_ACQUIRED_Pos: ::cty::c_uint = 10;
pub const SPIS_INTENSET_ACQUIRED_Msk: ::cty::c_uint = 1024;
pub const SPIS_INTENSET_ACQUIRED_Disabled: ::cty::c_uint = 0;
pub const SPIS_INTENSET_ACQUIRED_Enabled: ::cty::c_uint = 1;
pub const SPIS_INTENSET_ACQUIRED_Set: ::cty::c_uint = 1;
pub const SPIS_INTENSET_ENDRX_Pos: ::cty::c_uint = 4;
pub const SPIS_INTENSET_ENDRX_Msk: ::cty::c_uint = 16;
pub const SPIS_INTENSET_ENDRX_Disabled: ::cty::c_uint = 0;
pub const SPIS_INTENSET_ENDRX_Enabled: ::cty::c_uint = 1;
pub const SPIS_INTENSET_ENDRX_Set: ::cty::c_uint = 1;
pub const SPIS_INTENSET_END_Pos: ::cty::c_uint = 1;
pub const SPIS_INTENSET_END_Msk: ::cty::c_uint = 2;
pub const SPIS_INTENSET_END_Disabled: ::cty::c_uint = 0;
pub const SPIS_INTENSET_END_Enabled: ::cty::c_uint = 1;
pub const SPIS_INTENSET_END_Set: ::cty::c_uint = 1;
pub const SPIS_INTENCLR_ACQUIRED_Pos: ::cty::c_uint = 10;
pub const SPIS_INTENCLR_ACQUIRED_Msk: ::cty::c_uint = 1024;
pub const SPIS_INTENCLR_ACQUIRED_Disabled: ::cty::c_uint = 0;
pub const SPIS_INTENCLR_ACQUIRED_Enabled: ::cty::c_uint = 1;
pub const SPIS_INTENCLR_ACQUIRED_Clear: ::cty::c_uint = 1;
pub const SPIS_INTENCLR_ENDRX_Pos: ::cty::c_uint = 4;
pub const SPIS_INTENCLR_ENDRX_Msk: ::cty::c_uint = 16;
pub const SPIS_INTENCLR_ENDRX_Disabled: ::cty::c_uint = 0;
pub const SPIS_INTENCLR_ENDRX_Enabled: ::cty::c_uint = 1;
pub const SPIS_INTENCLR_ENDRX_Clear: ::cty::c_uint = 1;
pub const SPIS_INTENCLR_END_Pos: ::cty::c_uint = 1;
pub const SPIS_INTENCLR_END_Msk: ::cty::c_uint = 2;
pub const SPIS_INTENCLR_END_Disabled: ::cty::c_uint = 0;
pub const SPIS_INTENCLR_END_Enabled: ::cty::c_uint = 1;
pub const SPIS_INTENCLR_END_Clear: ::cty::c_uint = 1;
pub const SPIS_SEMSTAT_SEMSTAT_Pos: ::cty::c_uint = 0;
pub const SPIS_SEMSTAT_SEMSTAT_Msk: ::cty::c_uint = 3;
pub const SPIS_SEMSTAT_SEMSTAT_Free: ::cty::c_uint = 0;
pub const SPIS_SEMSTAT_SEMSTAT_CPU: ::cty::c_uint = 1;
pub const SPIS_SEMSTAT_SEMSTAT_SPIS: ::cty::c_uint = 2;
pub const SPIS_SEMSTAT_SEMSTAT_CPUPending: ::cty::c_uint = 3;
pub const SPIS_STATUS_OVERFLOW_Pos: ::cty::c_uint = 1;
pub const SPIS_STATUS_OVERFLOW_Msk: ::cty::c_uint = 2;
pub const SPIS_STATUS_OVERFLOW_NotPresent: ::cty::c_uint = 0;
pub const SPIS_STATUS_OVERFLOW_Present: ::cty::c_uint = 1;
pub const SPIS_STATUS_OVERFLOW_Clear: ::cty::c_uint = 1;
pub const SPIS_STATUS_OVERREAD_Pos: ::cty::c_uint = 0;
pub const SPIS_STATUS_OVERREAD_Msk: ::cty::c_uint = 1;
pub const SPIS_STATUS_OVERREAD_NotPresent: ::cty::c_uint = 0;
pub const SPIS_STATUS_OVERREAD_Present: ::cty::c_uint = 1;
pub const SPIS_STATUS_OVERREAD_Clear: ::cty::c_uint = 1;
pub const SPIS_ENABLE_ENABLE_Pos: ::cty::c_uint = 0;
pub const SPIS_ENABLE_ENABLE_Msk: ::cty::c_uint = 7;
pub const SPIS_ENABLE_ENABLE_Disabled: ::cty::c_uint = 0;
pub const SPIS_ENABLE_ENABLE_Enabled: ::cty::c_uint = 2;
pub const SPIS_MAXRX_MAXRX_Pos: ::cty::c_uint = 0;
pub const SPIS_MAXRX_MAXRX_Msk: ::cty::c_uint = 255;
pub const SPIS_AMOUNTRX_AMOUNTRX_Pos: ::cty::c_uint = 0;
pub const SPIS_AMOUNTRX_AMOUNTRX_Msk: ::cty::c_uint = 255;
pub const SPIS_MAXTX_MAXTX_Pos: ::cty::c_uint = 0;
pub const SPIS_MAXTX_MAXTX_Msk: ::cty::c_uint = 255;
pub const SPIS_AMOUNTTX_AMOUNTTX_Pos: ::cty::c_uint = 0;
pub const SPIS_AMOUNTTX_AMOUNTTX_Msk: ::cty::c_uint = 255;
pub const SPIS_CONFIG_CPOL_Pos: ::cty::c_uint = 2;
pub const SPIS_CONFIG_CPOL_Msk: ::cty::c_uint = 4;
pub const SPIS_CONFIG_CPOL_ActiveHigh: ::cty::c_uint = 0;
pub const SPIS_CONFIG_CPOL_ActiveLow: ::cty::c_uint = 1;
pub const SPIS_CONFIG_CPHA_Pos: ::cty::c_uint = 1;
pub const SPIS_CONFIG_CPHA_Msk: ::cty::c_uint = 2;
pub const SPIS_CONFIG_CPHA_Leading: ::cty::c_uint = 0;
pub const SPIS_CONFIG_CPHA_Trailing: ::cty::c_uint = 1;
pub const SPIS_CONFIG_ORDER_Pos: ::cty::c_uint = 0;
pub const SPIS_CONFIG_ORDER_Msk: ::cty::c_uint = 1;
pub const SPIS_CONFIG_ORDER_MsbFirst: ::cty::c_uint = 0;
pub const SPIS_CONFIG_ORDER_LsbFirst: ::cty::c_uint = 1;
pub const SPIS_DEF_DEF_Pos: ::cty::c_uint = 0;
pub const SPIS_DEF_DEF_Msk: ::cty::c_uint = 255;
pub const SPIS_ORC_ORC_Pos: ::cty::c_uint = 0;
pub const SPIS_ORC_ORC_Msk: ::cty::c_uint = 255;
pub const SPIS_POWER_POWER_Pos: ::cty::c_uint = 0;
pub const SPIS_POWER_POWER_Msk: ::cty::c_uint = 1;
pub const SPIS_POWER_POWER_Disabled: ::cty::c_uint = 0;
pub const SPIS_POWER_POWER_Enabled: ::cty::c_uint = 1;
pub const TEMP_INTENSET_DATARDY_Pos: ::cty::c_uint = 0;
pub const TEMP_INTENSET_DATARDY_Msk: ::cty::c_uint = 1;
pub const TEMP_INTENSET_DATARDY_Disabled: ::cty::c_uint = 0;
pub const TEMP_INTENSET_DATARDY_Enabled: ::cty::c_uint = 1;
pub const TEMP_INTENSET_DATARDY_Set: ::cty::c_uint = 1;
pub const TEMP_INTENCLR_DATARDY_Pos: ::cty::c_uint = 0;
pub const TEMP_INTENCLR_DATARDY_Msk: ::cty::c_uint = 1;
pub const TEMP_INTENCLR_DATARDY_Disabled: ::cty::c_uint = 0;
pub const TEMP_INTENCLR_DATARDY_Enabled: ::cty::c_uint = 1;
pub const TEMP_INTENCLR_DATARDY_Clear: ::cty::c_uint = 1;
pub const TEMP_POWER_POWER_Pos: ::cty::c_uint = 0;
pub const TEMP_POWER_POWER_Msk: ::cty::c_uint = 1;
pub const TEMP_POWER_POWER_Disabled: ::cty::c_uint = 0;
pub const TEMP_POWER_POWER_Enabled: ::cty::c_uint = 1;
pub const TIMER_SHORTS_COMPARE3_STOP_Pos: ::cty::c_uint = 11;
pub const TIMER_SHORTS_COMPARE3_STOP_Msk: ::cty::c_uint = 2048;
pub const TIMER_SHORTS_COMPARE3_STOP_Disabled: ::cty::c_uint = 0;
pub const TIMER_SHORTS_COMPARE3_STOP_Enabled: ::cty::c_uint = 1;
pub const TIMER_SHORTS_COMPARE2_STOP_Pos: ::cty::c_uint = 10;
pub const TIMER_SHORTS_COMPARE2_STOP_Msk: ::cty::c_uint = 1024;
pub const TIMER_SHORTS_COMPARE2_STOP_Disabled: ::cty::c_uint = 0;
pub const TIMER_SHORTS_COMPARE2_STOP_Enabled: ::cty::c_uint = 1;
pub const TIMER_SHORTS_COMPARE1_STOP_Pos: ::cty::c_uint = 9;
pub const TIMER_SHORTS_COMPARE1_STOP_Msk: ::cty::c_uint = 512;
pub const TIMER_SHORTS_COMPARE1_STOP_Disabled: ::cty::c_uint = 0;
pub const TIMER_SHORTS_COMPARE1_STOP_Enabled: ::cty::c_uint = 1;
pub const TIMER_SHORTS_COMPARE0_STOP_Pos: ::cty::c_uint = 8;
pub const TIMER_SHORTS_COMPARE0_STOP_Msk: ::cty::c_uint = 256;
pub const TIMER_SHORTS_COMPARE0_STOP_Disabled: ::cty::c_uint = 0;
pub const TIMER_SHORTS_COMPARE0_STOP_Enabled: ::cty::c_uint = 1;
pub const TIMER_SHORTS_COMPARE3_CLEAR_Pos: ::cty::c_uint = 3;
pub const TIMER_SHORTS_COMPARE3_CLEAR_Msk: ::cty::c_uint = 8;
pub const TIMER_SHORTS_COMPARE3_CLEAR_Disabled: ::cty::c_uint = 0;
pub const TIMER_SHORTS_COMPARE3_CLEAR_Enabled: ::cty::c_uint = 1;
pub const TIMER_SHORTS_COMPARE2_CLEAR_Pos: ::cty::c_uint = 2;
pub const TIMER_SHORTS_COMPARE2_CLEAR_Msk: ::cty::c_uint = 4;
pub const TIMER_SHORTS_COMPARE2_CLEAR_Disabled: ::cty::c_uint = 0;
pub const TIMER_SHORTS_COMPARE2_CLEAR_Enabled: ::cty::c_uint = 1;
pub const TIMER_SHORTS_COMPARE1_CLEAR_Pos: ::cty::c_uint = 1;
pub const TIMER_SHORTS_COMPARE1_CLEAR_Msk: ::cty::c_uint = 2;
pub const TIMER_SHORTS_COMPARE1_CLEAR_Disabled: ::cty::c_uint = 0;
pub const TIMER_SHORTS_COMPARE1_CLEAR_Enabled: ::cty::c_uint = 1;
pub const TIMER_SHORTS_COMPARE0_CLEAR_Pos: ::cty::c_uint = 0;
pub const TIMER_SHORTS_COMPARE0_CLEAR_Msk: ::cty::c_uint = 1;
pub const TIMER_SHORTS_COMPARE0_CLEAR_Disabled: ::cty::c_uint = 0;
pub const TIMER_SHORTS_COMPARE0_CLEAR_Enabled: ::cty::c_uint = 1;
pub const TIMER_INTENSET_COMPARE3_Pos: ::cty::c_uint = 19;
pub const TIMER_INTENSET_COMPARE3_Msk: ::cty::c_uint = 524288;
pub const TIMER_INTENSET_COMPARE3_Disabled: ::cty::c_uint = 0;
pub const TIMER_INTENSET_COMPARE3_Enabled: ::cty::c_uint = 1;
pub const TIMER_INTENSET_COMPARE3_Set: ::cty::c_uint = 1;
pub const TIMER_INTENSET_COMPARE2_Pos: ::cty::c_uint = 18;
pub const TIMER_INTENSET_COMPARE2_Msk: ::cty::c_uint = 262144;
pub const TIMER_INTENSET_COMPARE2_Disabled: ::cty::c_uint = 0;
pub const TIMER_INTENSET_COMPARE2_Enabled: ::cty::c_uint = 1;
pub const TIMER_INTENSET_COMPARE2_Set: ::cty::c_uint = 1;
pub const TIMER_INTENSET_COMPARE1_Pos: ::cty::c_uint = 17;
pub const TIMER_INTENSET_COMPARE1_Msk: ::cty::c_uint = 131072;
pub const TIMER_INTENSET_COMPARE1_Disabled: ::cty::c_uint = 0;
pub const TIMER_INTENSET_COMPARE1_Enabled: ::cty::c_uint = 1;
pub const TIMER_INTENSET_COMPARE1_Set: ::cty::c_uint = 1;
pub const TIMER_INTENSET_COMPARE0_Pos: ::cty::c_uint = 16;
pub const TIMER_INTENSET_COMPARE0_Msk: ::cty::c_uint = 65536;
pub const TIMER_INTENSET_COMPARE0_Disabled: ::cty::c_uint = 0;
pub const TIMER_INTENSET_COMPARE0_Enabled: ::cty::c_uint = 1;
pub const TIMER_INTENSET_COMPARE0_Set: ::cty::c_uint = 1;
pub const TIMER_INTENCLR_COMPARE3_Pos: ::cty::c_uint = 19;
pub const TIMER_INTENCLR_COMPARE3_Msk: ::cty::c_uint = 524288;
pub const TIMER_INTENCLR_COMPARE3_Disabled: ::cty::c_uint = 0;
pub const TIMER_INTENCLR_COMPARE3_Enabled: ::cty::c_uint = 1;
pub const TIMER_INTENCLR_COMPARE3_Clear: ::cty::c_uint = 1;
pub const TIMER_INTENCLR_COMPARE2_Pos: ::cty::c_uint = 18;
pub const TIMER_INTENCLR_COMPARE2_Msk: ::cty::c_uint = 262144;
pub const TIMER_INTENCLR_COMPARE2_Disabled: ::cty::c_uint = 0;
pub const TIMER_INTENCLR_COMPARE2_Enabled: ::cty::c_uint = 1;
pub const TIMER_INTENCLR_COMPARE2_Clear: ::cty::c_uint = 1;
pub const TIMER_INTENCLR_COMPARE1_Pos: ::cty::c_uint = 17;
pub const TIMER_INTENCLR_COMPARE1_Msk: ::cty::c_uint = 131072;
pub const TIMER_INTENCLR_COMPARE1_Disabled: ::cty::c_uint = 0;
pub const TIMER_INTENCLR_COMPARE1_Enabled: ::cty::c_uint = 1;
pub const TIMER_INTENCLR_COMPARE1_Clear: ::cty::c_uint = 1;
pub const TIMER_INTENCLR_COMPARE0_Pos: ::cty::c_uint = 16;
pub const TIMER_INTENCLR_COMPARE0_Msk: ::cty::c_uint = 65536;
pub const TIMER_INTENCLR_COMPARE0_Disabled: ::cty::c_uint = 0;
pub const TIMER_INTENCLR_COMPARE0_Enabled: ::cty::c_uint = 1;
pub const TIMER_INTENCLR_COMPARE0_Clear: ::cty::c_uint = 1;
pub const TIMER_MODE_MODE_Pos: ::cty::c_uint = 0;
pub const TIMER_MODE_MODE_Msk: ::cty::c_uint = 1;
pub const TIMER_MODE_MODE_Timer: ::cty::c_uint = 0;
pub const TIMER_MODE_MODE_Counter: ::cty::c_uint = 1;
pub const TIMER_BITMODE_BITMODE_Pos: ::cty::c_uint = 0;
pub const TIMER_BITMODE_BITMODE_Msk: ::cty::c_uint = 3;
pub const TIMER_BITMODE_BITMODE_16Bit: ::cty::c_uint = 0;
pub const TIMER_BITMODE_BITMODE_08Bit: ::cty::c_uint = 1;
pub const TIMER_BITMODE_BITMODE_24Bit: ::cty::c_uint = 2;
pub const TIMER_BITMODE_BITMODE_32Bit: ::cty::c_uint = 3;
pub const TIMER_PRESCALER_PRESCALER_Pos: ::cty::c_uint = 0;
pub const TIMER_PRESCALER_PRESCALER_Msk: ::cty::c_uint = 15;
pub const TIMER_POWER_POWER_Pos: ::cty::c_uint = 0;
pub const TIMER_POWER_POWER_Msk: ::cty::c_uint = 1;
pub const TIMER_POWER_POWER_Disabled: ::cty::c_uint = 0;
pub const TIMER_POWER_POWER_Enabled: ::cty::c_uint = 1;
pub const TWI_SHORTS_BB_STOP_Pos: ::cty::c_uint = 1;
pub const TWI_SHORTS_BB_STOP_Msk: ::cty::c_uint = 2;
pub const TWI_SHORTS_BB_STOP_Disabled: ::cty::c_uint = 0;
pub const TWI_SHORTS_BB_STOP_Enabled: ::cty::c_uint = 1;
pub const TWI_SHORTS_BB_SUSPEND_Pos: ::cty::c_uint = 0;
pub const TWI_SHORTS_BB_SUSPEND_Msk: ::cty::c_uint = 1;
pub const TWI_SHORTS_BB_SUSPEND_Disabled: ::cty::c_uint = 0;
pub const TWI_SHORTS_BB_SUSPEND_Enabled: ::cty::c_uint = 1;
pub const TWI_INTENSET_SUSPENDED_Pos: ::cty::c_uint = 18;
pub const TWI_INTENSET_SUSPENDED_Msk: ::cty::c_uint = 262144;
pub const TWI_INTENSET_SUSPENDED_Disabled: ::cty::c_uint = 0;
pub const TWI_INTENSET_SUSPENDED_Enabled: ::cty::c_uint = 1;
pub const TWI_INTENSET_SUSPENDED_Set: ::cty::c_uint = 1;
pub const TWI_INTENSET_BB_Pos: ::cty::c_uint = 14;
pub const TWI_INTENSET_BB_Msk: ::cty::c_uint = 16384;
pub const TWI_INTENSET_BB_Disabled: ::cty::c_uint = 0;
pub const TWI_INTENSET_BB_Enabled: ::cty::c_uint = 1;
pub const TWI_INTENSET_BB_Set: ::cty::c_uint = 1;
pub const TWI_INTENSET_ERROR_Pos: ::cty::c_uint = 9;
pub const TWI_INTENSET_ERROR_Msk: ::cty::c_uint = 512;
pub const TWI_INTENSET_ERROR_Disabled: ::cty::c_uint = 0;
pub const TWI_INTENSET_ERROR_Enabled: ::cty::c_uint = 1;
pub const TWI_INTENSET_ERROR_Set: ::cty::c_uint = 1;
pub const TWI_INTENSET_TXDSENT_Pos: ::cty::c_uint = 7;
pub const TWI_INTENSET_TXDSENT_Msk: ::cty::c_uint = 128;
pub const TWI_INTENSET_TXDSENT_Disabled: ::cty::c_uint = 0;
pub const TWI_INTENSET_TXDSENT_Enabled: ::cty::c_uint = 1;
pub const TWI_INTENSET_TXDSENT_Set: ::cty::c_uint = 1;
pub const TWI_INTENSET_RXDREADY_Pos: ::cty::c_uint = 2;
pub const TWI_INTENSET_RXDREADY_Msk: ::cty::c_uint = 4;
pub const TWI_INTENSET_RXDREADY_Disabled: ::cty::c_uint = 0;
pub const TWI_INTENSET_RXDREADY_Enabled: ::cty::c_uint = 1;
pub const TWI_INTENSET_RXDREADY_Set: ::cty::c_uint = 1;
pub const TWI_INTENSET_STOPPED_Pos: ::cty::c_uint = 1;
pub const TWI_INTENSET_STOPPED_Msk: ::cty::c_uint = 2;
pub const TWI_INTENSET_STOPPED_Disabled: ::cty::c_uint = 0;
pub const TWI_INTENSET_STOPPED_Enabled: ::cty::c_uint = 1;
pub const TWI_INTENSET_STOPPED_Set: ::cty::c_uint = 1;
pub const TWI_INTENCLR_SUSPENDED_Pos: ::cty::c_uint = 18;
pub const TWI_INTENCLR_SUSPENDED_Msk: ::cty::c_uint = 262144;
pub const TWI_INTENCLR_SUSPENDED_Disabled: ::cty::c_uint = 0;
pub const TWI_INTENCLR_SUSPENDED_Enabled: ::cty::c_uint = 1;
pub const TWI_INTENCLR_SUSPENDED_Clear: ::cty::c_uint = 1;
pub const TWI_INTENCLR_BB_Pos: ::cty::c_uint = 14;
pub const TWI_INTENCLR_BB_Msk: ::cty::c_uint = 16384;
pub const TWI_INTENCLR_BB_Disabled: ::cty::c_uint = 0;
pub const TWI_INTENCLR_BB_Enabled: ::cty::c_uint = 1;
pub const TWI_INTENCLR_BB_Clear: ::cty::c_uint = 1;
pub const TWI_INTENCLR_ERROR_Pos: ::cty::c_uint = 9;
pub const TWI_INTENCLR_ERROR_Msk: ::cty::c_uint = 512;
pub const TWI_INTENCLR_ERROR_Disabled: ::cty::c_uint = 0;
pub const TWI_INTENCLR_ERROR_Enabled: ::cty::c_uint = 1;
pub const TWI_INTENCLR_ERROR_Clear: ::cty::c_uint = 1;
pub const TWI_INTENCLR_TXDSENT_Pos: ::cty::c_uint = 7;
pub const TWI_INTENCLR_TXDSENT_Msk: ::cty::c_uint = 128;
pub const TWI_INTENCLR_TXDSENT_Disabled: ::cty::c_uint = 0;
pub const TWI_INTENCLR_TXDSENT_Enabled: ::cty::c_uint = 1;
pub const TWI_INTENCLR_TXDSENT_Clear: ::cty::c_uint = 1;
pub const TWI_INTENCLR_RXDREADY_Pos: ::cty::c_uint = 2;
pub const TWI_INTENCLR_RXDREADY_Msk: ::cty::c_uint = 4;
pub const TWI_INTENCLR_RXDREADY_Disabled: ::cty::c_uint = 0;
pub const TWI_INTENCLR_RXDREADY_Enabled: ::cty::c_uint = 1;
pub const TWI_INTENCLR_RXDREADY_Clear: ::cty::c_uint = 1;
pub const TWI_INTENCLR_STOPPED_Pos: ::cty::c_uint = 1;
pub const TWI_INTENCLR_STOPPED_Msk: ::cty::c_uint = 2;
pub const TWI_INTENCLR_STOPPED_Disabled: ::cty::c_uint = 0;
pub const TWI_INTENCLR_STOPPED_Enabled: ::cty::c_uint = 1;
pub const TWI_INTENCLR_STOPPED_Clear: ::cty::c_uint = 1;
pub const TWI_ERRORSRC_DNACK_Pos: ::cty::c_uint = 2;
pub const TWI_ERRORSRC_DNACK_Msk: ::cty::c_uint = 4;
pub const TWI_ERRORSRC_DNACK_NotPresent: ::cty::c_uint = 0;
pub const TWI_ERRORSRC_DNACK_Present: ::cty::c_uint = 1;
pub const TWI_ERRORSRC_DNACK_Clear: ::cty::c_uint = 1;
pub const TWI_ERRORSRC_ANACK_Pos: ::cty::c_uint = 1;
pub const TWI_ERRORSRC_ANACK_Msk: ::cty::c_uint = 2;
pub const TWI_ERRORSRC_ANACK_NotPresent: ::cty::c_uint = 0;
pub const TWI_ERRORSRC_ANACK_Present: ::cty::c_uint = 1;
pub const TWI_ERRORSRC_ANACK_Clear: ::cty::c_uint = 1;
pub const TWI_ERRORSRC_OVERRUN_Pos: ::cty::c_uint = 0;
pub const TWI_ERRORSRC_OVERRUN_Msk: ::cty::c_uint = 1;
pub const TWI_ERRORSRC_OVERRUN_NotPresent: ::cty::c_uint = 0;
pub const TWI_ERRORSRC_OVERRUN_Present: ::cty::c_uint = 1;
pub const TWI_ERRORSRC_OVERRUN_Clear: ::cty::c_uint = 1;
pub const TWI_ENABLE_ENABLE_Pos: ::cty::c_uint = 0;
pub const TWI_ENABLE_ENABLE_Msk: ::cty::c_uint = 7;
pub const TWI_ENABLE_ENABLE_Disabled: ::cty::c_uint = 0;
pub const TWI_ENABLE_ENABLE_Enabled: ::cty::c_uint = 5;
pub const TWI_RXD_RXD_Pos: ::cty::c_uint = 0;
pub const TWI_RXD_RXD_Msk: ::cty::c_uint = 255;
pub const TWI_TXD_TXD_Pos: ::cty::c_uint = 0;
pub const TWI_TXD_TXD_Msk: ::cty::c_uint = 255;
pub const TWI_FREQUENCY_FREQUENCY_Pos: ::cty::c_uint = 0;
pub const TWI_FREQUENCY_FREQUENCY_Msk: ::cty::c_uint = 4294967295;
pub const TWI_FREQUENCY_FREQUENCY_K100: ::cty::c_uint = 26738688;
pub const TWI_FREQUENCY_FREQUENCY_K250: ::cty::c_uint = 67108864;
pub const TWI_FREQUENCY_FREQUENCY_K400: ::cty::c_uint = 107479040;
pub const TWI_ADDRESS_ADDRESS_Pos: ::cty::c_uint = 0;
pub const TWI_ADDRESS_ADDRESS_Msk: ::cty::c_uint = 127;
pub const TWI_POWER_POWER_Pos: ::cty::c_uint = 0;
pub const TWI_POWER_POWER_Msk: ::cty::c_uint = 1;
pub const TWI_POWER_POWER_Disabled: ::cty::c_uint = 0;
pub const TWI_POWER_POWER_Enabled: ::cty::c_uint = 1;
pub const UART_SHORTS_NCTS_STOPRX_Pos: ::cty::c_uint = 4;
pub const UART_SHORTS_NCTS_STOPRX_Msk: ::cty::c_uint = 16;
pub const UART_SHORTS_NCTS_STOPRX_Disabled: ::cty::c_uint = 0;
pub const UART_SHORTS_NCTS_STOPRX_Enabled: ::cty::c_uint = 1;
pub const UART_SHORTS_CTS_STARTRX_Pos: ::cty::c_uint = 3;
pub const UART_SHORTS_CTS_STARTRX_Msk: ::cty::c_uint = 8;
pub const UART_SHORTS_CTS_STARTRX_Disabled: ::cty::c_uint = 0;
pub const UART_SHORTS_CTS_STARTRX_Enabled: ::cty::c_uint = 1;
pub const UART_INTENSET_RXTO_Pos: ::cty::c_uint = 17;
pub const UART_INTENSET_RXTO_Msk: ::cty::c_uint = 131072;
pub const UART_INTENSET_RXTO_Disabled: ::cty::c_uint = 0;
pub const UART_INTENSET_RXTO_Enabled: ::cty::c_uint = 1;
pub const UART_INTENSET_RXTO_Set: ::cty::c_uint = 1;
pub const UART_INTENSET_ERROR_Pos: ::cty::c_uint = 9;
pub const UART_INTENSET_ERROR_Msk: ::cty::c_uint = 512;
pub const UART_INTENSET_ERROR_Disabled: ::cty::c_uint = 0;
pub const UART_INTENSET_ERROR_Enabled: ::cty::c_uint = 1;
pub const UART_INTENSET_ERROR_Set: ::cty::c_uint = 1;
pub const UART_INTENSET_TXDRDY_Pos: ::cty::c_uint = 7;
pub const UART_INTENSET_TXDRDY_Msk: ::cty::c_uint = 128;
pub const UART_INTENSET_TXDRDY_Disabled: ::cty::c_uint = 0;
pub const UART_INTENSET_TXDRDY_Enabled: ::cty::c_uint = 1;
pub const UART_INTENSET_TXDRDY_Set: ::cty::c_uint = 1;
pub const UART_INTENSET_RXDRDY_Pos: ::cty::c_uint = 2;
pub const UART_INTENSET_RXDRDY_Msk: ::cty::c_uint = 4;
pub const UART_INTENSET_RXDRDY_Disabled: ::cty::c_uint = 0;
pub const UART_INTENSET_RXDRDY_Enabled: ::cty::c_uint = 1;
pub const UART_INTENSET_RXDRDY_Set: ::cty::c_uint = 1;
pub const UART_INTENSET_NCTS_Pos: ::cty::c_uint = 1;
pub const UART_INTENSET_NCTS_Msk: ::cty::c_uint = 2;
pub const UART_INTENSET_NCTS_Disabled: ::cty::c_uint = 0;
pub const UART_INTENSET_NCTS_Enabled: ::cty::c_uint = 1;
pub const UART_INTENSET_NCTS_Set: ::cty::c_uint = 1;
pub const UART_INTENSET_CTS_Pos: ::cty::c_uint = 0;
pub const UART_INTENSET_CTS_Msk: ::cty::c_uint = 1;
pub const UART_INTENSET_CTS_Disabled: ::cty::c_uint = 0;
pub const UART_INTENSET_CTS_Enabled: ::cty::c_uint = 1;
pub const UART_INTENSET_CTS_Set: ::cty::c_uint = 1;
pub const UART_INTENCLR_RXTO_Pos: ::cty::c_uint = 17;
pub const UART_INTENCLR_RXTO_Msk: ::cty::c_uint = 131072;
pub const UART_INTENCLR_RXTO_Disabled: ::cty::c_uint = 0;
pub const UART_INTENCLR_RXTO_Enabled: ::cty::c_uint = 1;
pub const UART_INTENCLR_RXTO_Clear: ::cty::c_uint = 1;
pub const UART_INTENCLR_ERROR_Pos: ::cty::c_uint = 9;
pub const UART_INTENCLR_ERROR_Msk: ::cty::c_uint = 512;
pub const UART_INTENCLR_ERROR_Disabled: ::cty::c_uint = 0;
pub const UART_INTENCLR_ERROR_Enabled: ::cty::c_uint = 1;
pub const UART_INTENCLR_ERROR_Clear: ::cty::c_uint = 1;
pub const UART_INTENCLR_TXDRDY_Pos: ::cty::c_uint = 7;
pub const UART_INTENCLR_TXDRDY_Msk: ::cty::c_uint = 128;
pub const UART_INTENCLR_TXDRDY_Disabled: ::cty::c_uint = 0;
pub const UART_INTENCLR_TXDRDY_Enabled: ::cty::c_uint = 1;
pub const UART_INTENCLR_TXDRDY_Clear: ::cty::c_uint = 1;
pub const UART_INTENCLR_RXDRDY_Pos: ::cty::c_uint = 2;
pub const UART_INTENCLR_RXDRDY_Msk: ::cty::c_uint = 4;
pub const UART_INTENCLR_RXDRDY_Disabled: ::cty::c_uint = 0;
pub const UART_INTENCLR_RXDRDY_Enabled: ::cty::c_uint = 1;
pub const UART_INTENCLR_RXDRDY_Clear: ::cty::c_uint = 1;
pub const UART_INTENCLR_NCTS_Pos: ::cty::c_uint = 1;
pub const UART_INTENCLR_NCTS_Msk: ::cty::c_uint = 2;
pub const UART_INTENCLR_NCTS_Disabled: ::cty::c_uint = 0;
pub const UART_INTENCLR_NCTS_Enabled: ::cty::c_uint = 1;
pub const UART_INTENCLR_NCTS_Clear: ::cty::c_uint = 1;
pub const UART_INTENCLR_CTS_Pos: ::cty::c_uint = 0;
pub const UART_INTENCLR_CTS_Msk: ::cty::c_uint = 1;
pub const UART_INTENCLR_CTS_Disabled: ::cty::c_uint = 0;
pub const UART_INTENCLR_CTS_Enabled: ::cty::c_uint = 1;
pub const UART_INTENCLR_CTS_Clear: ::cty::c_uint = 1;
pub const UART_ERRORSRC_BREAK_Pos: ::cty::c_uint = 3;
pub const UART_ERRORSRC_BREAK_Msk: ::cty::c_uint = 8;
pub const UART_ERRORSRC_BREAK_NotPresent: ::cty::c_uint = 0;
pub const UART_ERRORSRC_BREAK_Present: ::cty::c_uint = 1;
pub const UART_ERRORSRC_BREAK_Clear: ::cty::c_uint = 1;
pub const UART_ERRORSRC_FRAMING_Pos: ::cty::c_uint = 2;
pub const UART_ERRORSRC_FRAMING_Msk: ::cty::c_uint = 4;
pub const UART_ERRORSRC_FRAMING_NotPresent: ::cty::c_uint = 0;
pub const UART_ERRORSRC_FRAMING_Present: ::cty::c_uint = 1;
pub const UART_ERRORSRC_FRAMING_Clear: ::cty::c_uint = 1;
pub const UART_ERRORSRC_PARITY_Pos: ::cty::c_uint = 1;
pub const UART_ERRORSRC_PARITY_Msk: ::cty::c_uint = 2;
pub const UART_ERRORSRC_PARITY_NotPresent: ::cty::c_uint = 0;
pub const UART_ERRORSRC_PARITY_Present: ::cty::c_uint = 1;
pub const UART_ERRORSRC_PARITY_Clear: ::cty::c_uint = 1;
pub const UART_ERRORSRC_OVERRUN_Pos: ::cty::c_uint = 0;
pub const UART_ERRORSRC_OVERRUN_Msk: ::cty::c_uint = 1;
pub const UART_ERRORSRC_OVERRUN_NotPresent: ::cty::c_uint = 0;
pub const UART_ERRORSRC_OVERRUN_Present: ::cty::c_uint = 1;
pub const UART_ERRORSRC_OVERRUN_Clear: ::cty::c_uint = 1;
pub const UART_ENABLE_ENABLE_Pos: ::cty::c_uint = 0;
pub const UART_ENABLE_ENABLE_Msk: ::cty::c_uint = 7;
pub const UART_ENABLE_ENABLE_Disabled: ::cty::c_uint = 0;
pub const UART_ENABLE_ENABLE_Enabled: ::cty::c_uint = 4;
pub const UART_RXD_RXD_Pos: ::cty::c_uint = 0;
pub const UART_RXD_RXD_Msk: ::cty::c_uint = 255;
pub const UART_TXD_TXD_Pos: ::cty::c_uint = 0;
pub const UART_TXD_TXD_Msk: ::cty::c_uint = 255;
pub const UART_BAUDRATE_BAUDRATE_Pos: ::cty::c_uint = 0;
pub const UART_BAUDRATE_BAUDRATE_Msk: ::cty::c_uint = 4294967295;
pub const UART_BAUDRATE_BAUDRATE_Baud1200: ::cty::c_uint = 323584;
pub const UART_BAUDRATE_BAUDRATE_Baud2400: ::cty::c_uint = 643072;
pub const UART_BAUDRATE_BAUDRATE_Baud4800: ::cty::c_uint = 1290240;
pub const UART_BAUDRATE_BAUDRATE_Baud9600: ::cty::c_uint = 2576384;
pub const UART_BAUDRATE_BAUDRATE_Baud14400: ::cty::c_uint = 3866624;
pub const UART_BAUDRATE_BAUDRATE_Baud19200: ::cty::c_uint = 5152768;
pub const UART_BAUDRATE_BAUDRATE_Baud28800: ::cty::c_uint = 7729152;
pub const UART_BAUDRATE_BAUDRATE_Baud31250: ::cty::c_uint = 8388608;
pub const UART_BAUDRATE_BAUDRATE_Baud38400: ::cty::c_uint = 10309632;
pub const UART_BAUDRATE_BAUDRATE_Baud56000: ::cty::c_uint = 15007744;
pub const UART_BAUDRATE_BAUDRATE_Baud57600: ::cty::c_uint = 15462400;
pub const UART_BAUDRATE_BAUDRATE_Baud76800: ::cty::c_uint = 20615168;
pub const UART_BAUDRATE_BAUDRATE_Baud115200: ::cty::c_uint = 30924800;
pub const UART_BAUDRATE_BAUDRATE_Baud230400: ::cty::c_uint = 61845504;
pub const UART_BAUDRATE_BAUDRATE_Baud250000: ::cty::c_uint = 67108864;
pub const UART_BAUDRATE_BAUDRATE_Baud460800: ::cty::c_uint = 123695104;
pub const UART_BAUDRATE_BAUDRATE_Baud921600: ::cty::c_uint = 247386112;
pub const UART_BAUDRATE_BAUDRATE_Baud1M: ::cty::c_uint = 268435456;
pub const UART_CONFIG_PARITY_Pos: ::cty::c_uint = 1;
pub const UART_CONFIG_PARITY_Msk: ::cty::c_uint = 14;
pub const UART_CONFIG_PARITY_Excluded: ::cty::c_uint = 0;
pub const UART_CONFIG_PARITY_Included: ::cty::c_uint = 7;
pub const UART_CONFIG_HWFC_Pos: ::cty::c_uint = 0;
pub const UART_CONFIG_HWFC_Msk: ::cty::c_uint = 1;
pub const UART_CONFIG_HWFC_Disabled: ::cty::c_uint = 0;
pub const UART_CONFIG_HWFC_Enabled: ::cty::c_uint = 1;
pub const UART_POWER_POWER_Pos: ::cty::c_uint = 0;
pub const UART_POWER_POWER_Msk: ::cty::c_uint = 1;
pub const UART_POWER_POWER_Disabled: ::cty::c_uint = 0;
pub const UART_POWER_POWER_Enabled: ::cty::c_uint = 1;
pub const UICR_RBPCONF_PALL_Pos: ::cty::c_uint = 8;
pub const UICR_RBPCONF_PALL_Msk: ::cty::c_uint = 65280;
pub const UICR_RBPCONF_PALL_Enabled: ::cty::c_uint = 0;
pub const UICR_RBPCONF_PALL_Disabled: ::cty::c_uint = 255;
pub const UICR_RBPCONF_PR0_Pos: ::cty::c_uint = 0;
pub const UICR_RBPCONF_PR0_Msk: ::cty::c_uint = 255;
pub const UICR_RBPCONF_PR0_Enabled: ::cty::c_uint = 0;
pub const UICR_RBPCONF_PR0_Disabled: ::cty::c_uint = 255;
pub const UICR_XTALFREQ_XTALFREQ_Pos: ::cty::c_uint = 0;
pub const UICR_XTALFREQ_XTALFREQ_Msk: ::cty::c_uint = 255;
pub const UICR_XTALFREQ_XTALFREQ_32MHz: ::cty::c_uint = 0;
pub const UICR_XTALFREQ_XTALFREQ_16MHz: ::cty::c_uint = 255;
pub const UICR_FWID_FWID_Pos: ::cty::c_uint = 0;
pub const UICR_FWID_FWID_Msk: ::cty::c_uint = 65535;
pub const WDT_INTENSET_TIMEOUT_Pos: ::cty::c_uint = 0;
pub const WDT_INTENSET_TIMEOUT_Msk: ::cty::c_uint = 1;
pub const WDT_INTENSET_TIMEOUT_Disabled: ::cty::c_uint = 0;
pub const WDT_INTENSET_TIMEOUT_Enabled: ::cty::c_uint = 1;
pub const WDT_INTENSET_TIMEOUT_Set: ::cty::c_uint = 1;
pub const WDT_INTENCLR_TIMEOUT_Pos: ::cty::c_uint = 0;
pub const WDT_INTENCLR_TIMEOUT_Msk: ::cty::c_uint = 1;
pub const WDT_INTENCLR_TIMEOUT_Disabled: ::cty::c_uint = 0;
pub const WDT_INTENCLR_TIMEOUT_Enabled: ::cty::c_uint = 1;
pub const WDT_INTENCLR_TIMEOUT_Clear: ::cty::c_uint = 1;
pub const WDT_RUNSTATUS_RUNSTATUS_Pos: ::cty::c_uint = 0;
pub const WDT_RUNSTATUS_RUNSTATUS_Msk: ::cty::c_uint = 1;
pub const WDT_RUNSTATUS_RUNSTATUS_NotRunning: ::cty::c_uint = 0;
pub const WDT_RUNSTATUS_RUNSTATUS_Running: ::cty::c_uint = 1;
pub const WDT_REQSTATUS_RR7_Pos: ::cty::c_uint = 7;
pub const WDT_REQSTATUS_RR7_Msk: ::cty::c_uint = 128;
pub const WDT_REQSTATUS_RR7_DisabledOrRequested: ::cty::c_uint = 0;
pub const WDT_REQSTATUS_RR7_EnabledAndUnrequested: ::cty::c_uint = 1;
pub const WDT_REQSTATUS_RR6_Pos: ::cty::c_uint = 6;
pub const WDT_REQSTATUS_RR6_Msk: ::cty::c_uint = 64;
pub const WDT_REQSTATUS_RR6_DisabledOrRequested: ::cty::c_uint = 0;
pub const WDT_REQSTATUS_RR6_EnabledAndUnrequested: ::cty::c_uint = 1;
pub const WDT_REQSTATUS_RR5_Pos: ::cty::c_uint = 5;
pub const WDT_REQSTATUS_RR5_Msk: ::cty::c_uint = 32;
pub const WDT_REQSTATUS_RR5_DisabledOrRequested: ::cty::c_uint = 0;
pub const WDT_REQSTATUS_RR5_EnabledAndUnrequested: ::cty::c_uint = 1;
pub const WDT_REQSTATUS_RR4_Pos: ::cty::c_uint = 4;
pub const WDT_REQSTATUS_RR4_Msk: ::cty::c_uint = 16;
pub const WDT_REQSTATUS_RR4_DisabledOrRequested: ::cty::c_uint = 0;
pub const WDT_REQSTATUS_RR4_EnabledAndUnrequested: ::cty::c_uint = 1;
pub const WDT_REQSTATUS_RR3_Pos: ::cty::c_uint = 3;
pub const WDT_REQSTATUS_RR3_Msk: ::cty::c_uint = 8;
pub const WDT_REQSTATUS_RR3_DisabledOrRequested: ::cty::c_uint = 0;
pub const WDT_REQSTATUS_RR3_EnabledAndUnrequested: ::cty::c_uint = 1;
pub const WDT_REQSTATUS_RR2_Pos: ::cty::c_uint = 2;
pub const WDT_REQSTATUS_RR2_Msk: ::cty::c_uint = 4;
pub const WDT_REQSTATUS_RR2_DisabledOrRequested: ::cty::c_uint = 0;
pub const WDT_REQSTATUS_RR2_EnabledAndUnrequested: ::cty::c_uint = 1;
pub const WDT_REQSTATUS_RR1_Pos: ::cty::c_uint = 1;
pub const WDT_REQSTATUS_RR1_Msk: ::cty::c_uint = 2;
pub const WDT_REQSTATUS_RR1_DisabledOrRequested: ::cty::c_uint = 0;
pub const WDT_REQSTATUS_RR1_EnabledAndUnrequested: ::cty::c_uint = 1;
pub const WDT_REQSTATUS_RR0_Pos: ::cty::c_uint = 0;
pub const WDT_REQSTATUS_RR0_Msk: ::cty::c_uint = 1;
pub const WDT_REQSTATUS_RR0_DisabledOrRequested: ::cty::c_uint = 0;
pub const WDT_REQSTATUS_RR0_EnabledAndUnrequested: ::cty::c_uint = 1;
pub const WDT_RREN_RR7_Pos: ::cty::c_uint = 7;
pub const WDT_RREN_RR7_Msk: ::cty::c_uint = 128;
pub const WDT_RREN_RR7_Disabled: ::cty::c_uint = 0;
pub const WDT_RREN_RR7_Enabled: ::cty::c_uint = 1;
pub const WDT_RREN_RR6_Pos: ::cty::c_uint = 6;
pub const WDT_RREN_RR6_Msk: ::cty::c_uint = 64;
pub const WDT_RREN_RR6_Disabled: ::cty::c_uint = 0;
pub const WDT_RREN_RR6_Enabled: ::cty::c_uint = 1;
pub const WDT_RREN_RR5_Pos: ::cty::c_uint = 5;
pub const WDT_RREN_RR5_Msk: ::cty::c_uint = 32;
pub const WDT_RREN_RR5_Disabled: ::cty::c_uint = 0;
pub const WDT_RREN_RR5_Enabled: ::cty::c_uint = 1;
pub const WDT_RREN_RR4_Pos: ::cty::c_uint = 4;
pub const WDT_RREN_RR4_Msk: ::cty::c_uint = 16;
pub const WDT_RREN_RR4_Disabled: ::cty::c_uint = 0;
pub const WDT_RREN_RR4_Enabled: ::cty::c_uint = 1;
pub const WDT_RREN_RR3_Pos: ::cty::c_uint = 3;
pub const WDT_RREN_RR3_Msk: ::cty::c_uint = 8;
pub const WDT_RREN_RR3_Disabled: ::cty::c_uint = 0;
pub const WDT_RREN_RR3_Enabled: ::cty::c_uint = 1;
pub const WDT_RREN_RR2_Pos: ::cty::c_uint = 2;
pub const WDT_RREN_RR2_Msk: ::cty::c_uint = 4;
pub const WDT_RREN_RR2_Disabled: ::cty::c_uint = 0;
pub const WDT_RREN_RR2_Enabled: ::cty::c_uint = 1;
pub const WDT_RREN_RR1_Pos: ::cty::c_uint = 1;
pub const WDT_RREN_RR1_Msk: ::cty::c_uint = 2;
pub const WDT_RREN_RR1_Disabled: ::cty::c_uint = 0;
pub const WDT_RREN_RR1_Enabled: ::cty::c_uint = 1;
pub const WDT_RREN_RR0_Pos: ::cty::c_uint = 0;
pub const WDT_RREN_RR0_Msk: ::cty::c_uint = 1;
pub const WDT_RREN_RR0_Disabled: ::cty::c_uint = 0;
pub const WDT_RREN_RR0_Enabled: ::cty::c_uint = 1;
pub const WDT_CONFIG_HALT_Pos: ::cty::c_uint = 3;
pub const WDT_CONFIG_HALT_Msk: ::cty::c_uint = 8;
pub const WDT_CONFIG_HALT_Pause: ::cty::c_uint = 0;
pub const WDT_CONFIG_HALT_Run: ::cty::c_uint = 1;
pub const WDT_CONFIG_SLEEP_Pos: ::cty::c_uint = 0;
pub const WDT_CONFIG_SLEEP_Msk: ::cty::c_uint = 1;
pub const WDT_CONFIG_SLEEP_Pause: ::cty::c_uint = 0;
pub const WDT_CONFIG_SLEEP_Run: ::cty::c_uint = 1;
pub const WDT_RR_RR_Pos: ::cty::c_uint = 0;
pub const WDT_RR_RR_Msk: ::cty::c_uint = 4294967295;
pub const WDT_RR_RR_Reload: ::cty::c_uint = 1850885685;
pub const WDT_POWER_POWER_Pos: ::cty::c_uint = 0;
pub const WDT_POWER_POWER_Msk: ::cty::c_uint = 1;
pub const WDT_POWER_POWER_Disabled: ::cty::c_uint = 0;
pub const WDT_POWER_POWER_Enabled: ::cty::c_uint = 1;
pub const LPCOMP_RESULT_RESULT_Bellow: ::cty::c_uint = 0;
pub const MPU_PERR0_LPCOMP_COMP_Pos: ::cty::c_uint = 19;
pub const MPU_PERR0_LPCOMP_COMP_Msk: ::cty::c_uint = 524288;
pub const MPU_PERR0_LPCOMP_COMP_InRegion1: ::cty::c_uint = 0;
pub const MPU_PERR0_LPCOMP_COMP_InRegion0: ::cty::c_uint = 1;
pub const POWER_RAMON_OFFRAM3_Pos: ::cty::c_uint = 19;
pub const POWER_RAMON_OFFRAM3_Msk: ::cty::c_uint = 524288;
pub const POWER_RAMON_OFFRAM3_RAM3Off: ::cty::c_uint = 0;
pub const POWER_RAMON_OFFRAM3_RAM3On: ::cty::c_uint = 1;
pub const POWER_RAMON_OFFRAM2_Pos: ::cty::c_uint = 18;
pub const POWER_RAMON_OFFRAM2_Msk: ::cty::c_uint = 262144;
pub const POWER_RAMON_OFFRAM2_RAM2Off: ::cty::c_uint = 0;
pub const POWER_RAMON_OFFRAM2_RAM2On: ::cty::c_uint = 1;
pub const POWER_RAMON_ONRAM3_Pos: ::cty::c_uint = 3;
pub const POWER_RAMON_ONRAM3_Msk: ::cty::c_uint = 8;
pub const POWER_RAMON_ONRAM3_RAM3Off: ::cty::c_uint = 0;
pub const POWER_RAMON_ONRAM3_RAM3On: ::cty::c_uint = 1;
pub const POWER_RAMON_ONRAM2_Pos: ::cty::c_uint = 2;
pub const POWER_RAMON_ONRAM2_Msk: ::cty::c_uint = 4;
pub const POWER_RAMON_ONRAM2_RAM2Off: ::cty::c_uint = 0;
pub const POWER_RAMON_ONRAM2_RAM2On: ::cty::c_uint = 1;
pub const RADIO_TXPOWER_TXPOWER_Neg40dBm: ::cty::c_uint = 216;
pub const RADIO_CRCCNF_SKIP_ADDR_Pos: ::cty::c_uint = 8;
pub const RADIO_CRCCNF_SKIP_ADDR_Msk: ::cty::c_uint = 256;
pub const RADIO_CRCCNF_SKIP_ADDR_Include: ::cty::c_uint = 0;
pub const RADIO_CRCCNF_SKIP_ADDR_Skip: ::cty::c_uint = 1;
pub const RADIO_TEST_PLL_LOCK_Pos: ::cty::c_uint = 1;
pub const RADIO_TEST_PLL_LOCK_Msk: ::cty::c_uint = 2;
pub const RADIO_TEST_PLL_LOCK_Disabled: ::cty::c_uint = 0;
pub const RADIO_TEST_PLL_LOCK_Enabled: ::cty::c_uint = 1;
pub const RADIO_TEST_CONST_CARRIER_Pos: ::cty::c_uint = 0;
pub const RADIO_TEST_CONST_CARRIER_Msk: ::cty::c_uint = 1;
pub const RADIO_TEST_CONST_CARRIER_Disabled: ::cty::c_uint = 0;
pub const RADIO_TEST_CONST_CARRIER_Enabled: ::cty::c_uint = 1;
pub const PPI_CHG0_CH15_Pos: ::cty::c_uint = 15;
pub const PPI_CHG0_CH15_Msk: ::cty::c_uint = 32768;
pub const PPI_CHG0_CH15_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG0_CH15_Included: ::cty::c_uint = 1;
pub const PPI_CHG0_CH14_Pos: ::cty::c_uint = 14;
pub const PPI_CHG0_CH14_Msk: ::cty::c_uint = 16384;
pub const PPI_CHG0_CH14_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG0_CH14_Included: ::cty::c_uint = 1;
pub const PPI_CHG0_CH13_Pos: ::cty::c_uint = 13;
pub const PPI_CHG0_CH13_Msk: ::cty::c_uint = 8192;
pub const PPI_CHG0_CH13_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG0_CH13_Included: ::cty::c_uint = 1;
pub const PPI_CHG0_CH12_Pos: ::cty::c_uint = 12;
pub const PPI_CHG0_CH12_Msk: ::cty::c_uint = 4096;
pub const PPI_CHG0_CH12_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG0_CH12_Included: ::cty::c_uint = 1;
pub const PPI_CHG0_CH11_Pos: ::cty::c_uint = 11;
pub const PPI_CHG0_CH11_Msk: ::cty::c_uint = 2048;
pub const PPI_CHG0_CH11_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG0_CH11_Included: ::cty::c_uint = 1;
pub const PPI_CHG0_CH10_Pos: ::cty::c_uint = 10;
pub const PPI_CHG0_CH10_Msk: ::cty::c_uint = 1024;
pub const PPI_CHG0_CH10_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG0_CH10_Included: ::cty::c_uint = 1;
pub const PPI_CHG0_CH9_Pos: ::cty::c_uint = 9;
pub const PPI_CHG0_CH9_Msk: ::cty::c_uint = 512;
pub const PPI_CHG0_CH9_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG0_CH9_Included: ::cty::c_uint = 1;
pub const PPI_CHG0_CH8_Pos: ::cty::c_uint = 8;
pub const PPI_CHG0_CH8_Msk: ::cty::c_uint = 256;
pub const PPI_CHG0_CH8_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG0_CH8_Included: ::cty::c_uint = 1;
pub const PPI_CHG0_CH7_Pos: ::cty::c_uint = 7;
pub const PPI_CHG0_CH7_Msk: ::cty::c_uint = 128;
pub const PPI_CHG0_CH7_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG0_CH7_Included: ::cty::c_uint = 1;
pub const PPI_CHG0_CH6_Pos: ::cty::c_uint = 6;
pub const PPI_CHG0_CH6_Msk: ::cty::c_uint = 64;
pub const PPI_CHG0_CH6_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG0_CH6_Included: ::cty::c_uint = 1;
pub const PPI_CHG0_CH5_Pos: ::cty::c_uint = 5;
pub const PPI_CHG0_CH5_Msk: ::cty::c_uint = 32;
pub const PPI_CHG0_CH5_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG0_CH5_Included: ::cty::c_uint = 1;
pub const PPI_CHG0_CH4_Pos: ::cty::c_uint = 4;
pub const PPI_CHG0_CH4_Msk: ::cty::c_uint = 16;
pub const PPI_CHG0_CH4_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG0_CH4_Included: ::cty::c_uint = 1;
pub const PPI_CHG0_CH3_Pos: ::cty::c_uint = 3;
pub const PPI_CHG0_CH3_Msk: ::cty::c_uint = 8;
pub const PPI_CHG0_CH3_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG0_CH3_Included: ::cty::c_uint = 1;
pub const PPI_CHG0_CH2_Pos: ::cty::c_uint = 2;
pub const PPI_CHG0_CH2_Msk: ::cty::c_uint = 4;
pub const PPI_CHG0_CH2_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG0_CH2_Included: ::cty::c_uint = 1;
pub const PPI_CHG0_CH1_Pos: ::cty::c_uint = 1;
pub const PPI_CHG0_CH1_Msk: ::cty::c_uint = 2;
pub const PPI_CHG0_CH1_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG0_CH1_Included: ::cty::c_uint = 1;
pub const PPI_CHG0_CH0_Pos: ::cty::c_uint = 0;
pub const PPI_CHG0_CH0_Msk: ::cty::c_uint = 1;
pub const PPI_CHG0_CH0_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG0_CH0_Included: ::cty::c_uint = 1;
pub const PPI_CHG1_CH15_Pos: ::cty::c_uint = 15;
pub const PPI_CHG1_CH15_Msk: ::cty::c_uint = 32768;
pub const PPI_CHG1_CH15_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG1_CH15_Included: ::cty::c_uint = 1;
pub const PPI_CHG1_CH14_Pos: ::cty::c_uint = 14;
pub const PPI_CHG1_CH14_Msk: ::cty::c_uint = 16384;
pub const PPI_CHG1_CH14_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG1_CH14_Included: ::cty::c_uint = 1;
pub const PPI_CHG1_CH13_Pos: ::cty::c_uint = 13;
pub const PPI_CHG1_CH13_Msk: ::cty::c_uint = 8192;
pub const PPI_CHG1_CH13_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG1_CH13_Included: ::cty::c_uint = 1;
pub const PPI_CHG1_CH12_Pos: ::cty::c_uint = 12;
pub const PPI_CHG1_CH12_Msk: ::cty::c_uint = 4096;
pub const PPI_CHG1_CH12_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG1_CH12_Included: ::cty::c_uint = 1;
pub const PPI_CHG1_CH11_Pos: ::cty::c_uint = 11;
pub const PPI_CHG1_CH11_Msk: ::cty::c_uint = 2048;
pub const PPI_CHG1_CH11_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG1_CH11_Included: ::cty::c_uint = 1;
pub const PPI_CHG1_CH10_Pos: ::cty::c_uint = 10;
pub const PPI_CHG1_CH10_Msk: ::cty::c_uint = 1024;
pub const PPI_CHG1_CH10_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG1_CH10_Included: ::cty::c_uint = 1;
pub const PPI_CHG1_CH9_Pos: ::cty::c_uint = 9;
pub const PPI_CHG1_CH9_Msk: ::cty::c_uint = 512;
pub const PPI_CHG1_CH9_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG1_CH9_Included: ::cty::c_uint = 1;
pub const PPI_CHG1_CH8_Pos: ::cty::c_uint = 8;
pub const PPI_CHG1_CH8_Msk: ::cty::c_uint = 256;
pub const PPI_CHG1_CH8_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG1_CH8_Included: ::cty::c_uint = 1;
pub const PPI_CHG1_CH7_Pos: ::cty::c_uint = 7;
pub const PPI_CHG1_CH7_Msk: ::cty::c_uint = 128;
pub const PPI_CHG1_CH7_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG1_CH7_Included: ::cty::c_uint = 1;
pub const PPI_CHG1_CH6_Pos: ::cty::c_uint = 6;
pub const PPI_CHG1_CH6_Msk: ::cty::c_uint = 64;
pub const PPI_CHG1_CH6_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG1_CH6_Included: ::cty::c_uint = 1;
pub const PPI_CHG1_CH5_Pos: ::cty::c_uint = 5;
pub const PPI_CHG1_CH5_Msk: ::cty::c_uint = 32;
pub const PPI_CHG1_CH5_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG1_CH5_Included: ::cty::c_uint = 1;
pub const PPI_CHG1_CH4_Pos: ::cty::c_uint = 4;
pub const PPI_CHG1_CH4_Msk: ::cty::c_uint = 16;
pub const PPI_CHG1_CH4_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG1_CH4_Included: ::cty::c_uint = 1;
pub const PPI_CHG1_CH3_Pos: ::cty::c_uint = 3;
pub const PPI_CHG1_CH3_Msk: ::cty::c_uint = 8;
pub const PPI_CHG1_CH3_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG1_CH3_Included: ::cty::c_uint = 1;
pub const PPI_CHG1_CH2_Pos: ::cty::c_uint = 2;
pub const PPI_CHG1_CH2_Msk: ::cty::c_uint = 4;
pub const PPI_CHG1_CH2_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG1_CH2_Included: ::cty::c_uint = 1;
pub const PPI_CHG1_CH1_Pos: ::cty::c_uint = 1;
pub const PPI_CHG1_CH1_Msk: ::cty::c_uint = 2;
pub const PPI_CHG1_CH1_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG1_CH1_Included: ::cty::c_uint = 1;
pub const PPI_CHG1_CH0_Pos: ::cty::c_uint = 0;
pub const PPI_CHG1_CH0_Msk: ::cty::c_uint = 1;
pub const PPI_CHG1_CH0_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG1_CH0_Included: ::cty::c_uint = 1;
pub const PPI_CHG2_CH15_Pos: ::cty::c_uint = 15;
pub const PPI_CHG2_CH15_Msk: ::cty::c_uint = 32768;
pub const PPI_CHG2_CH15_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG2_CH15_Included: ::cty::c_uint = 1;
pub const PPI_CHG2_CH14_Pos: ::cty::c_uint = 14;
pub const PPI_CHG2_CH14_Msk: ::cty::c_uint = 16384;
pub const PPI_CHG2_CH14_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG2_CH14_Included: ::cty::c_uint = 1;
pub const PPI_CHG2_CH13_Pos: ::cty::c_uint = 13;
pub const PPI_CHG2_CH13_Msk: ::cty::c_uint = 8192;
pub const PPI_CHG2_CH13_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG2_CH13_Included: ::cty::c_uint = 1;
pub const PPI_CHG2_CH12_Pos: ::cty::c_uint = 12;
pub const PPI_CHG2_CH12_Msk: ::cty::c_uint = 4096;
pub const PPI_CHG2_CH12_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG2_CH12_Included: ::cty::c_uint = 1;
pub const PPI_CHG2_CH11_Pos: ::cty::c_uint = 11;
pub const PPI_CHG2_CH11_Msk: ::cty::c_uint = 2048;
pub const PPI_CHG2_CH11_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG2_CH11_Included: ::cty::c_uint = 1;
pub const PPI_CHG2_CH10_Pos: ::cty::c_uint = 10;
pub const PPI_CHG2_CH10_Msk: ::cty::c_uint = 1024;
pub const PPI_CHG2_CH10_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG2_CH10_Included: ::cty::c_uint = 1;
pub const PPI_CHG2_CH9_Pos: ::cty::c_uint = 9;
pub const PPI_CHG2_CH9_Msk: ::cty::c_uint = 512;
pub const PPI_CHG2_CH9_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG2_CH9_Included: ::cty::c_uint = 1;
pub const PPI_CHG2_CH8_Pos: ::cty::c_uint = 8;
pub const PPI_CHG2_CH8_Msk: ::cty::c_uint = 256;
pub const PPI_CHG2_CH8_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG2_CH8_Included: ::cty::c_uint = 1;
pub const PPI_CHG2_CH7_Pos: ::cty::c_uint = 7;
pub const PPI_CHG2_CH7_Msk: ::cty::c_uint = 128;
pub const PPI_CHG2_CH7_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG2_CH7_Included: ::cty::c_uint = 1;
pub const PPI_CHG2_CH6_Pos: ::cty::c_uint = 6;
pub const PPI_CHG2_CH6_Msk: ::cty::c_uint = 64;
pub const PPI_CHG2_CH6_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG2_CH6_Included: ::cty::c_uint = 1;
pub const PPI_CHG2_CH5_Pos: ::cty::c_uint = 5;
pub const PPI_CHG2_CH5_Msk: ::cty::c_uint = 32;
pub const PPI_CHG2_CH5_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG2_CH5_Included: ::cty::c_uint = 1;
pub const PPI_CHG2_CH4_Pos: ::cty::c_uint = 4;
pub const PPI_CHG2_CH4_Msk: ::cty::c_uint = 16;
pub const PPI_CHG2_CH4_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG2_CH4_Included: ::cty::c_uint = 1;
pub const PPI_CHG2_CH3_Pos: ::cty::c_uint = 3;
pub const PPI_CHG2_CH3_Msk: ::cty::c_uint = 8;
pub const PPI_CHG2_CH3_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG2_CH3_Included: ::cty::c_uint = 1;
pub const PPI_CHG2_CH2_Pos: ::cty::c_uint = 2;
pub const PPI_CHG2_CH2_Msk: ::cty::c_uint = 4;
pub const PPI_CHG2_CH2_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG2_CH2_Included: ::cty::c_uint = 1;
pub const PPI_CHG2_CH1_Pos: ::cty::c_uint = 1;
pub const PPI_CHG2_CH1_Msk: ::cty::c_uint = 2;
pub const PPI_CHG2_CH1_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG2_CH1_Included: ::cty::c_uint = 1;
pub const PPI_CHG2_CH0_Pos: ::cty::c_uint = 0;
pub const PPI_CHG2_CH0_Msk: ::cty::c_uint = 1;
pub const PPI_CHG2_CH0_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG2_CH0_Included: ::cty::c_uint = 1;
pub const PPI_CHG3_CH15_Pos: ::cty::c_uint = 15;
pub const PPI_CHG3_CH15_Msk: ::cty::c_uint = 32768;
pub const PPI_CHG3_CH15_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG3_CH15_Included: ::cty::c_uint = 1;
pub const PPI_CHG3_CH14_Pos: ::cty::c_uint = 14;
pub const PPI_CHG3_CH14_Msk: ::cty::c_uint = 16384;
pub const PPI_CHG3_CH14_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG3_CH14_Included: ::cty::c_uint = 1;
pub const PPI_CHG3_CH13_Pos: ::cty::c_uint = 13;
pub const PPI_CHG3_CH13_Msk: ::cty::c_uint = 8192;
pub const PPI_CHG3_CH13_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG3_CH13_Included: ::cty::c_uint = 1;
pub const PPI_CHG3_CH12_Pos: ::cty::c_uint = 12;
pub const PPI_CHG3_CH12_Msk: ::cty::c_uint = 4096;
pub const PPI_CHG3_CH12_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG3_CH12_Included: ::cty::c_uint = 1;
pub const PPI_CHG3_CH11_Pos: ::cty::c_uint = 11;
pub const PPI_CHG3_CH11_Msk: ::cty::c_uint = 2048;
pub const PPI_CHG3_CH11_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG3_CH11_Included: ::cty::c_uint = 1;
pub const PPI_CHG3_CH10_Pos: ::cty::c_uint = 10;
pub const PPI_CHG3_CH10_Msk: ::cty::c_uint = 1024;
pub const PPI_CHG3_CH10_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG3_CH10_Included: ::cty::c_uint = 1;
pub const PPI_CHG3_CH9_Pos: ::cty::c_uint = 9;
pub const PPI_CHG3_CH9_Msk: ::cty::c_uint = 512;
pub const PPI_CHG3_CH9_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG3_CH9_Included: ::cty::c_uint = 1;
pub const PPI_CHG3_CH8_Pos: ::cty::c_uint = 8;
pub const PPI_CHG3_CH8_Msk: ::cty::c_uint = 256;
pub const PPI_CHG3_CH8_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG3_CH8_Included: ::cty::c_uint = 1;
pub const PPI_CHG3_CH7_Pos: ::cty::c_uint = 7;
pub const PPI_CHG3_CH7_Msk: ::cty::c_uint = 128;
pub const PPI_CHG3_CH7_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG3_CH7_Included: ::cty::c_uint = 1;
pub const PPI_CHG3_CH6_Pos: ::cty::c_uint = 6;
pub const PPI_CHG3_CH6_Msk: ::cty::c_uint = 64;
pub const PPI_CHG3_CH6_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG3_CH6_Included: ::cty::c_uint = 1;
pub const PPI_CHG3_CH5_Pos: ::cty::c_uint = 5;
pub const PPI_CHG3_CH5_Msk: ::cty::c_uint = 32;
pub const PPI_CHG3_CH5_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG3_CH5_Included: ::cty::c_uint = 1;
pub const PPI_CHG3_CH4_Pos: ::cty::c_uint = 4;
pub const PPI_CHG3_CH4_Msk: ::cty::c_uint = 16;
pub const PPI_CHG3_CH4_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG3_CH4_Included: ::cty::c_uint = 1;
pub const PPI_CHG3_CH3_Pos: ::cty::c_uint = 3;
pub const PPI_CHG3_CH3_Msk: ::cty::c_uint = 8;
pub const PPI_CHG3_CH3_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG3_CH3_Included: ::cty::c_uint = 1;
pub const PPI_CHG3_CH2_Pos: ::cty::c_uint = 2;
pub const PPI_CHG3_CH2_Msk: ::cty::c_uint = 4;
pub const PPI_CHG3_CH2_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG3_CH2_Included: ::cty::c_uint = 1;
pub const PPI_CHG3_CH1_Pos: ::cty::c_uint = 1;
pub const PPI_CHG3_CH1_Msk: ::cty::c_uint = 2;
pub const PPI_CHG3_CH1_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG3_CH1_Included: ::cty::c_uint = 1;
pub const PPI_CHG3_CH0_Pos: ::cty::c_uint = 0;
pub const PPI_CHG3_CH0_Msk: ::cty::c_uint = 1;
pub const PPI_CHG3_CH0_Excluded: ::cty::c_uint = 0;
pub const PPI_CHG3_CH0_Included: ::cty::c_uint = 1;
pub const NRF_ERROR_BASE_NUM: ::cty::c_uint = 0;
pub const NRF_ERROR_SDM_BASE_NUM: ::cty::c_uint = 4096;
pub const NRF_ERROR_SOC_BASE_NUM: ::cty::c_uint = 8192;
pub const NRF_ERROR_STK_BASE_NUM: ::cty::c_uint = 12288;
pub const NRF_SUCCESS: ::cty::c_uint = 0;
pub const NRF_ERROR_SVC_HANDLER_MISSING: ::cty::c_uint = 1;
pub const NRF_ERROR_SOFTDEVICE_NOT_ENABLED: ::cty::c_uint = 2;
pub const NRF_ERROR_INTERNAL: ::cty::c_uint = 3;
pub const NRF_ERROR_NO_MEM: ::cty::c_uint = 4;
pub const NRF_ERROR_NOT_FOUND: ::cty::c_uint = 5;
pub const NRF_ERROR_NOT_SUPPORTED: ::cty::c_uint = 6;
pub const NRF_ERROR_INVALID_PARAM: ::cty::c_uint = 7;
pub const NRF_ERROR_INVALID_STATE: ::cty::c_uint = 8;
pub const NRF_ERROR_INVALID_LENGTH: ::cty::c_uint = 9;
pub const NRF_ERROR_INVALID_FLAGS: ::cty::c_uint = 10;
pub const NRF_ERROR_INVALID_DATA: ::cty::c_uint = 11;
pub const NRF_ERROR_DATA_SIZE: ::cty::c_uint = 12;
pub const NRF_ERROR_TIMEOUT: ::cty::c_uint = 13;
pub const NRF_ERROR_NULL: ::cty::c_uint = 14;
pub const NRF_ERROR_FORBIDDEN: ::cty::c_uint = 15;
pub const NRF_ERROR_INVALID_ADDR: ::cty::c_uint = 16;
pub const NRF_ERROR_BUSY: ::cty::c_uint = 17;
pub const NRF_ERROR_CONN_COUNT: ::cty::c_uint = 18;
pub const NRF_ERROR_RESOURCES: ::cty::c_uint = 19;
pub const NRF_ERROR_SDK_ERROR_BASE: ::cty::c_uint = 32768;
pub const NRF_ERROR_SDK_COMMON_ERROR_BASE: ::cty::c_uint = 128;
pub const NRF_ERROR_MEMORY_MANAGER_ERR_BASE: ::cty::c_uint = 33024;
pub const NRF_ERROR_PERIPH_DRIVERS_ERR_BASE: ::cty::c_uint = 33280;
pub const NRF_ERROR_GAZELLE_ERR_BASE: ::cty::c_uint = 33536;
pub const NRF_ERROR_IOT_ERR_BASE_START: ::cty::c_uint = 40960;
pub const NRF_ERROR_IOT_ERR_BASE_STOP: ::cty::c_uint = 45055;
pub const NRF_ERROR_MODULE_NOT_INITIALZED: ::cty::c_uint = 128;
pub const NRF_ERROR_MUTEX_INIT_FAILED: ::cty::c_uint = 129;
pub const NRF_ERROR_MUTEX_LOCK_FAILED: ::cty::c_uint = 130;
pub const NRF_ERROR_MUTEX_UNLOCK_FAILED: ::cty::c_uint = 131;
pub const NRF_ERROR_MUTEX_COND_INIT_FAILED: ::cty::c_uint = 132;
pub const NRF_ERROR_MODULE_ALREADY_INITIALIZED: ::cty::c_uint = 133;
pub const NRF_ERROR_STORAGE_FULL: ::cty::c_uint = 134;
pub const NRF_ERROR_API_NOT_IMPLEMENTED: ::cty::c_uint = 144;
pub const NRF_ERROR_FEATURE_NOT_ENABLED: ::cty::c_uint = 145;
pub const NRF_ERROR_DRV_TWI_ERR_OVERRUN: ::cty::c_uint = 33280;
pub const NRF_ERROR_DRV_TWI_ERR_ANACK: ::cty::c_uint = 33281;
pub const NRF_ERROR_DRV_TWI_ERR_DNACK: ::cty::c_uint = 33282;
pub const BIT_0: ::cty::c_uint = 1;
pub const BIT_1: ::cty::c_uint = 2;
pub const BIT_2: ::cty::c_uint = 4;
pub const BIT_3: ::cty::c_uint = 8;
pub const BIT_4: ::cty::c_uint = 16;
pub const BIT_5: ::cty::c_uint = 32;
pub const BIT_6: ::cty::c_uint = 64;
pub const BIT_7: ::cty::c_uint = 128;
pub const BIT_8: ::cty::c_uint = 256;
pub const BIT_9: ::cty::c_uint = 512;
pub const BIT_10: ::cty::c_uint = 1024;
pub const BIT_11: ::cty::c_uint = 2048;
pub const BIT_12: ::cty::c_uint = 4096;
pub const BIT_13: ::cty::c_uint = 8192;
pub const BIT_14: ::cty::c_uint = 16384;
pub const BIT_15: ::cty::c_uint = 32768;
pub const BIT_16: ::cty::c_uint = 65536;
pub const BIT_17: ::cty::c_uint = 131072;
pub const BIT_18: ::cty::c_uint = 262144;
pub const BIT_19: ::cty::c_uint = 524288;
pub const BIT_20: ::cty::c_uint = 1048576;
pub const BIT_21: ::cty::c_uint = 2097152;
pub const BIT_22: ::cty::c_uint = 4194304;
pub const BIT_23: ::cty::c_uint = 8388608;
pub const BIT_24: ::cty::c_uint = 16777216;
pub const BIT_25: ::cty::c_uint = 33554432;
pub const BIT_26: ::cty::c_uint = 67108864;
pub const BIT_27: ::cty::c_uint = 134217728;
pub const BIT_28: ::cty::c_uint = 268435456;
pub const BIT_29: ::cty::c_uint = 536870912;
pub const BIT_30: ::cty::c_uint = 1073741824;
pub const BIT_31: ::cty::c_uint = 2147483648;
pub const NRF_FAULT_ID_SDK_RANGE_START: ::cty::c_uint = 16384;
pub const NRF_FAULT_ID_SDK_ERROR: ::cty::c_uint = 16385;
pub const NRF_FAULT_ID_SDK_ASSERT: ::cty::c_uint = 16386;
pub const BYTES_PER_WORD: ::cty::c_uint = 4;
pub const BF_CX_BCNT_POS: ::cty::c_uint = 0;
pub const BF_CX_BCNT_MASK: ::cty::c_uint = 255;
pub const BF_CX_BOFF_POS: ::cty::c_uint = 8;
pub const BF_CX_BOFF_MASK: ::cty::c_uint = 65280;
pub const APP_TIMER_CLOCK_FREQ: ::cty::c_uint = 32768;
pub const APP_TIMER_MIN_TIMEOUT_TICKS: ::cty::c_uint = 5;
pub const APP_TIMER_NODE_SIZE: ::cty::c_uint = 32;
pub const APP_TIMER_USER_OP_SIZE: ::cty::c_uint = 24;
pub const NRF_ERROR_SOC_MUTEX_ALREADY_TAKEN: ::cty::c_uint = 8192;
pub const NRF_ERROR_SOC_NVIC_INTERRUPT_NOT_AVAILABLE: ::cty::c_uint = 8193;
pub const NRF_ERROR_SOC_NVIC_INTERRUPT_PRIORITY_NOT_ALLOWED: ::cty::c_uint =
    8194;
pub const NRF_ERROR_SOC_NVIC_SHOULD_NOT_RETURN: ::cty::c_uint = 8195;
pub const NRF_ERROR_SOC_POWER_MODE_UNKNOWN: ::cty::c_uint = 8196;
pub const NRF_ERROR_SOC_POWER_POF_THRESHOLD_UNKNOWN: ::cty::c_uint = 8197;
pub const NRF_ERROR_SOC_POWER_OFF_SHOULD_NOT_RETURN: ::cty::c_uint = 8198;
pub const NRF_ERROR_SOC_RAND_NOT_ENOUGH_VALUES: ::cty::c_uint = 8199;
pub const NRF_ERROR_SOC_PPI_INVALID_CHANNEL: ::cty::c_uint = 8200;
pub const NRF_ERROR_SOC_PPI_INVALID_GROUP: ::cty::c_uint = 8201;
pub const SOC_SVC_BASE: ::cty::c_uint = 32;
pub const SOC_SVC_BASE_NOT_AVAILABLE: ::cty::c_uint = 43;
pub const NRF_RADIO_NOTIFICATION_INACTIVE_GUARANTEED_TIME_US: ::cty::c_uint =
    62;
pub const NRF_RADIO_MINIMUM_TIMESLOT_LENGTH_EXTENSION_TIME_US: ::cty::c_uint =
    200;
pub const SOC_ECB_KEY_LENGTH: ::cty::c_uint = 16;
pub const SOC_ECB_CLEARTEXT_LENGTH: ::cty::c_uint = 16;
pub const SOC_ECB_CIPHERTEXT_LENGTH: ::cty::c_uint = 16;
pub const NRF_RADIO_LENGTH_MIN_US: ::cty::c_uint = 100;
pub const NRF_RADIO_LENGTH_MAX_US: ::cty::c_uint = 100000;
pub const NRF_RADIO_DISTANCE_MAX_US: ::cty::c_uint = 127999999;
pub const NRF_RADIO_EARLIEST_TIMEOUT_MAX_US: ::cty::c_uint = 127999999;
pub const NRF_RADIO_START_JITTER_US: ::cty::c_uint = 2;
pub const __NRF_NVIC_NVMC_IRQn: ::cty::c_uint = 30;
pub const __NRF_NVIC_ISER_COUNT: ::cty::c_uint = 1;
pub const NRF_ASSERT_PRESENT: ::cty::c_uint = 0;
pub const _PRIO_SD_HIGH: ::cty::c_uint = 0;
pub const _PRIO_APP_HIGH: ::cty::c_uint = 1;
pub const _PRIO_APP_MID: ::cty::c_uint = 1;
pub const _PRIO_SD_LOW: ::cty::c_uint = 2;
pub const _PRIO_APP_LOW: ::cty::c_uint = 3;
pub const _PRIO_APP_LOWEST: ::cty::c_uint = 3;
pub const _PRIO_THREAD: ::cty::c_uint = 4;
pub const EXTERNAL_INT_VECTOR_OFFSET: ::cty::c_uint = 16;
pub const CONTROL_nPRIV_Msk: ::cty::c_uint = 1;
pub const UART_PIN_DISCONNECTED: ::cty::c_uint = 4294967295;
pub const SWI_COUNT: ::cty::c_uint = 6;
pub const GPIO_COUNT: ::cty::c_uint = 1;
pub const P0_PIN_NUM: ::cty::c_uint = 32;
pub const BPROT_REGIONS_SIZE: ::cty::c_uint = 4096;
pub const BPROT_REGIONS_NUM: ::cty::c_uint = 64;
pub const RADIO_COUNT: ::cty::c_uint = 1;
pub const AAR_COUNT: ::cty::c_uint = 1;
pub const AAR_MAX_IRK_NUM: ::cty::c_uint = 8;
pub const ECB_COUNT: ::cty::c_uint = 1;
pub const CCM_COUNT: ::cty::c_uint = 1;
pub const PPI_COUNT: ::cty::c_uint = 1;
pub const PPI_CH_NUM: ::cty::c_uint = 16;
pub const PPI_GROUP_NUM: ::cty::c_uint = 4;
pub const TIMER_COUNT: ::cty::c_uint = 3;
pub const TIMER0_MAX_SIZE: ::cty::c_uint = 32;
pub const TIMER1_MAX_SIZE: ::cty::c_uint = 16;
pub const TIMER2_MAX_SIZE: ::cty::c_uint = 16;
pub const TIMER0_CC_NUM: ::cty::c_uint = 4;
pub const TIMER1_CC_NUM: ::cty::c_uint = 4;
pub const TIMER2_CC_NUM: ::cty::c_uint = 4;
pub const RTC_COUNT: ::cty::c_uint = 2;
pub const RTC0_CC_NUM: ::cty::c_uint = 3;
pub const RTC1_CC_NUM: ::cty::c_uint = 4;
pub const RNG_COUNT: ::cty::c_uint = 1;
pub const WDT_COUNT: ::cty::c_uint = 1;
pub const TEMP_COUNT: ::cty::c_uint = 1;
pub const SPI_COUNT: ::cty::c_uint = 2;
pub const SPIS_COUNT: ::cty::c_uint = 1;
pub const TWI_COUNT: ::cty::c_uint = 2;
pub const UART_COUNT: ::cty::c_uint = 1;
pub const QDEC_COUNT: ::cty::c_uint = 1;
pub const ADC_COUNT: ::cty::c_uint = 1;
pub const GPIOTE_COUNT: ::cty::c_uint = 1;
pub const GPIOTE_CH_NUM: ::cty::c_uint = 4;
pub const LPCOMP_COUNT: ::cty::c_uint = 1;
pub const LPCOMP_REFSEL_RESOLUTION: ::cty::c_uint = 8;
pub const _STDLIB_H: ::cty::c_uint = 1;
pub const WNOHANG: ::cty::c_uint = 1;
pub const WUNTRACED: ::cty::c_uint = 2;
pub const WSTOPPED: ::cty::c_uint = 2;
pub const WEXITED: ::cty::c_uint = 4;
pub const WCONTINUED: ::cty::c_uint = 8;
pub const WNOWAIT: ::cty::c_uint = 16777216;
pub const __WNOTHREAD: ::cty::c_uint = 536870912;
pub const __WALL: ::cty::c_uint = 1073741824;
pub const __WCLONE: ::cty::c_uint = 2147483648;
pub const __W_CONTINUED: ::cty::c_uint = 65535;
pub const __WCOREFLAG: ::cty::c_uint = 128;
pub const __ldiv_t_defined: ::cty::c_uint = 1;
pub const __lldiv_t_defined: ::cty::c_uint = 1;
pub const RAND_MAX: ::cty::c_uint = 2147483647;
pub const EXIT_FAILURE: ::cty::c_uint = 1;
pub const EXIT_SUCCESS: ::cty::c_uint = 0;
pub const _SYS_TYPES_H: ::cty::c_uint = 1;
pub const __clock_t_defined: ::cty::c_uint = 1;
pub const __clockid_t_defined: ::cty::c_uint = 1;
pub const __time_t_defined: ::cty::c_uint = 1;
pub const __timer_t_defined: ::cty::c_uint = 1;
pub const __BIT_TYPES_DEFINED__: ::cty::c_uint = 1;
pub const _ENDIAN_H: ::cty::c_uint = 1;
pub const __LITTLE_ENDIAN: ::cty::c_uint = 1234;
pub const __BIG_ENDIAN: ::cty::c_uint = 4321;
pub const __PDP_ENDIAN: ::cty::c_uint = 3412;
pub const __BYTE_ORDER: ::cty::c_uint = 1234;
pub const __FLOAT_WORD_ORDER: ::cty::c_uint = 1234;
pub const LITTLE_ENDIAN: ::cty::c_uint = 1234;
pub const BIG_ENDIAN: ::cty::c_uint = 4321;
pub const PDP_ENDIAN: ::cty::c_uint = 3412;
pub const BYTE_ORDER: ::cty::c_uint = 1234;
pub const _BITS_BYTESWAP_H: ::cty::c_uint = 1;
pub const _BITS_UINTN_IDENTITY_H: ::cty::c_uint = 1;
pub const _SYS_SELECT_H: ::cty::c_uint = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosl\x00";
pub const _SIGSET_H_types: ::cty::c_uint = 1;
pub const __timeval_defined: ::cty::c_uint = 1;
pub const __timespec_defined: ::cty::c_uint = 1;
pub const FD_SETSIZE: ::cty::c_uint = 1024;
pub const _SYS_SYSMACROS_H: ::cty::c_uint = 1;
pub const _BITS_SYSMACROS_H: ::cty::c_uint = 1;
pub const _BITS_PTHREADTYPES_H: ::cty::c_uint = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: ::cty::c_uint = 36;
pub const __SIZEOF_PTHREAD_MUTEX_T: ::cty::c_uint = 24;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: ::cty::c_uint = 4;
pub const __SIZEOF_PTHREAD_COND_T: ::cty::c_uint = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: ::cty::c_uint = 4;
pub const __SIZEOF_PTHREAD_RWLOCK_T: ::cty::c_uint = 32;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: ::cty::c_uint = 8;
pub const __SIZEOF_PTHREAD_BARRIER_T: ::cty::c_uint = 20;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: ::cty::c_uint = 4;
pub const __have_pthread_attr_t: ::cty::c_uint = 1;
pub const __PTHREAD_RWLOCK_ELISION_EXTRA: ::cty::c_uint = 0;
pub const _ALLOCA_H: ::cty::c_uint = 1;
pub const NUMBER_OF_PINS: ::cty::c_uint = 32;
pub const LED_START: ::cty::c_uint = 18;
pub const LED_1: ::cty::c_uint = 18;
pub const LED_2: ::cty::c_uint = 19;
pub const LED_3: ::cty::c_uint = 20;
pub const LED_4: ::cty::c_uint = 21;
pub const LED_5: ::cty::c_uint = 22;
pub const LED_STOP: ::cty::c_uint = 22;
pub const LEDS_ACTIVE_STATE: ::cty::c_uint = 1;
pub const LEDS_NUMBER: ::cty::c_uint = 5;
pub const RX_PIN_NUMBER: ::cty::c_uint = 5;
pub const TX_PIN_NUMBER: ::cty::c_uint = 6;
pub const CTS_PIN_NUMBER: ::cty::c_uint = 7;
pub const RTS_PIN_NUMBER: ::cty::c_uint = 12;
pub const HWFC: ::cty::c_uint = 1;
pub const BSP_BOARD_LED_0: ::cty::c_uint = 0;
pub const BSP_BOARD_LED_1: ::cty::c_uint = 1;
pub const BSP_BOARD_LED_2: ::cty::c_uint = 2;
pub const BSP_BOARD_LED_3: ::cty::c_uint = 3;
pub const BSP_BOARD_LED_4: ::cty::c_uint = 4;
pub const BSP_BOARD_LED_5: ::cty::c_uint = 5;
pub const BSP_BOARD_LED_6: ::cty::c_uint = 6;
pub const BSP_BOARD_LED_7: ::cty::c_uint = 7;
pub const BSP_LED_0_MASK: ::cty::c_uint = 0;
pub const BSP_LED_1_MASK: ::cty::c_uint = 0;
pub const BSP_LED_2_MASK: ::cty::c_uint = 0;
pub const BSP_LED_3_MASK: ::cty::c_uint = 0;
pub const BSP_LED_4_MASK: ::cty::c_uint = 0;
pub const BSP_LED_5_MASK: ::cty::c_uint = 0;
pub const BSP_LED_6_MASK: ::cty::c_uint = 0;
pub const BSP_LED_7_MASK: ::cty::c_uint = 0;
pub const LEDS_MASK: ::cty::c_uint = 0;
pub const BSP_BOARD_BUTTON_0: ::cty::c_uint = 0;
pub const BSP_BOARD_BUTTON_1: ::cty::c_uint = 1;
pub const BSP_BOARD_BUTTON_2: ::cty::c_uint = 2;
pub const BSP_BOARD_BUTTON_3: ::cty::c_uint = 3;
pub const BSP_BOARD_BUTTON_4: ::cty::c_uint = 4;
pub const BSP_BOARD_BUTTON_5: ::cty::c_uint = 5;
pub const BSP_BOARD_BUTTON_6: ::cty::c_uint = 6;
pub const BSP_BOARD_BUTTON_7: ::cty::c_uint = 7;
pub const BSP_BUTTON_0_MASK: ::cty::c_uint = 0;
pub const BSP_BUTTON_1_MASK: ::cty::c_uint = 0;
pub const BSP_BUTTON_2_MASK: ::cty::c_uint = 0;
pub const BSP_BUTTON_3_MASK: ::cty::c_uint = 0;
pub const BSP_BUTTON_4_MASK: ::cty::c_uint = 0;
pub const BSP_BUTTON_5_MASK: ::cty::c_uint = 0;
pub const BSP_BUTTON_6_MASK: ::cty::c_uint = 0;
pub const BSP_BUTTON_7_MASK: ::cty::c_uint = 0;
pub const BUTTONS_MASK: ::cty::c_uint = 0;
pub type __u_char = ::cty::c_uchar;
pub type __u_short = ::cty::c_ushort;
pub type __u_int = ::cty::c_uint;
pub type __u_long = ::cty::c_ulong;
pub type __int8_t = ::cty::c_schar;
pub type __uint8_t = ::cty::c_uchar;
pub type __int16_t = ::cty::c_short;
pub type __uint16_t = ::cty::c_ushort;
pub type __int32_t = ::cty::c_int;
pub type __uint32_t = ::cty::c_uint;
pub type __int64_t = ::cty::c_longlong;
pub type __uint64_t = ::cty::c_ulonglong;
pub type __quad_t = ::cty::c_longlong;
pub type __u_quad_t = ::cty::c_ulonglong;
pub type __intmax_t = ::cty::c_longlong;
pub type __uintmax_t = ::cty::c_ulonglong;
pub type __dev_t = __u_quad_t;
pub type __uid_t = ::cty::c_uint;
pub type __gid_t = ::cty::c_uint;
pub type __ino_t = ::cty::c_ulong;
pub type __ino64_t = __u_quad_t;
pub type __mode_t = ::cty::c_uint;
pub type __nlink_t = ::cty::c_uint;
pub type __off_t = ::cty::c_long;
pub type __off64_t = __quad_t;
pub type __pid_t = ::cty::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __fsid_t {
    pub __val: [::cty::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(::core::mem::size_of::<__fsid_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( __fsid_t ) ));
    assert_eq! (::core::mem::align_of::<__fsid_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( __fsid_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __fsid_t ) ) . __val as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __fsid_t ) , "::" ,
                stringify ! ( __val ) ));
}
impl Clone for __fsid_t {
    fn clone(&self) -> Self { *self }
}
pub type __clock_t = ::cty::c_long;
pub type __rlim_t = ::cty::c_ulong;
pub type __rlim64_t = __u_quad_t;
pub type __id_t = ::cty::c_uint;
pub type __time_t = ::cty::c_long;
pub type __useconds_t = ::cty::c_uint;
pub type __suseconds_t = ::cty::c_long;
pub type __daddr_t = ::cty::c_int;
pub type __key_t = ::cty::c_int;
pub type __clockid_t = ::cty::c_int;
pub type __timer_t = *mut ::cty::c_void;
pub type __blksize_t = ::cty::c_long;
pub type __blkcnt_t = ::cty::c_long;
pub type __blkcnt64_t = __quad_t;
pub type __fsblkcnt_t = ::cty::c_ulong;
pub type __fsblkcnt64_t = __u_quad_t;
pub type __fsfilcnt_t = ::cty::c_ulong;
pub type __fsfilcnt64_t = __u_quad_t;
pub type __fsword_t = ::cty::c_int;
pub type __ssize_t = ::cty::c_int;
pub type __syscall_slong_t = ::cty::c_long;
pub type __syscall_ulong_t = ::cty::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::cty::c_char;
pub type __intptr_t = ::cty::c_int;
pub type __socklen_t = ::cty::c_uint;
pub type int_least8_t = ::cty::c_schar;
pub type int_least16_t = ::cty::c_short;
pub type int_least32_t = ::cty::c_int;
pub type int_least64_t = ::cty::c_longlong;
pub type uint_least8_t = ::cty::c_uchar;
pub type uint_least16_t = ::cty::c_ushort;
pub type uint_least32_t = ::cty::c_uint;
pub type uint_least64_t = ::cty::c_ulonglong;
pub type int_fast8_t = ::cty::c_schar;
pub type int_fast16_t = ::cty::c_int;
pub type int_fast32_t = ::cty::c_int;
pub type int_fast64_t = ::cty::c_longlong;
pub type uint_fast8_t = ::cty::c_uchar;
pub type uint_fast16_t = ::cty::c_uint;
pub type uint_fast32_t = ::cty::c_uint;
pub type uint_fast64_t = ::cty::c_ulonglong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
pub struct _IO_FILE {
    pub _flags: ::cty::c_int,
    pub _IO_read_ptr: *mut ::cty::c_char,
    pub _IO_read_end: *mut ::cty::c_char,
    pub _IO_read_base: *mut ::cty::c_char,
    pub _IO_write_base: *mut ::cty::c_char,
    pub _IO_write_ptr: *mut ::cty::c_char,
    pub _IO_write_end: *mut ::cty::c_char,
    pub _IO_buf_base: *mut ::cty::c_char,
    pub _IO_buf_end: *mut ::cty::c_char,
    pub _IO_save_base: *mut ::cty::c_char,
    pub _IO_backup_base: *mut ::cty::c_char,
    pub _IO_save_end: *mut ::cty::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::cty::c_int,
    pub _flags2: ::cty::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::cty::c_ushort,
    pub _vtable_offset: ::cty::c_schar,
    pub _shortbuf: [::cty::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::cty::c_void,
    pub __pad2: *mut ::cty::c_void,
    pub __pad3: *mut ::cty::c_void,
    pub __pad4: *mut ::cty::c_void,
    pub __pad5: usize,
    pub _mode: ::cty::c_int,
    pub _unused2: [::cty::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(::core::mem::size_of::<_IO_FILE>() , 152usize , concat ! (
               "Size of: " , stringify ! ( _IO_FILE ) ));
    assert_eq! (::core::mem::align_of::<_IO_FILE>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _IO_FILE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _flags as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_ptr as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_read_ptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_end as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_read_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_base as * const _
                as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_read_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_base as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_write_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_ptr as * const _
                as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_write_ptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_end as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_write_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_buf_base as * const _
                as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_buf_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_buf_end as * const _
                as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_buf_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_save_base as * const _
                as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_save_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_backup_base as * const
                _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_backup_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_save_end as * const _
                as usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_save_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _markers as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _markers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _chain as * const _ as
                usize } , 52usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _chain ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _fileno as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _fileno ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _flags2 as * const _ as
                usize } , 60usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _flags2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _old_offset as * const _
                as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _old_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _cur_column as * const _
                as usize } , 68usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _cur_column ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _vtable_offset as * const
                _ as usize } , 70usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _vtable_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _shortbuf as * const _ as
                usize } , 71usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _shortbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _lock as * const _ as
                usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _lock ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _offset as * const _ as
                usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad1 as * const _ as
                usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad2 as * const _ as
                usize } , 92usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad3 as * const _ as
                usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad4 as * const _ as
                usize } , 100usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad5 as * const _ as
                usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _mode as * const _ as
                usize } , 108usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _mode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _unused2 as * const _ as
                usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _unused2 ) ));
}
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy)]
pub struct __mbstate_t {
    pub __count: ::cty::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::cty::c_int,
    pub __wchb: [::cty::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(::core::mem::size_of::<__mbstate_t__bindgen_ty_1>() , 4usize ,
               concat ! (
               "Size of: " , stringify ! ( __mbstate_t__bindgen_ty_1 ) ));
    assert_eq! (::core::mem::align_of::<__mbstate_t__bindgen_ty_1>() , 4usize
                , concat ! (
                "Alignment of " , stringify ! ( __mbstate_t__bindgen_ty_1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t__bindgen_ty_1 ) ) . __wch as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __mbstate_t__bindgen_ty_1 ) , "::" , stringify ! ( __wch ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t__bindgen_ty_1 ) ) . __wchb as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __mbstate_t__bindgen_ty_1 ) , "::" , stringify ! ( __wchb )
                ));
}
impl Clone for __mbstate_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(::core::mem::size_of::<__mbstate_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( __mbstate_t ) ));
    assert_eq! (::core::mem::align_of::<__mbstate_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( __mbstate_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . __count as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( __count ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . __value as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( __value ) ));
}
impl Clone for __mbstate_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(::core::mem::size_of::<_G_fpos_t>() , 12usize , concat ! (
               "Size of: " , stringify ! ( _G_fpos_t ) ));
    assert_eq! (::core::mem::align_of::<_G_fpos_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( _G_fpos_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _G_fpos_t ) ) . __pos as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _G_fpos_t ) , "::" ,
                stringify ! ( __pos ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _G_fpos_t ) ) . __state as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _G_fpos_t ) , "::" ,
                stringify ! ( __state ) ));
}
impl Clone for _G_fpos_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(::core::mem::size_of::<_G_fpos64_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _G_fpos64_t ) ));
    assert_eq! (::core::mem::align_of::<_G_fpos64_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _G_fpos64_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _G_fpos64_t ) ) . __pos as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _G_fpos64_t ) , "::" ,
                stringify ! ( __pos ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _G_fpos64_t ) ) . __state as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _G_fpos64_t ) , "::" ,
                stringify ! ( __state ) ));
}
impl Clone for _G_fpos64_t {
    fn clone(&self) -> Self { *self }
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::cty::c_void;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::cty::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(::core::mem::size_of::<_IO_marker>() , 12usize , concat ! (
               "Size of: " , stringify ! ( _IO_marker ) ));
    assert_eq! (::core::mem::align_of::<_IO_marker>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( _IO_marker ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_marker ) ) . _next as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_marker ) , "::" ,
                stringify ! ( _next ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_marker ) ) . _sbuf as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_marker ) , "::" ,
                stringify ! ( _sbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_marker ) ) . _pos as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_marker ) , "::" ,
                stringify ! ( _pos ) ));
}
impl Clone for _IO_marker {
    fn clone(&self) -> Self { *self }
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "_IO_2_1_stdin_"]
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "_IO_2_1_stdout_"]
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "_IO_2_1_stderr_"]
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn =
    ::core::option::Option<unsafe extern "C" fn(__cookie: *mut ::cty::c_void,
                                                __buf: *mut ::cty::c_char,
                                                __nbytes: usize)
                               -> __ssize_t>;
pub type __io_write_fn =
    ::core::option::Option<unsafe extern "C" fn(__cookie: *mut ::cty::c_void,
                                                __buf: *const ::cty::c_char,
                                                __n: usize) -> __ssize_t>;
pub type __io_seek_fn =
    ::core::option::Option<unsafe extern "C" fn(__cookie: *mut ::cty::c_void,
                                                __pos: *mut __off64_t,
                                                __w: ::cty::c_int)
                               -> ::cty::c_int>;
pub type __io_close_fn =
    ::core::option::Option<unsafe extern "C" fn(__cookie: *mut ::cty::c_void)
                               -> ::cty::c_int>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::cty::c_int)
     -> ::cty::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::cty::c_int, __fp: *mut _IO_FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE, arg2: *const ::cty::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::cty::c_int)
     -> ::cty::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE, arg2: *const ::cty::c_char,
                        arg3: __gnuc_va_list) -> ::cty::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::cty::c_int, arg3: __ssize_t)
     -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::cty::c_void,
                     arg3: usize) -> usize;
}
extern "C" {
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::cty::c_int, arg4: ::cty::c_int) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::cty::c_int) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type off_t = __off_t;
pub type fpos_t = _G_fpos_t;
extern "C" {
    #[link_name = "stdin"]
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "stdout"]
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "stderr"]
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::cty::c_char) -> ::cty::c_int;
}
extern "C" {
    pub fn rename(__old: *const ::cty::c_char, __new: *const ::cty::c_char)
     -> ::cty::c_int;
}
extern "C" {
    pub fn renameat(__oldfd: ::cty::c_int, __old: *const ::cty::c_char,
                    __newfd: ::cty::c_int, __new: *const ::cty::c_char)
     -> ::cty::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::cty::c_char) -> *mut ::cty::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::cty::c_char) -> *mut ::cty::c_char;
}
extern "C" {
    pub fn tempnam(__dir: *const ::cty::c_char, __pfx: *const ::cty::c_char)
     -> *mut ::cty::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn fopen(__filename: *const ::cty::c_char,
                 __modes: *const ::cty::c_char) -> *mut FILE;
}
extern "C" {
    pub fn freopen(__filename: *const ::cty::c_char,
                   __modes: *const ::cty::c_char, __stream: *mut FILE)
     -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::cty::c_int, __modes: *const ::cty::c_char)
     -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(__s: *mut ::cty::c_void, __len: usize,
                    __modes: *const ::cty::c_char) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(__bufloc: *mut *mut ::cty::c_char,
                          __sizeloc: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::cty::c_char);
}
extern "C" {
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::cty::c_char,
                   __modes: ::cty::c_int, __n: usize) -> ::cty::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::cty::c_char,
                     __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(__stream: *mut FILE, __format: *const ::cty::c_char, ...)
     -> ::cty::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::cty::c_char, ...) -> ::cty::c_int;
}
extern "C" {
    pub fn sprintf(__s: *mut ::cty::c_char,
                   __format: *const ::cty::c_char, ...) -> ::cty::c_int;
}
extern "C" {
    pub fn vfprintf(__s: *mut FILE, __format: *const ::cty::c_char,
                    __arg: __gnuc_va_list) -> ::cty::c_int;
}
extern "C" {
    pub fn vprintf(__format: *const ::cty::c_char, __arg: __gnuc_va_list)
     -> ::cty::c_int;
}
extern "C" {
    pub fn vsprintf(__s: *mut ::cty::c_char, __format: *const ::cty::c_char,
                    __arg: __gnuc_va_list) -> ::cty::c_int;
}
extern "C" {
    pub fn snprintf(__s: *mut ::cty::c_char, __maxlen: usize,
                    __format: *const ::cty::c_char, ...) -> ::cty::c_int;
}
extern "C" {
    pub fn vsnprintf(__s: *mut ::cty::c_char, __maxlen: usize,
                     __format: *const ::cty::c_char, __arg: __gnuc_va_list)
     -> ::cty::c_int;
}
extern "C" {
    pub fn vdprintf(__fd: ::cty::c_int, __fmt: *const ::cty::c_char,
                    __arg: __gnuc_va_list) -> ::cty::c_int;
}
extern "C" {
    pub fn dprintf(__fd: ::cty::c_int, __fmt: *const ::cty::c_char, ...)
     -> ::cty::c_int;
}
extern "C" {
    pub fn fscanf(__stream: *mut FILE, __format: *const ::cty::c_char, ...)
     -> ::cty::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::cty::c_char, ...) -> ::cty::c_int;
}
extern "C" {
    pub fn sscanf(__s: *const ::cty::c_char,
                  __format: *const ::cty::c_char, ...) -> ::cty::c_int;
}
extern "C" {
    #[link_name = "__isoc99_fscanf"]
    pub fn fscanf1(__stream: *mut FILE, __format: *const ::cty::c_char, ...)
     -> ::cty::c_int;
}
extern "C" {
    #[link_name = "__isoc99_scanf"]
    pub fn scanf1(__format: *const ::cty::c_char, ...) -> ::cty::c_int;
}
extern "C" {
    #[link_name = "__isoc99_sscanf"]
    pub fn sscanf1(__s: *const ::cty::c_char,
                   __format: *const ::cty::c_char, ...) -> ::cty::c_int;
}
extern "C" {
    pub fn vfscanf(__s: *mut FILE, __format: *const ::cty::c_char,
                   __arg: __gnuc_va_list) -> ::cty::c_int;
}
extern "C" {
    pub fn vscanf(__format: *const ::cty::c_char, __arg: __gnuc_va_list)
     -> ::cty::c_int;
}
extern "C" {
    pub fn vsscanf(__s: *const ::cty::c_char, __format: *const ::cty::c_char,
                   __arg: __gnuc_va_list) -> ::cty::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vfscanf"]
    pub fn vfscanf1(__s: *mut FILE, __format: *const ::cty::c_char,
                    __arg: __gnuc_va_list) -> ::cty::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vscanf"]
    pub fn vscanf1(__format: *const ::cty::c_char, __arg: __gnuc_va_list)
     -> ::cty::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vsscanf"]
    pub fn vsscanf1(__s: *const ::cty::c_char, __format: *const ::cty::c_char,
                    __arg: __gnuc_va_list) -> ::cty::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn getchar() -> ::cty::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::cty::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn fputc(__c: ::cty::c_int, __stream: *mut FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn putc(__c: ::cty::c_int, __stream: *mut FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn putchar(__c: ::cty::c_int) -> ::cty::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::cty::c_int, __stream: *mut FILE)
     -> ::cty::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::cty::c_int, __stream: *mut FILE)
     -> ::cty::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::cty::c_int) -> ::cty::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn putw(__w: ::cty::c_int, __stream: *mut FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn fgets(__s: *mut ::cty::c_char, __n: ::cty::c_int,
                 __stream: *mut FILE) -> *mut ::cty::c_char;
}
extern "C" {
    pub fn __getdelim(__lineptr: *mut *mut ::cty::c_char, __n: *mut usize,
                      __delimiter: ::cty::c_int, __stream: *mut FILE)
     -> __ssize_t;
}
extern "C" {
    pub fn getdelim(__lineptr: *mut *mut ::cty::c_char, __n: *mut usize,
                    __delimiter: ::cty::c_int, __stream: *mut FILE)
     -> __ssize_t;
}
extern "C" {
    pub fn getline(__lineptr: *mut *mut ::cty::c_char, __n: *mut usize,
                   __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::cty::c_char, __stream: *mut FILE)
     -> ::cty::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::cty::c_char) -> ::cty::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::cty::c_int, __stream: *mut FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn fread(__ptr: *mut ::cty::c_void, __size: usize, __n: usize,
                 __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite(__ptr: *const ::cty::c_void, __size: usize, __n: usize,
                  __s: *mut FILE) -> usize;
}
extern "C" {
    pub fn fread_unlocked(__ptr: *mut ::cty::c_void, __size: usize,
                          __n: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(__ptr: *const ::cty::c_void, __size: usize,
                           __n: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn fseek(__stream: *mut FILE, __off: ::cty::c_long,
                 __whence: ::cty::c_int) -> ::cty::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::cty::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(__stream: *mut FILE, __off: __off_t, __whence: ::cty::c_int)
     -> ::cty::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::cty::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::cty::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::cty::c_char);
}
extern "C" {
    #[link_name = "sys_nerr"]
    pub static mut sys_nerr: ::cty::c_int;
}
extern "C" {
    #[link_name = "sys_errlist"]
    pub static mut sys_errlist: [*const ::cty::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn popen(__command: *const ::cty::c_char,
                 __modes: *const ::cty::c_char) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::cty::c_char) -> *mut ::cty::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::cty::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
#[repr(i8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IRQn_Type {
    Reset_IRQn = -15,
    NonMaskableInt_IRQn = -14,
    HardFault_IRQn = -13,
    SVCall_IRQn = -5,
    DebugMonitor_IRQn = -4,
    PendSV_IRQn = -2,
    SysTick_IRQn = -1,
    POWER_CLOCK_IRQn = 0,
    RADIO_IRQn = 1,
    UART0_IRQn = 2,
    SPI0_TWI0_IRQn = 3,
    SPI1_TWI1_IRQn = 4,
    GPIOTE_IRQn = 6,
    ADC_IRQn = 7,
    TIMER0_IRQn = 8,
    TIMER1_IRQn = 9,
    TIMER2_IRQn = 10,
    RTC0_IRQn = 11,
    TEMP_IRQn = 12,
    RNG_IRQn = 13,
    ECB_IRQn = 14,
    CCM_AAR_IRQn = 15,
    WDT_IRQn = 16,
    RTC1_IRQn = 17,
    QDEC_IRQn = 18,
    LPCOMP_IRQn = 19,
    SWI0_IRQn = 20,
    SWI1_IRQn = 21,
    SWI2_IRQn = 22,
    SWI3_IRQn = 23,
    SWI4_IRQn = 24,
    SWI5_IRQn = 25,
}
#[repr(C)]
#[derive(Copy)]
pub union APSR_Type {
    pub b: APSR_Type__bindgen_ty_1,
    pub w: u32,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct APSR_Type__bindgen_ty_1 {
    pub _bitfield_1: u32,
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_APSR_Type__bindgen_ty_1() {
    assert_eq!(::core::mem::size_of::<APSR_Type__bindgen_ty_1>() , 4usize ,
               concat ! (
               "Size of: " , stringify ! ( APSR_Type__bindgen_ty_1 ) ));
    assert_eq! (::core::mem::align_of::<APSR_Type__bindgen_ty_1>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( APSR_Type__bindgen_ty_1 ) ));
}
impl Clone for APSR_Type__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl APSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        let mask = 268435455usize as u32;
        let field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 0usize;
        unsafe { ::core::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        let mask = 268435455usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 0usize) & mask;
        self._bitfield_1 = unsafe { ::core::mem::transmute(field_val) };
    }
    #[inline]
    pub fn V(&self) -> u32 {
        let mask = 268435456usize as u32;
        let field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 28usize;
        unsafe { ::core::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_V(&mut self, val: u32) {
        let mask = 268435456usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 28usize) & mask;
        self._bitfield_1 = unsafe { ::core::mem::transmute(field_val) };
    }
    #[inline]
    pub fn C(&self) -> u32 {
        let mask = 536870912usize as u32;
        let field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 29usize;
        unsafe { ::core::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_C(&mut self, val: u32) {
        let mask = 536870912usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 29usize) & mask;
        self._bitfield_1 = unsafe { ::core::mem::transmute(field_val) };
    }
    #[inline]
    pub fn Z(&self) -> u32 {
        let mask = 1073741824usize as u32;
        let field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 30usize;
        unsafe { ::core::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_Z(&mut self, val: u32) {
        let mask = 1073741824usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 30usize) & mask;
        self._bitfield_1 = unsafe { ::core::mem::transmute(field_val) };
    }
    #[inline]
    pub fn N(&self) -> u32 {
        let mask = 2147483648usize as u32;
        let field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 31usize;
        unsafe { ::core::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_N(&mut self, val: u32) {
        let mask = 2147483648usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 31usize) & mask;
        self._bitfield_1 = unsafe { ::core::mem::transmute(field_val) };
    }
}
#[test]
fn bindgen_test_layout_APSR_Type() {
    assert_eq!(::core::mem::size_of::<APSR_Type>() , 4usize , concat ! (
               "Size of: " , stringify ! ( APSR_Type ) ));
    assert_eq! (::core::mem::align_of::<APSR_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( APSR_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const APSR_Type ) ) . b as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( APSR_Type ) , "::" ,
                stringify ! ( b ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const APSR_Type ) ) . w as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( APSR_Type ) , "::" ,
                stringify ! ( w ) ));
}
impl Clone for APSR_Type {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union IPSR_Type {
    pub b: IPSR_Type__bindgen_ty_1,
    pub w: u32,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct IPSR_Type__bindgen_ty_1 {
    pub _bitfield_1: u32,
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_IPSR_Type__bindgen_ty_1() {
    assert_eq!(::core::mem::size_of::<IPSR_Type__bindgen_ty_1>() , 4usize ,
               concat ! (
               "Size of: " , stringify ! ( IPSR_Type__bindgen_ty_1 ) ));
    assert_eq! (::core::mem::align_of::<IPSR_Type__bindgen_ty_1>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( IPSR_Type__bindgen_ty_1 ) ));
}
impl Clone for IPSR_Type__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl IPSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn ISR(&self) -> u32 {
        let mask = 511usize as u32;
        let field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 0usize;
        unsafe { ::core::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_ISR(&mut self, val: u32) {
        let mask = 511usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 0usize) & mask;
        self._bitfield_1 = unsafe { ::core::mem::transmute(field_val) };
    }
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        let mask = 4294966784usize as u32;
        let field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 9usize;
        unsafe { ::core::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        let mask = 4294966784usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 9usize) & mask;
        self._bitfield_1 = unsafe { ::core::mem::transmute(field_val) };
    }
}
#[test]
fn bindgen_test_layout_IPSR_Type() {
    assert_eq!(::core::mem::size_of::<IPSR_Type>() , 4usize , concat ! (
               "Size of: " , stringify ! ( IPSR_Type ) ));
    assert_eq! (::core::mem::align_of::<IPSR_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( IPSR_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IPSR_Type ) ) . b as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IPSR_Type ) , "::" ,
                stringify ! ( b ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const IPSR_Type ) ) . w as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( IPSR_Type ) , "::" ,
                stringify ! ( w ) ));
}
impl Clone for IPSR_Type {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union xPSR_Type {
    pub b: xPSR_Type__bindgen_ty_1,
    pub w: u32,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xPSR_Type__bindgen_ty_1 {
    pub _bitfield_1: [u16; 2usize],
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_xPSR_Type__bindgen_ty_1() {
    assert_eq!(::core::mem::size_of::<xPSR_Type__bindgen_ty_1>() , 4usize ,
               concat ! (
               "Size of: " , stringify ! ( xPSR_Type__bindgen_ty_1 ) ));
    assert_eq! (::core::mem::align_of::<xPSR_Type__bindgen_ty_1>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( xPSR_Type__bindgen_ty_1 ) ));
}
impl Clone for xPSR_Type__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl xPSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn ISR(&self) -> u32 {
        let mask = 511usize as u32;
        let field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 0usize;
        unsafe { ::core::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_ISR(&mut self, val: u32) {
        let mask = 511usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 0usize) & mask;
        self._bitfield_1 = unsafe { ::core::mem::transmute(field_val) };
    }
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        let mask = 16776704usize as u32;
        let field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 9usize;
        unsafe { ::core::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        let mask = 16776704usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 9usize) & mask;
        self._bitfield_1 = unsafe { ::core::mem::transmute(field_val) };
    }
    #[inline]
    pub fn T(&self) -> u32 {
        let mask = 16777216usize as u32;
        let field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 24usize;
        unsafe { ::core::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_T(&mut self, val: u32) {
        let mask = 16777216usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 24usize) & mask;
        self._bitfield_1 = unsafe { ::core::mem::transmute(field_val) };
    }
    #[inline]
    pub fn _reserved1(&self) -> u32 {
        let mask = 234881024usize as u32;
        let field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 25usize;
        unsafe { ::core::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set__reserved1(&mut self, val: u32) {
        let mask = 234881024usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 25usize) & mask;
        self._bitfield_1 = unsafe { ::core::mem::transmute(field_val) };
    }
    #[inline]
    pub fn V(&self) -> u32 {
        let mask = 268435456usize as u32;
        let field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 28usize;
        unsafe { ::core::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_V(&mut self, val: u32) {
        let mask = 268435456usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 28usize) & mask;
        self._bitfield_1 = unsafe { ::core::mem::transmute(field_val) };
    }
    #[inline]
    pub fn C(&self) -> u32 {
        let mask = 536870912usize as u32;
        let field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 29usize;
        unsafe { ::core::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_C(&mut self, val: u32) {
        let mask = 536870912usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 29usize) & mask;
        self._bitfield_1 = unsafe { ::core::mem::transmute(field_val) };
    }
    #[inline]
    pub fn Z(&self) -> u32 {
        let mask = 1073741824usize as u32;
        let field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 30usize;
        unsafe { ::core::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_Z(&mut self, val: u32) {
        let mask = 1073741824usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 30usize) & mask;
        self._bitfield_1 = unsafe { ::core::mem::transmute(field_val) };
    }
    #[inline]
    pub fn N(&self) -> u32 {
        let mask = 2147483648usize as u32;
        let field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 31usize;
        unsafe { ::core::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_N(&mut self, val: u32) {
        let mask = 2147483648usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 31usize) & mask;
        self._bitfield_1 = unsafe { ::core::mem::transmute(field_val) };
    }
}
#[test]
fn bindgen_test_layout_xPSR_Type() {
    assert_eq!(::core::mem::size_of::<xPSR_Type>() , 4usize , concat ! (
               "Size of: " , stringify ! ( xPSR_Type ) ));
    assert_eq! (::core::mem::align_of::<xPSR_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( xPSR_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xPSR_Type ) ) . b as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xPSR_Type ) , "::" ,
                stringify ! ( b ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xPSR_Type ) ) . w as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xPSR_Type ) , "::" ,
                stringify ! ( w ) ));
}
impl Clone for xPSR_Type {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union CONTROL_Type {
    pub b: CONTROL_Type__bindgen_ty_1,
    pub w: u32,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct CONTROL_Type__bindgen_ty_1 {
    pub _bitfield_1: u32,
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_CONTROL_Type__bindgen_ty_1() {
    assert_eq!(::core::mem::size_of::<CONTROL_Type__bindgen_ty_1>() , 4usize ,
               concat ! (
               "Size of: " , stringify ! ( CONTROL_Type__bindgen_ty_1 ) ));
    assert_eq! (::core::mem::align_of::<CONTROL_Type__bindgen_ty_1>() , 4usize
                , concat ! (
                "Alignment of " , stringify ! ( CONTROL_Type__bindgen_ty_1 )
                ));
}
impl Clone for CONTROL_Type__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl CONTROL_Type__bindgen_ty_1 {
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        let mask = 1usize as u32;
        let field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 0usize;
        unsafe { ::core::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        let mask = 1usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 0usize) & mask;
        self._bitfield_1 = unsafe { ::core::mem::transmute(field_val) };
    }
    #[inline]
    pub fn SPSEL(&self) -> u32 {
        let mask = 2usize as u32;
        let field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 1usize;
        unsafe { ::core::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_SPSEL(&mut self, val: u32) {
        let mask = 2usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 1usize) & mask;
        self._bitfield_1 = unsafe { ::core::mem::transmute(field_val) };
    }
    #[inline]
    pub fn _reserved1(&self) -> u32 {
        let mask = 4294967292usize as u32;
        let field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 2usize;
        unsafe { ::core::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set__reserved1(&mut self, val: u32) {
        let mask = 4294967292usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::core::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 2usize) & mask;
        self._bitfield_1 = unsafe { ::core::mem::transmute(field_val) };
    }
}
#[test]
fn bindgen_test_layout_CONTROL_Type() {
    assert_eq!(::core::mem::size_of::<CONTROL_Type>() , 4usize , concat ! (
               "Size of: " , stringify ! ( CONTROL_Type ) ));
    assert_eq! (::core::mem::align_of::<CONTROL_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( CONTROL_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const CONTROL_Type ) ) . b as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( CONTROL_Type ) , "::" ,
                stringify ! ( b ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const CONTROL_Type ) ) . w as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( CONTROL_Type ) , "::" ,
                stringify ! ( w ) ));
}
impl Clone for CONTROL_Type {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct NVIC_Type {
    pub ISER: [u32; 1usize],
    pub RESERVED0: [u32; 31usize],
    pub ICER: [u32; 1usize],
    pub RSERVED1: [u32; 31usize],
    pub ISPR: [u32; 1usize],
    pub RESERVED2: [u32; 31usize],
    pub ICPR: [u32; 1usize],
    pub RESERVED3: [u32; 31usize],
    pub RESERVED4: [u32; 64usize],
    pub IP: [u32; 8usize],
}
#[test]
fn bindgen_test_layout_NVIC_Type() {
    assert_eq!(::core::mem::size_of::<NVIC_Type>() , 800usize , concat ! (
               "Size of: " , stringify ! ( NVIC_Type ) ));
    assert_eq! (::core::mem::align_of::<NVIC_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( NVIC_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NVIC_Type ) ) . ISER as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NVIC_Type ) , "::" ,
                stringify ! ( ISER ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NVIC_Type ) ) . RESERVED0 as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( NVIC_Type ) , "::" ,
                stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NVIC_Type ) ) . ICER as * const _ as
                usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( NVIC_Type ) , "::" ,
                stringify ! ( ICER ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NVIC_Type ) ) . RSERVED1 as * const _ as
                usize } , 132usize , concat ! (
                "Alignment of field: " , stringify ! ( NVIC_Type ) , "::" ,
                stringify ! ( RSERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NVIC_Type ) ) . ISPR as * const _ as
                usize } , 256usize , concat ! (
                "Alignment of field: " , stringify ! ( NVIC_Type ) , "::" ,
                stringify ! ( ISPR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NVIC_Type ) ) . RESERVED2 as * const _ as
                usize } , 260usize , concat ! (
                "Alignment of field: " , stringify ! ( NVIC_Type ) , "::" ,
                stringify ! ( RESERVED2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NVIC_Type ) ) . ICPR as * const _ as
                usize } , 384usize , concat ! (
                "Alignment of field: " , stringify ! ( NVIC_Type ) , "::" ,
                stringify ! ( ICPR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NVIC_Type ) ) . RESERVED3 as * const _ as
                usize } , 388usize , concat ! (
                "Alignment of field: " , stringify ! ( NVIC_Type ) , "::" ,
                stringify ! ( RESERVED3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NVIC_Type ) ) . RESERVED4 as * const _ as
                usize } , 512usize , concat ! (
                "Alignment of field: " , stringify ! ( NVIC_Type ) , "::" ,
                stringify ! ( RESERVED4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NVIC_Type ) ) . IP as * const _ as usize
                } , 768usize , concat ! (
                "Alignment of field: " , stringify ! ( NVIC_Type ) , "::" ,
                stringify ! ( IP ) ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SCB_Type {
    pub CPUID: u32,
    pub ICSR: u32,
    pub RESERVED0: u32,
    pub AIRCR: u32,
    pub SCR: u32,
    pub CCR: u32,
    pub RESERVED1: u32,
    pub SHP: [u32; 2usize],
    pub SHCSR: u32,
}
#[test]
fn bindgen_test_layout_SCB_Type() {
    assert_eq!(::core::mem::size_of::<SCB_Type>() , 40usize , concat ! (
               "Size of: " , stringify ! ( SCB_Type ) ));
    assert_eq! (::core::mem::align_of::<SCB_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( SCB_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SCB_Type ) ) . CPUID as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SCB_Type ) , "::" ,
                stringify ! ( CPUID ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SCB_Type ) ) . ICSR as * const _ as usize
                } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( SCB_Type ) , "::" ,
                stringify ! ( ICSR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SCB_Type ) ) . RESERVED0 as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SCB_Type ) , "::" ,
                stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SCB_Type ) ) . AIRCR as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( SCB_Type ) , "::" ,
                stringify ! ( AIRCR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SCB_Type ) ) . SCR as * const _ as usize
                } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( SCB_Type ) , "::" ,
                stringify ! ( SCR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SCB_Type ) ) . CCR as * const _ as usize
                } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( SCB_Type ) , "::" ,
                stringify ! ( CCR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SCB_Type ) ) . RESERVED1 as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( SCB_Type ) , "::" ,
                stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SCB_Type ) ) . SHP as * const _ as usize
                } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( SCB_Type ) , "::" ,
                stringify ! ( SHP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SCB_Type ) ) . SHCSR as * const _ as
                usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( SCB_Type ) , "::" ,
                stringify ! ( SHCSR ) ));
}
impl Clone for SCB_Type {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SysTick_Type {
    pub CTRL: u32,
    pub LOAD: u32,
    pub VAL: u32,
    pub CALIB: u32,
}
#[test]
fn bindgen_test_layout_SysTick_Type() {
    assert_eq!(::core::mem::size_of::<SysTick_Type>() , 16usize , concat ! (
               "Size of: " , stringify ! ( SysTick_Type ) ));
    assert_eq! (::core::mem::align_of::<SysTick_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( SysTick_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SysTick_Type ) ) . CTRL as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( SysTick_Type ) , "::" ,
                stringify ! ( CTRL ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SysTick_Type ) ) . LOAD as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( SysTick_Type ) , "::" ,
                stringify ! ( LOAD ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SysTick_Type ) ) . VAL as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( SysTick_Type ) , "::" ,
                stringify ! ( VAL ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const SysTick_Type ) ) . CALIB as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( SysTick_Type ) , "::" ,
                stringify ! ( CALIB ) ));
}
impl Clone for SysTick_Type {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "SystemCoreClock"]
    pub static mut SystemCoreClock: u32;
}
extern "C" {
    pub fn SystemInit();
}
extern "C" {
    pub fn SystemCoreClockUpdate();
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct PPI_TASKS_CHG_Type {
    pub EN: u32,
    pub DIS: u32,
}
#[test]
fn bindgen_test_layout_PPI_TASKS_CHG_Type() {
    assert_eq!(::core::mem::size_of::<PPI_TASKS_CHG_Type>() , 8usize , concat
               ! ( "Size of: " , stringify ! ( PPI_TASKS_CHG_Type ) ));
    assert_eq! (::core::mem::align_of::<PPI_TASKS_CHG_Type>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( PPI_TASKS_CHG_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const PPI_TASKS_CHG_Type ) ) . EN as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( PPI_TASKS_CHG_Type ) ,
                "::" , stringify ! ( EN ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const PPI_TASKS_CHG_Type ) ) . DIS as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( PPI_TASKS_CHG_Type ) ,
                "::" , stringify ! ( DIS ) ));
}
impl Clone for PPI_TASKS_CHG_Type {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct PPI_CH_Type {
    pub EEP: u32,
    pub TEP: u32,
}
#[test]
fn bindgen_test_layout_PPI_CH_Type() {
    assert_eq!(::core::mem::size_of::<PPI_CH_Type>() , 8usize , concat ! (
               "Size of: " , stringify ! ( PPI_CH_Type ) ));
    assert_eq! (::core::mem::align_of::<PPI_CH_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( PPI_CH_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const PPI_CH_Type ) ) . EEP as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( PPI_CH_Type ) , "::" ,
                stringify ! ( EEP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const PPI_CH_Type ) ) . TEP as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( PPI_CH_Type ) , "::" ,
                stringify ! ( TEP ) ));
}
impl Clone for PPI_CH_Type {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct NRF_POWER_Type {
    pub RESERVED0: [u32; 30usize],
    pub TASKS_CONSTLAT: u32,
    pub TASKS_LOWPWR: u32,
    pub RESERVED1: [u32; 34usize],
    pub EVENTS_POFWARN: u32,
    pub RESERVED2: [u32; 126usize],
    pub INTENSET: u32,
    pub INTENCLR: u32,
    pub RESERVED3: [u32; 61usize],
    pub RESETREAS: u32,
    pub RESERVED4: [u32; 9usize],
    pub RAMSTATUS: u32,
    pub RESERVED5: [u32; 53usize],
    pub SYSTEMOFF: u32,
    pub RESERVED6: [u32; 3usize],
    pub POFCON: u32,
    pub RESERVED7: [u32; 2usize],
    pub GPREGRET: u32,
    pub RESERVED8: u32,
    pub RAMON: u32,
    pub RESERVED9: [u32; 7usize],
    pub RESET: u32,
    pub RESERVED10: [u32; 3usize],
    pub RAMONB: u32,
    pub RESERVED11: [u32; 8usize],
    pub DCDCEN: u32,
    pub RESERVED12: [u32; 291usize],
    pub DCDCFORCE: u32,
}
#[test]
fn bindgen_test_layout_NRF_POWER_Type() {
    assert_eq!(::core::mem::size_of::<NRF_POWER_Type>() , 2572usize , concat !
               ( "Size of: " , stringify ! ( NRF_POWER_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_POWER_Type>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( NRF_POWER_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . RESERVED0 as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . TASKS_CONSTLAT as *
                const _ as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( TASKS_CONSTLAT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . TASKS_LOWPWR as *
                const _ as usize } , 124usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( TASKS_LOWPWR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . RESERVED1 as * const
                _ as usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . EVENTS_POFWARN as *
                const _ as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( EVENTS_POFWARN ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . RESERVED2 as * const
                _ as usize } , 268usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( RESERVED2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . INTENSET as * const
                _ as usize } , 772usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( INTENSET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . INTENCLR as * const
                _ as usize } , 776usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( INTENCLR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . RESERVED3 as * const
                _ as usize } , 780usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( RESERVED3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . RESETREAS as * const
                _ as usize } , 1024usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( RESETREAS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . RESERVED4 as * const
                _ as usize } , 1028usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( RESERVED4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . RAMSTATUS as * const
                _ as usize } , 1064usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( RAMSTATUS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . RESERVED5 as * const
                _ as usize } , 1068usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( RESERVED5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . SYSTEMOFF as * const
                _ as usize } , 1280usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( SYSTEMOFF ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . RESERVED6 as * const
                _ as usize } , 1284usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( RESERVED6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . POFCON as * const _
                as usize } , 1296usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( POFCON ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . RESERVED7 as * const
                _ as usize } , 1300usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( RESERVED7 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . GPREGRET as * const
                _ as usize } , 1308usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( GPREGRET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . RESERVED8 as * const
                _ as usize } , 1312usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( RESERVED8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . RAMON as * const _
                as usize } , 1316usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( RAMON ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . RESERVED9 as * const
                _ as usize } , 1320usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( RESERVED9 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . RESET as * const _
                as usize } , 1348usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( RESET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . RESERVED10 as *
                const _ as usize } , 1352usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( RESERVED10 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . RAMONB as * const _
                as usize } , 1364usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( RAMONB ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . RESERVED11 as *
                const _ as usize } , 1368usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( RESERVED11 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . DCDCEN as * const _
                as usize } , 1400usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( DCDCEN ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . RESERVED12 as *
                const _ as usize } , 1404usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( RESERVED12 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_POWER_Type ) ) . DCDCFORCE as * const
                _ as usize } , 2568usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_POWER_Type ) , "::"
                , stringify ! ( DCDCFORCE ) ));
}
#[repr(C)]
pub struct NRF_CLOCK_Type {
    pub TASKS_HFCLKSTART: u32,
    pub TASKS_HFCLKSTOP: u32,
    pub TASKS_LFCLKSTART: u32,
    pub TASKS_LFCLKSTOP: u32,
    pub TASKS_CAL: u32,
    pub TASKS_CTSTART: u32,
    pub TASKS_CTSTOP: u32,
    pub RESERVED0: [u32; 57usize],
    pub EVENTS_HFCLKSTARTED: u32,
    pub EVENTS_LFCLKSTARTED: u32,
    pub RESERVED1: u32,
    pub EVENTS_DONE: u32,
    pub EVENTS_CTTO: u32,
    pub RESERVED2: [u32; 124usize],
    pub INTENSET: u32,
    pub INTENCLR: u32,
    pub RESERVED3: [u32; 63usize],
    pub HFCLKRUN: u32,
    pub HFCLKSTAT: u32,
    pub RESERVED4: u32,
    pub LFCLKRUN: u32,
    pub LFCLKSTAT: u32,
    pub LFCLKSRCCOPY: u32,
    pub RESERVED5: [u32; 62usize],
    pub LFCLKSRC: u32,
    pub RESERVED6: [u32; 7usize],
    pub CTIV: u32,
    pub RESERVED7: [u32; 5usize],
    pub XTALFREQ: u32,
}
#[test]
fn bindgen_test_layout_NRF_CLOCK_Type() {
    assert_eq!(::core::mem::size_of::<NRF_CLOCK_Type>() , 1364usize , concat !
               ( "Size of: " , stringify ! ( NRF_CLOCK_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_CLOCK_Type>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( NRF_CLOCK_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . TASKS_HFCLKSTART as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( TASKS_HFCLKSTART ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . TASKS_HFCLKSTOP as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( TASKS_HFCLKSTOP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . TASKS_LFCLKSTART as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( TASKS_LFCLKSTART ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . TASKS_LFCLKSTOP as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( TASKS_LFCLKSTOP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . TASKS_CAL as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( TASKS_CAL ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . TASKS_CTSTART as *
                const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( TASKS_CTSTART ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . TASKS_CTSTOP as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( TASKS_CTSTOP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . RESERVED0 as * const
                _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . EVENTS_HFCLKSTARTED
                as * const _ as usize } , 256usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( EVENTS_HFCLKSTARTED ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . EVENTS_LFCLKSTARTED
                as * const _ as usize } , 260usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( EVENTS_LFCLKSTARTED ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . RESERVED1 as * const
                _ as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . EVENTS_DONE as *
                const _ as usize } , 268usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( EVENTS_DONE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . EVENTS_CTTO as *
                const _ as usize } , 272usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( EVENTS_CTTO ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . RESERVED2 as * const
                _ as usize } , 276usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( RESERVED2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . INTENSET as * const
                _ as usize } , 772usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( INTENSET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . INTENCLR as * const
                _ as usize } , 776usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( INTENCLR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . RESERVED3 as * const
                _ as usize } , 780usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( RESERVED3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . HFCLKRUN as * const
                _ as usize } , 1032usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( HFCLKRUN ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . HFCLKSTAT as * const
                _ as usize } , 1036usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( HFCLKSTAT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . RESERVED4 as * const
                _ as usize } , 1040usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( RESERVED4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . LFCLKRUN as * const
                _ as usize } , 1044usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( LFCLKRUN ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . LFCLKSTAT as * const
                _ as usize } , 1048usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( LFCLKSTAT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . LFCLKSRCCOPY as *
                const _ as usize } , 1052usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( LFCLKSRCCOPY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . RESERVED5 as * const
                _ as usize } , 1056usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( RESERVED5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . LFCLKSRC as * const
                _ as usize } , 1304usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( LFCLKSRC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . RESERVED6 as * const
                _ as usize } , 1308usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( RESERVED6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . CTIV as * const _ as
                usize } , 1336usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( CTIV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . RESERVED7 as * const
                _ as usize } , 1340usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( RESERVED7 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CLOCK_Type ) ) . XTALFREQ as * const
                _ as usize } , 1360usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CLOCK_Type ) , "::"
                , stringify ! ( XTALFREQ ) ));
}
#[repr(C)]
pub struct NRF_MPU_Type {
    pub RESERVED0: [u32; 330usize],
    pub PERR0: u32,
    pub RLENR0: u32,
    pub RESERVED1: [u32; 52usize],
    pub PROTENSET0: u32,
    pub PROTENSET1: u32,
    pub DISABLEINDEBUG: u32,
    pub PROTBLOCKSIZE: u32,
}
#[test]
fn bindgen_test_layout_NRF_MPU_Type() {
    assert_eq!(::core::mem::size_of::<NRF_MPU_Type>() , 1552usize , concat ! (
               "Size of: " , stringify ! ( NRF_MPU_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_MPU_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( NRF_MPU_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_MPU_Type ) ) . RESERVED0 as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_MPU_Type ) , "::" ,
                stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_MPU_Type ) ) . PERR0 as * const _ as
                usize } , 1320usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_MPU_Type ) , "::" ,
                stringify ! ( PERR0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_MPU_Type ) ) . RLENR0 as * const _ as
                usize } , 1324usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_MPU_Type ) , "::" ,
                stringify ! ( RLENR0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_MPU_Type ) ) . RESERVED1 as * const _
                as usize } , 1328usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_MPU_Type ) , "::" ,
                stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_MPU_Type ) ) . PROTENSET0 as * const
                _ as usize } , 1536usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_MPU_Type ) , "::" ,
                stringify ! ( PROTENSET0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_MPU_Type ) ) . PROTENSET1 as * const
                _ as usize } , 1540usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_MPU_Type ) , "::" ,
                stringify ! ( PROTENSET1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_MPU_Type ) ) . DISABLEINDEBUG as *
                const _ as usize } , 1544usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_MPU_Type ) , "::" ,
                stringify ! ( DISABLEINDEBUG ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_MPU_Type ) ) . PROTBLOCKSIZE as *
                const _ as usize } , 1548usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_MPU_Type ) , "::" ,
                stringify ! ( PROTBLOCKSIZE ) ));
}
#[repr(C)]
pub struct NRF_RADIO_Type {
    pub TASKS_TXEN: u32,
    pub TASKS_RXEN: u32,
    pub TASKS_START: u32,
    pub TASKS_STOP: u32,
    pub TASKS_DISABLE: u32,
    pub TASKS_RSSISTART: u32,
    pub TASKS_RSSISTOP: u32,
    pub TASKS_BCSTART: u32,
    pub TASKS_BCSTOP: u32,
    pub RESERVED0: [u32; 55usize],
    pub EVENTS_READY: u32,
    pub EVENTS_ADDRESS: u32,
    pub EVENTS_PAYLOAD: u32,
    pub EVENTS_END: u32,
    pub EVENTS_DISABLED: u32,
    pub EVENTS_DEVMATCH: u32,
    pub EVENTS_DEVMISS: u32,
    pub EVENTS_RSSIEND: u32,
    pub RESERVED1: [u32; 2usize],
    pub EVENTS_BCMATCH: u32,
    pub RESERVED2: [u32; 53usize],
    pub SHORTS: u32,
    pub RESERVED3: [u32; 64usize],
    pub INTENSET: u32,
    pub INTENCLR: u32,
    pub RESERVED4: [u32; 61usize],
    pub CRCSTATUS: u32,
    pub RESERVED5: u32,
    pub RXMATCH: u32,
    pub RXCRC: u32,
    pub DAI: u32,
    pub RESERVED6: [u32; 60usize],
    pub PACKETPTR: u32,
    pub FREQUENCY: u32,
    pub TXPOWER: u32,
    pub MODE: u32,
    pub PCNF0: u32,
    pub PCNF1: u32,
    pub BASE0: u32,
    pub BASE1: u32,
    pub PREFIX0: u32,
    pub PREFIX1: u32,
    pub TXADDRESS: u32,
    pub RXADDRESSES: u32,
    pub CRCCNF: u32,
    pub CRCPOLY: u32,
    pub CRCINIT: u32,
    pub TEST: u32,
    pub TIFS: u32,
    pub RSSISAMPLE: u32,
    pub RESERVED7: u32,
    pub STATE: u32,
    pub DATAWHITEIV: u32,
    pub RESERVED8: [u32; 2usize],
    pub BCC: u32,
    pub RESERVED9: [u32; 39usize],
    pub DAB: [u32; 8usize],
    pub DAP: [u32; 8usize],
    pub DACNF: u32,
    pub RESERVED10: [u32; 56usize],
    pub OVERRIDE0: u32,
    pub OVERRIDE1: u32,
    pub OVERRIDE2: u32,
    pub OVERRIDE3: u32,
    pub OVERRIDE4: u32,
    pub RESERVED11: [u32; 561usize],
    pub POWER: u32,
}
#[test]
fn bindgen_test_layout_NRF_RADIO_Type() {
    assert_eq!(::core::mem::size_of::<NRF_RADIO_Type>() , 4096usize , concat !
               ( "Size of: " , stringify ! ( NRF_RADIO_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_RADIO_Type>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( NRF_RADIO_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . TASKS_TXEN as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( TASKS_TXEN ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . TASKS_RXEN as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( TASKS_RXEN ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . TASKS_START as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( TASKS_START ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . TASKS_STOP as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( TASKS_STOP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . TASKS_DISABLE as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( TASKS_DISABLE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . TASKS_RSSISTART as *
                const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( TASKS_RSSISTART ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . TASKS_RSSISTOP as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( TASKS_RSSISTOP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . TASKS_BCSTART as *
                const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( TASKS_BCSTART ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . TASKS_BCSTOP as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( TASKS_BCSTOP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . RESERVED0 as * const
                _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . EVENTS_READY as *
                const _ as usize } , 256usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( EVENTS_READY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . EVENTS_ADDRESS as *
                const _ as usize } , 260usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( EVENTS_ADDRESS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . EVENTS_PAYLOAD as *
                const _ as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( EVENTS_PAYLOAD ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . EVENTS_END as *
                const _ as usize } , 268usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( EVENTS_END ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . EVENTS_DISABLED as *
                const _ as usize } , 272usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( EVENTS_DISABLED ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . EVENTS_DEVMATCH as *
                const _ as usize } , 276usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( EVENTS_DEVMATCH ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . EVENTS_DEVMISS as *
                const _ as usize } , 280usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( EVENTS_DEVMISS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . EVENTS_RSSIEND as *
                const _ as usize } , 284usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( EVENTS_RSSIEND ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . RESERVED1 as * const
                _ as usize } , 288usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . EVENTS_BCMATCH as *
                const _ as usize } , 296usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( EVENTS_BCMATCH ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . RESERVED2 as * const
                _ as usize } , 300usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( RESERVED2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . SHORTS as * const _
                as usize } , 512usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( SHORTS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . RESERVED3 as * const
                _ as usize } , 516usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( RESERVED3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . INTENSET as * const
                _ as usize } , 772usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( INTENSET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . INTENCLR as * const
                _ as usize } , 776usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( INTENCLR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . RESERVED4 as * const
                _ as usize } , 780usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( RESERVED4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . CRCSTATUS as * const
                _ as usize } , 1024usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( CRCSTATUS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . RESERVED5 as * const
                _ as usize } , 1028usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( RESERVED5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . RXMATCH as * const _
                as usize } , 1032usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( RXMATCH ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . RXCRC as * const _
                as usize } , 1036usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( RXCRC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . DAI as * const _ as
                usize } , 1040usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( DAI ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . RESERVED6 as * const
                _ as usize } , 1044usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( RESERVED6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . PACKETPTR as * const
                _ as usize } , 1284usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( PACKETPTR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . FREQUENCY as * const
                _ as usize } , 1288usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( FREQUENCY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . TXPOWER as * const _
                as usize } , 1292usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( TXPOWER ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . MODE as * const _ as
                usize } , 1296usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( MODE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . PCNF0 as * const _
                as usize } , 1300usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( PCNF0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . PCNF1 as * const _
                as usize } , 1304usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( PCNF1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . BASE0 as * const _
                as usize } , 1308usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( BASE0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . BASE1 as * const _
                as usize } , 1312usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( BASE1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . PREFIX0 as * const _
                as usize } , 1316usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( PREFIX0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . PREFIX1 as * const _
                as usize } , 1320usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( PREFIX1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . TXADDRESS as * const
                _ as usize } , 1324usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( TXADDRESS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . RXADDRESSES as *
                const _ as usize } , 1328usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( RXADDRESSES ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . CRCCNF as * const _
                as usize } , 1332usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( CRCCNF ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . CRCPOLY as * const _
                as usize } , 1336usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( CRCPOLY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . CRCINIT as * const _
                as usize } , 1340usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( CRCINIT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . TEST as * const _ as
                usize } , 1344usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( TEST ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . TIFS as * const _ as
                usize } , 1348usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( TIFS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . RSSISAMPLE as *
                const _ as usize } , 1352usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( RSSISAMPLE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . RESERVED7 as * const
                _ as usize } , 1356usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( RESERVED7 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . STATE as * const _
                as usize } , 1360usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( STATE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . DATAWHITEIV as *
                const _ as usize } , 1364usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( DATAWHITEIV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . RESERVED8 as * const
                _ as usize } , 1368usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( RESERVED8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . BCC as * const _ as
                usize } , 1376usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( BCC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . RESERVED9 as * const
                _ as usize } , 1380usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( RESERVED9 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . DAB as * const _ as
                usize } , 1536usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( DAB ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . DAP as * const _ as
                usize } , 1568usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( DAP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . DACNF as * const _
                as usize } , 1600usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( DACNF ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . RESERVED10 as *
                const _ as usize } , 1604usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( RESERVED10 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . OVERRIDE0 as * const
                _ as usize } , 1828usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( OVERRIDE0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . OVERRIDE1 as * const
                _ as usize } , 1832usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( OVERRIDE1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . OVERRIDE2 as * const
                _ as usize } , 1836usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( OVERRIDE2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . OVERRIDE3 as * const
                _ as usize } , 1840usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( OVERRIDE3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . OVERRIDE4 as * const
                _ as usize } , 1844usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( OVERRIDE4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . RESERVED11 as *
                const _ as usize } , 1848usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( RESERVED11 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RADIO_Type ) ) . POWER as * const _
                as usize } , 4092usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RADIO_Type ) , "::"
                , stringify ! ( POWER ) ));
}
#[repr(C)]
pub struct NRF_UART_Type {
    pub TASKS_STARTRX: u32,
    pub TASKS_STOPRX: u32,
    pub TASKS_STARTTX: u32,
    pub TASKS_STOPTX: u32,
    pub RESERVED0: [u32; 3usize],
    pub TASKS_SUSPEND: u32,
    pub RESERVED1: [u32; 56usize],
    pub EVENTS_CTS: u32,
    pub EVENTS_NCTS: u32,
    pub EVENTS_RXDRDY: u32,
    pub RESERVED2: [u32; 4usize],
    pub EVENTS_TXDRDY: u32,
    pub RESERVED3: u32,
    pub EVENTS_ERROR: u32,
    pub RESERVED4: [u32; 7usize],
    pub EVENTS_RXTO: u32,
    pub RESERVED5: [u32; 46usize],
    pub SHORTS: u32,
    pub RESERVED6: [u32; 64usize],
    pub INTENSET: u32,
    pub INTENCLR: u32,
    pub RESERVED7: [u32; 93usize],
    pub ERRORSRC: u32,
    pub RESERVED8: [u32; 31usize],
    pub ENABLE: u32,
    pub RESERVED9: u32,
    pub PSELRTS: u32,
    pub PSELTXD: u32,
    pub PSELCTS: u32,
    pub PSELRXD: u32,
    pub RXD: u32,
    pub TXD: u32,
    pub RESERVED10: u32,
    pub BAUDRATE: u32,
    pub RESERVED11: [u32; 17usize],
    pub CONFIG: u32,
    pub RESERVED12: [u32; 675usize],
    pub POWER: u32,
}
#[test]
fn bindgen_test_layout_NRF_UART_Type() {
    assert_eq!(::core::mem::size_of::<NRF_UART_Type>() , 4096usize , concat !
               ( "Size of: " , stringify ! ( NRF_UART_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_UART_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( NRF_UART_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . TASKS_STARTRX as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( TASKS_STARTRX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . TASKS_STOPRX as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( TASKS_STOPRX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . TASKS_STARTTX as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( TASKS_STARTTX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . TASKS_STOPTX as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( TASKS_STOPTX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . RESERVED0 as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . TASKS_SUSPEND as *
                const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( TASKS_SUSPEND ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . RESERVED1 as * const
                _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . EVENTS_CTS as * const
                _ as usize } , 256usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( EVENTS_CTS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . EVENTS_NCTS as *
                const _ as usize } , 260usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( EVENTS_NCTS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . EVENTS_RXDRDY as *
                const _ as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( EVENTS_RXDRDY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . RESERVED2 as * const
                _ as usize } , 268usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( RESERVED2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . EVENTS_TXDRDY as *
                const _ as usize } , 284usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( EVENTS_TXDRDY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . RESERVED3 as * const
                _ as usize } , 288usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( RESERVED3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . EVENTS_ERROR as *
                const _ as usize } , 292usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( EVENTS_ERROR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . RESERVED4 as * const
                _ as usize } , 296usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( RESERVED4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . EVENTS_RXTO as *
                const _ as usize } , 324usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( EVENTS_RXTO ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . RESERVED5 as * const
                _ as usize } , 328usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( RESERVED5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . SHORTS as * const _
                as usize } , 512usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( SHORTS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . RESERVED6 as * const
                _ as usize } , 516usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( RESERVED6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . INTENSET as * const _
                as usize } , 772usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( INTENSET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . INTENCLR as * const _
                as usize } , 776usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( INTENCLR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . RESERVED7 as * const
                _ as usize } , 780usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( RESERVED7 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . ERRORSRC as * const _
                as usize } , 1152usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( ERRORSRC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . RESERVED8 as * const
                _ as usize } , 1156usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( RESERVED8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . ENABLE as * const _
                as usize } , 1280usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( ENABLE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . RESERVED9 as * const
                _ as usize } , 1284usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( RESERVED9 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . PSELRTS as * const _
                as usize } , 1288usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( PSELRTS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . PSELTXD as * const _
                as usize } , 1292usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( PSELTXD ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . PSELCTS as * const _
                as usize } , 1296usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( PSELCTS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . PSELRXD as * const _
                as usize } , 1300usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( PSELRXD ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . RXD as * const _ as
                usize } , 1304usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( RXD ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . TXD as * const _ as
                usize } , 1308usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( TXD ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . RESERVED10 as * const
                _ as usize } , 1312usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( RESERVED10 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . BAUDRATE as * const _
                as usize } , 1316usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( BAUDRATE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . RESERVED11 as * const
                _ as usize } , 1320usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( RESERVED11 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . CONFIG as * const _
                as usize } , 1388usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( CONFIG ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . RESERVED12 as * const
                _ as usize } , 1392usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( RESERVED12 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UART_Type ) ) . POWER as * const _ as
                usize } , 4092usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UART_Type ) , "::"
                , stringify ! ( POWER ) ));
}
#[repr(C)]
pub struct NRF_SPI_Type {
    pub RESERVED0: [u32; 66usize],
    pub EVENTS_READY: u32,
    pub RESERVED1: [u32; 126usize],
    pub INTENSET: u32,
    pub INTENCLR: u32,
    pub RESERVED2: [u32; 125usize],
    pub ENABLE: u32,
    pub RESERVED3: u32,
    pub PSELSCK: u32,
    pub PSELMOSI: u32,
    pub PSELMISO: u32,
    pub RESERVED4: u32,
    pub RXD: u32,
    pub TXD: u32,
    pub RESERVED5: u32,
    pub FREQUENCY: u32,
    pub RESERVED6: [u32; 11usize],
    pub CONFIG: u32,
    pub RESERVED7: [u32; 681usize],
    pub POWER: u32,
}
#[test]
fn bindgen_test_layout_NRF_SPI_Type() {
    assert_eq!(::core::mem::size_of::<NRF_SPI_Type>() , 4096usize , concat ! (
               "Size of: " , stringify ! ( NRF_SPI_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_SPI_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( NRF_SPI_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPI_Type ) ) . RESERVED0 as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPI_Type ) , "::" ,
                stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPI_Type ) ) . EVENTS_READY as *
                const _ as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPI_Type ) , "::" ,
                stringify ! ( EVENTS_READY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPI_Type ) ) . RESERVED1 as * const _
                as usize } , 268usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPI_Type ) , "::" ,
                stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPI_Type ) ) . INTENSET as * const _
                as usize } , 772usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPI_Type ) , "::" ,
                stringify ! ( INTENSET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPI_Type ) ) . INTENCLR as * const _
                as usize } , 776usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPI_Type ) , "::" ,
                stringify ! ( INTENCLR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPI_Type ) ) . RESERVED2 as * const _
                as usize } , 780usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPI_Type ) , "::" ,
                stringify ! ( RESERVED2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPI_Type ) ) . ENABLE as * const _ as
                usize } , 1280usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPI_Type ) , "::" ,
                stringify ! ( ENABLE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPI_Type ) ) . RESERVED3 as * const _
                as usize } , 1284usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPI_Type ) , "::" ,
                stringify ! ( RESERVED3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPI_Type ) ) . PSELSCK as * const _
                as usize } , 1288usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPI_Type ) , "::" ,
                stringify ! ( PSELSCK ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPI_Type ) ) . PSELMOSI as * const _
                as usize } , 1292usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPI_Type ) , "::" ,
                stringify ! ( PSELMOSI ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPI_Type ) ) . PSELMISO as * const _
                as usize } , 1296usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPI_Type ) , "::" ,
                stringify ! ( PSELMISO ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPI_Type ) ) . RESERVED4 as * const _
                as usize } , 1300usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPI_Type ) , "::" ,
                stringify ! ( RESERVED4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPI_Type ) ) . RXD as * const _ as
                usize } , 1304usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPI_Type ) , "::" ,
                stringify ! ( RXD ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPI_Type ) ) . TXD as * const _ as
                usize } , 1308usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPI_Type ) , "::" ,
                stringify ! ( TXD ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPI_Type ) ) . RESERVED5 as * const _
                as usize } , 1312usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPI_Type ) , "::" ,
                stringify ! ( RESERVED5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPI_Type ) ) . FREQUENCY as * const _
                as usize } , 1316usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPI_Type ) , "::" ,
                stringify ! ( FREQUENCY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPI_Type ) ) . RESERVED6 as * const _
                as usize } , 1320usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPI_Type ) , "::" ,
                stringify ! ( RESERVED6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPI_Type ) ) . CONFIG as * const _ as
                usize } , 1364usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPI_Type ) , "::" ,
                stringify ! ( CONFIG ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPI_Type ) ) . RESERVED7 as * const _
                as usize } , 1368usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPI_Type ) , "::" ,
                stringify ! ( RESERVED7 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPI_Type ) ) . POWER as * const _ as
                usize } , 4092usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPI_Type ) , "::" ,
                stringify ! ( POWER ) ));
}
#[repr(C)]
pub struct NRF_TWI_Type {
    pub TASKS_STARTRX: u32,
    pub RESERVED0: u32,
    pub TASKS_STARTTX: u32,
    pub RESERVED1: [u32; 2usize],
    pub TASKS_STOP: u32,
    pub RESERVED2: u32,
    pub TASKS_SUSPEND: u32,
    pub TASKS_RESUME: u32,
    pub RESERVED3: [u32; 56usize],
    pub EVENTS_STOPPED: u32,
    pub EVENTS_RXDREADY: u32,
    pub RESERVED4: [u32; 4usize],
    pub EVENTS_TXDSENT: u32,
    pub RESERVED5: u32,
    pub EVENTS_ERROR: u32,
    pub RESERVED6: [u32; 4usize],
    pub EVENTS_BB: u32,
    pub RESERVED7: [u32; 3usize],
    pub EVENTS_SUSPENDED: u32,
    pub RESERVED8: [u32; 45usize],
    pub SHORTS: u32,
    pub RESERVED9: [u32; 64usize],
    pub INTENSET: u32,
    pub INTENCLR: u32,
    pub RESERVED10: [u32; 110usize],
    pub ERRORSRC: u32,
    pub RESERVED11: [u32; 14usize],
    pub ENABLE: u32,
    pub RESERVED12: u32,
    pub PSELSCL: u32,
    pub PSELSDA: u32,
    pub RESERVED13: [u32; 2usize],
    pub RXD: u32,
    pub TXD: u32,
    pub RESERVED14: u32,
    pub FREQUENCY: u32,
    pub RESERVED15: [u32; 24usize],
    pub ADDRESS: u32,
    pub RESERVED16: [u32; 668usize],
    pub POWER: u32,
}
#[test]
fn bindgen_test_layout_NRF_TWI_Type() {
    assert_eq!(::core::mem::size_of::<NRF_TWI_Type>() , 4096usize , concat ! (
               "Size of: " , stringify ! ( NRF_TWI_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_TWI_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( NRF_TWI_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . TASKS_STARTRX as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( TASKS_STARTRX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . RESERVED0 as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . TASKS_STARTTX as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( TASKS_STARTTX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . RESERVED1 as * const _
                as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . TASKS_STOP as * const
                _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( TASKS_STOP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . RESERVED2 as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( RESERVED2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . TASKS_SUSPEND as *
                const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( TASKS_SUSPEND ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . TASKS_RESUME as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( TASKS_RESUME ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . RESERVED3 as * const _
                as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( RESERVED3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . EVENTS_STOPPED as *
                const _ as usize } , 260usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( EVENTS_STOPPED ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . EVENTS_RXDREADY as *
                const _ as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( EVENTS_RXDREADY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . RESERVED4 as * const _
                as usize } , 268usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( RESERVED4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . EVENTS_TXDSENT as *
                const _ as usize } , 284usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( EVENTS_TXDSENT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . RESERVED5 as * const _
                as usize } , 288usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( RESERVED5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . EVENTS_ERROR as *
                const _ as usize } , 292usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( EVENTS_ERROR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . RESERVED6 as * const _
                as usize } , 296usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( RESERVED6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . EVENTS_BB as * const _
                as usize } , 312usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( EVENTS_BB ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . RESERVED7 as * const _
                as usize } , 316usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( RESERVED7 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . EVENTS_SUSPENDED as *
                const _ as usize } , 328usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( EVENTS_SUSPENDED ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . RESERVED8 as * const _
                as usize } , 332usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( RESERVED8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . SHORTS as * const _ as
                usize } , 512usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( SHORTS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . RESERVED9 as * const _
                as usize } , 516usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( RESERVED9 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . INTENSET as * const _
                as usize } , 772usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( INTENSET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . INTENCLR as * const _
                as usize } , 776usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( INTENCLR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . RESERVED10 as * const
                _ as usize } , 780usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( RESERVED10 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . ERRORSRC as * const _
                as usize } , 1220usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( ERRORSRC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . RESERVED11 as * const
                _ as usize } , 1224usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( RESERVED11 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . ENABLE as * const _ as
                usize } , 1280usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( ENABLE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . RESERVED12 as * const
                _ as usize } , 1284usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( RESERVED12 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . PSELSCL as * const _
                as usize } , 1288usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( PSELSCL ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . PSELSDA as * const _
                as usize } , 1292usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( PSELSDA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . RESERVED13 as * const
                _ as usize } , 1296usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( RESERVED13 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . RXD as * const _ as
                usize } , 1304usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( RXD ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . TXD as * const _ as
                usize } , 1308usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( TXD ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . RESERVED14 as * const
                _ as usize } , 1312usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( RESERVED14 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . FREQUENCY as * const _
                as usize } , 1316usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( FREQUENCY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . RESERVED15 as * const
                _ as usize } , 1320usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( RESERVED15 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . ADDRESS as * const _
                as usize } , 1416usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( ADDRESS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . RESERVED16 as * const
                _ as usize } , 1420usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( RESERVED16 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TWI_Type ) ) . POWER as * const _ as
                usize } , 4092usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TWI_Type ) , "::" ,
                stringify ! ( POWER ) ));
}
#[repr(C)]
pub struct NRF_SPIS_Type {
    pub RESERVED0: [u32; 9usize],
    pub TASKS_ACQUIRE: u32,
    pub TASKS_RELEASE: u32,
    pub RESERVED1: [u32; 54usize],
    pub EVENTS_END: u32,
    pub RESERVED2: [u32; 2usize],
    pub EVENTS_ENDRX: u32,
    pub RESERVED3: [u32; 5usize],
    pub EVENTS_ACQUIRED: u32,
    pub RESERVED4: [u32; 53usize],
    pub SHORTS: u32,
    pub RESERVED5: [u32; 64usize],
    pub INTENSET: u32,
    pub INTENCLR: u32,
    pub RESERVED6: [u32; 61usize],
    pub SEMSTAT: u32,
    pub RESERVED7: [u32; 15usize],
    pub STATUS: u32,
    pub RESERVED8: [u32; 47usize],
    pub ENABLE: u32,
    pub RESERVED9: u32,
    pub PSELSCK: u32,
    pub PSELMISO: u32,
    pub PSELMOSI: u32,
    pub PSELCSN: u32,
    pub RESERVED10: [u32; 7usize],
    pub RXDPTR: u32,
    pub MAXRX: u32,
    pub AMOUNTRX: u32,
    pub RESERVED11: u32,
    pub TXDPTR: u32,
    pub MAXTX: u32,
    pub AMOUNTTX: u32,
    pub RESERVED12: u32,
    pub CONFIG: u32,
    pub RESERVED13: u32,
    pub DEF: u32,
    pub RESERVED14: [u32; 24usize],
    pub ORC: u32,
    pub RESERVED15: [u32; 654usize],
    pub POWER: u32,
}
#[test]
fn bindgen_test_layout_NRF_SPIS_Type() {
    assert_eq!(::core::mem::size_of::<NRF_SPIS_Type>() , 4096usize , concat !
               ( "Size of: " , stringify ! ( NRF_SPIS_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_SPIS_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( NRF_SPIS_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . RESERVED0 as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . TASKS_ACQUIRE as *
                const _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( TASKS_ACQUIRE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . TASKS_RELEASE as *
                const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( TASKS_RELEASE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . RESERVED1 as * const
                _ as usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . EVENTS_END as * const
                _ as usize } , 260usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( EVENTS_END ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . RESERVED2 as * const
                _ as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( RESERVED2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . EVENTS_ENDRX as *
                const _ as usize } , 272usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( EVENTS_ENDRX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . RESERVED3 as * const
                _ as usize } , 276usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( RESERVED3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . EVENTS_ACQUIRED as *
                const _ as usize } , 296usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( EVENTS_ACQUIRED ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . RESERVED4 as * const
                _ as usize } , 300usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( RESERVED4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . SHORTS as * const _
                as usize } , 512usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( SHORTS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . RESERVED5 as * const
                _ as usize } , 516usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( RESERVED5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . INTENSET as * const _
                as usize } , 772usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( INTENSET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . INTENCLR as * const _
                as usize } , 776usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( INTENCLR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . RESERVED6 as * const
                _ as usize } , 780usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( RESERVED6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . SEMSTAT as * const _
                as usize } , 1024usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( SEMSTAT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . RESERVED7 as * const
                _ as usize } , 1028usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( RESERVED7 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . STATUS as * const _
                as usize } , 1088usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( STATUS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . RESERVED8 as * const
                _ as usize } , 1092usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( RESERVED8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . ENABLE as * const _
                as usize } , 1280usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( ENABLE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . RESERVED9 as * const
                _ as usize } , 1284usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( RESERVED9 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . PSELSCK as * const _
                as usize } , 1288usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( PSELSCK ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . PSELMISO as * const _
                as usize } , 1292usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( PSELMISO ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . PSELMOSI as * const _
                as usize } , 1296usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( PSELMOSI ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . PSELCSN as * const _
                as usize } , 1300usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( PSELCSN ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . RESERVED10 as * const
                _ as usize } , 1304usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( RESERVED10 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . RXDPTR as * const _
                as usize } , 1332usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( RXDPTR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . MAXRX as * const _ as
                usize } , 1336usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( MAXRX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . AMOUNTRX as * const _
                as usize } , 1340usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( AMOUNTRX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . RESERVED11 as * const
                _ as usize } , 1344usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( RESERVED11 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . TXDPTR as * const _
                as usize } , 1348usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( TXDPTR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . MAXTX as * const _ as
                usize } , 1352usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( MAXTX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . AMOUNTTX as * const _
                as usize } , 1356usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( AMOUNTTX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . RESERVED12 as * const
                _ as usize } , 1360usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( RESERVED12 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . CONFIG as * const _
                as usize } , 1364usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( CONFIG ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . RESERVED13 as * const
                _ as usize } , 1368usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( RESERVED13 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . DEF as * const _ as
                usize } , 1372usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( DEF ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . RESERVED14 as * const
                _ as usize } , 1376usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( RESERVED14 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . ORC as * const _ as
                usize } , 1472usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( ORC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . RESERVED15 as * const
                _ as usize } , 1476usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( RESERVED15 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SPIS_Type ) ) . POWER as * const _ as
                usize } , 4092usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SPIS_Type ) , "::"
                , stringify ! ( POWER ) ));
}
#[repr(C)]
pub struct NRF_GPIOTE_Type {
    pub TASKS_OUT: [u32; 4usize],
    pub RESERVED0: [u32; 60usize],
    pub EVENTS_IN: [u32; 4usize],
    pub RESERVED1: [u32; 27usize],
    pub EVENTS_PORT: u32,
    pub RESERVED2: [u32; 97usize],
    pub INTENSET: u32,
    pub INTENCLR: u32,
    pub RESERVED3: [u32; 129usize],
    pub CONFIG: [u32; 4usize],
    pub RESERVED4: [u32; 695usize],
    pub POWER: u32,
}
#[test]
fn bindgen_test_layout_NRF_GPIOTE_Type() {
    assert_eq!(::core::mem::size_of::<NRF_GPIOTE_Type>() , 4096usize , concat
               ! ( "Size of: " , stringify ! ( NRF_GPIOTE_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_GPIOTE_Type>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( NRF_GPIOTE_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_GPIOTE_Type ) ) . TASKS_OUT as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_GPIOTE_Type ) ,
                "::" , stringify ! ( TASKS_OUT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_GPIOTE_Type ) ) . RESERVED0 as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_GPIOTE_Type ) ,
                "::" , stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_GPIOTE_Type ) ) . EVENTS_IN as *
                const _ as usize } , 256usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_GPIOTE_Type ) ,
                "::" , stringify ! ( EVENTS_IN ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_GPIOTE_Type ) ) . RESERVED1 as *
                const _ as usize } , 272usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_GPIOTE_Type ) ,
                "::" , stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_GPIOTE_Type ) ) . EVENTS_PORT as *
                const _ as usize } , 380usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_GPIOTE_Type ) ,
                "::" , stringify ! ( EVENTS_PORT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_GPIOTE_Type ) ) . RESERVED2 as *
                const _ as usize } , 384usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_GPIOTE_Type ) ,
                "::" , stringify ! ( RESERVED2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_GPIOTE_Type ) ) . INTENSET as * const
                _ as usize } , 772usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_GPIOTE_Type ) ,
                "::" , stringify ! ( INTENSET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_GPIOTE_Type ) ) . INTENCLR as * const
                _ as usize } , 776usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_GPIOTE_Type ) ,
                "::" , stringify ! ( INTENCLR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_GPIOTE_Type ) ) . RESERVED3 as *
                const _ as usize } , 780usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_GPIOTE_Type ) ,
                "::" , stringify ! ( RESERVED3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_GPIOTE_Type ) ) . CONFIG as * const _
                as usize } , 1296usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_GPIOTE_Type ) ,
                "::" , stringify ! ( CONFIG ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_GPIOTE_Type ) ) . RESERVED4 as *
                const _ as usize } , 1312usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_GPIOTE_Type ) ,
                "::" , stringify ! ( RESERVED4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_GPIOTE_Type ) ) . POWER as * const _
                as usize } , 4092usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_GPIOTE_Type ) ,
                "::" , stringify ! ( POWER ) ));
}
#[repr(C)]
pub struct NRF_ADC_Type {
    pub TASKS_START: u32,
    pub TASKS_STOP: u32,
    pub RESERVED0: [u32; 62usize],
    pub EVENTS_END: u32,
    pub RESERVED1: [u32; 128usize],
    pub INTENSET: u32,
    pub INTENCLR: u32,
    pub RESERVED2: [u32; 61usize],
    pub BUSY: u32,
    pub RESERVED3: [u32; 63usize],
    pub ENABLE: u32,
    pub CONFIG: u32,
    pub RESULT: u32,
    pub RESERVED4: [u32; 700usize],
    pub POWER: u32,
}
#[test]
fn bindgen_test_layout_NRF_ADC_Type() {
    assert_eq!(::core::mem::size_of::<NRF_ADC_Type>() , 4096usize , concat ! (
               "Size of: " , stringify ! ( NRF_ADC_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_ADC_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( NRF_ADC_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ADC_Type ) ) . TASKS_START as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ADC_Type ) , "::" ,
                stringify ! ( TASKS_START ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ADC_Type ) ) . TASKS_STOP as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ADC_Type ) , "::" ,
                stringify ! ( TASKS_STOP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ADC_Type ) ) . RESERVED0 as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ADC_Type ) , "::" ,
                stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ADC_Type ) ) . EVENTS_END as * const
                _ as usize } , 256usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ADC_Type ) , "::" ,
                stringify ! ( EVENTS_END ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ADC_Type ) ) . RESERVED1 as * const _
                as usize } , 260usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ADC_Type ) , "::" ,
                stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ADC_Type ) ) . INTENSET as * const _
                as usize } , 772usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ADC_Type ) , "::" ,
                stringify ! ( INTENSET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ADC_Type ) ) . INTENCLR as * const _
                as usize } , 776usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ADC_Type ) , "::" ,
                stringify ! ( INTENCLR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ADC_Type ) ) . RESERVED2 as * const _
                as usize } , 780usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ADC_Type ) , "::" ,
                stringify ! ( RESERVED2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ADC_Type ) ) . BUSY as * const _ as
                usize } , 1024usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ADC_Type ) , "::" ,
                stringify ! ( BUSY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ADC_Type ) ) . RESERVED3 as * const _
                as usize } , 1028usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ADC_Type ) , "::" ,
                stringify ! ( RESERVED3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ADC_Type ) ) . ENABLE as * const _ as
                usize } , 1280usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ADC_Type ) , "::" ,
                stringify ! ( ENABLE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ADC_Type ) ) . CONFIG as * const _ as
                usize } , 1284usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ADC_Type ) , "::" ,
                stringify ! ( CONFIG ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ADC_Type ) ) . RESULT as * const _ as
                usize } , 1288usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ADC_Type ) , "::" ,
                stringify ! ( RESULT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ADC_Type ) ) . RESERVED4 as * const _
                as usize } , 1292usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ADC_Type ) , "::" ,
                stringify ! ( RESERVED4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ADC_Type ) ) . POWER as * const _ as
                usize } , 4092usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ADC_Type ) , "::" ,
                stringify ! ( POWER ) ));
}
#[repr(C)]
pub struct NRF_TIMER_Type {
    pub TASKS_START: u32,
    pub TASKS_STOP: u32,
    pub TASKS_COUNT: u32,
    pub TASKS_CLEAR: u32,
    pub TASKS_SHUTDOWN: u32,
    pub RESERVED0: [u32; 11usize],
    pub TASKS_CAPTURE: [u32; 4usize],
    pub RESERVED1: [u32; 60usize],
    pub EVENTS_COMPARE: [u32; 4usize],
    pub RESERVED2: [u32; 44usize],
    pub SHORTS: u32,
    pub RESERVED3: [u32; 64usize],
    pub INTENSET: u32,
    pub INTENCLR: u32,
    pub RESERVED4: [u32; 126usize],
    pub MODE: u32,
    pub BITMODE: u32,
    pub RESERVED5: u32,
    pub PRESCALER: u32,
    pub RESERVED6: [u32; 11usize],
    pub CC: [u32; 4usize],
    pub RESERVED7: [u32; 683usize],
    pub POWER: u32,
}
#[test]
fn bindgen_test_layout_NRF_TIMER_Type() {
    assert_eq!(::core::mem::size_of::<NRF_TIMER_Type>() , 4096usize , concat !
               ( "Size of: " , stringify ! ( NRF_TIMER_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_TIMER_Type>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( NRF_TIMER_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TIMER_Type ) ) . TASKS_START as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TIMER_Type ) , "::"
                , stringify ! ( TASKS_START ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TIMER_Type ) ) . TASKS_STOP as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TIMER_Type ) , "::"
                , stringify ! ( TASKS_STOP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TIMER_Type ) ) . TASKS_COUNT as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TIMER_Type ) , "::"
                , stringify ! ( TASKS_COUNT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TIMER_Type ) ) . TASKS_CLEAR as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TIMER_Type ) , "::"
                , stringify ! ( TASKS_CLEAR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TIMER_Type ) ) . TASKS_SHUTDOWN as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TIMER_Type ) , "::"
                , stringify ! ( TASKS_SHUTDOWN ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TIMER_Type ) ) . RESERVED0 as * const
                _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TIMER_Type ) , "::"
                , stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TIMER_Type ) ) . TASKS_CAPTURE as *
                const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TIMER_Type ) , "::"
                , stringify ! ( TASKS_CAPTURE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TIMER_Type ) ) . RESERVED1 as * const
                _ as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TIMER_Type ) , "::"
                , stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TIMER_Type ) ) . EVENTS_COMPARE as *
                const _ as usize } , 320usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TIMER_Type ) , "::"
                , stringify ! ( EVENTS_COMPARE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TIMER_Type ) ) . RESERVED2 as * const
                _ as usize } , 336usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TIMER_Type ) , "::"
                , stringify ! ( RESERVED2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TIMER_Type ) ) . SHORTS as * const _
                as usize } , 512usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TIMER_Type ) , "::"
                , stringify ! ( SHORTS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TIMER_Type ) ) . RESERVED3 as * const
                _ as usize } , 516usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TIMER_Type ) , "::"
                , stringify ! ( RESERVED3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TIMER_Type ) ) . INTENSET as * const
                _ as usize } , 772usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TIMER_Type ) , "::"
                , stringify ! ( INTENSET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TIMER_Type ) ) . INTENCLR as * const
                _ as usize } , 776usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TIMER_Type ) , "::"
                , stringify ! ( INTENCLR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TIMER_Type ) ) . RESERVED4 as * const
                _ as usize } , 780usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TIMER_Type ) , "::"
                , stringify ! ( RESERVED4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TIMER_Type ) ) . MODE as * const _ as
                usize } , 1284usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TIMER_Type ) , "::"
                , stringify ! ( MODE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TIMER_Type ) ) . BITMODE as * const _
                as usize } , 1288usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TIMER_Type ) , "::"
                , stringify ! ( BITMODE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TIMER_Type ) ) . RESERVED5 as * const
                _ as usize } , 1292usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TIMER_Type ) , "::"
                , stringify ! ( RESERVED5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TIMER_Type ) ) . PRESCALER as * const
                _ as usize } , 1296usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TIMER_Type ) , "::"
                , stringify ! ( PRESCALER ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TIMER_Type ) ) . RESERVED6 as * const
                _ as usize } , 1300usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TIMER_Type ) , "::"
                , stringify ! ( RESERVED6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TIMER_Type ) ) . CC as * const _ as
                usize } , 1344usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TIMER_Type ) , "::"
                , stringify ! ( CC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TIMER_Type ) ) . RESERVED7 as * const
                _ as usize } , 1360usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TIMER_Type ) , "::"
                , stringify ! ( RESERVED7 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TIMER_Type ) ) . POWER as * const _
                as usize } , 4092usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TIMER_Type ) , "::"
                , stringify ! ( POWER ) ));
}
#[repr(C)]
pub struct NRF_RTC_Type {
    pub TASKS_START: u32,
    pub TASKS_STOP: u32,
    pub TASKS_CLEAR: u32,
    pub TASKS_TRIGOVRFLW: u32,
    pub RESERVED0: [u32; 60usize],
    pub EVENTS_TICK: u32,
    pub EVENTS_OVRFLW: u32,
    pub RESERVED1: [u32; 14usize],
    pub EVENTS_COMPARE: [u32; 4usize],
    pub RESERVED2: [u32; 109usize],
    pub INTENSET: u32,
    pub INTENCLR: u32,
    pub RESERVED3: [u32; 13usize],
    pub EVTEN: u32,
    pub EVTENSET: u32,
    pub EVTENCLR: u32,
    pub RESERVED4: [u32; 110usize],
    pub COUNTER: u32,
    pub PRESCALER: u32,
    pub RESERVED5: [u32; 13usize],
    pub CC: [u32; 4usize],
    pub RESERVED6: [u32; 683usize],
    pub POWER: u32,
}
#[test]
fn bindgen_test_layout_NRF_RTC_Type() {
    assert_eq!(::core::mem::size_of::<NRF_RTC_Type>() , 4096usize , concat ! (
               "Size of: " , stringify ! ( NRF_RTC_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_RTC_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( NRF_RTC_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RTC_Type ) ) . TASKS_START as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RTC_Type ) , "::" ,
                stringify ! ( TASKS_START ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RTC_Type ) ) . TASKS_STOP as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RTC_Type ) , "::" ,
                stringify ! ( TASKS_STOP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RTC_Type ) ) . TASKS_CLEAR as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RTC_Type ) , "::" ,
                stringify ! ( TASKS_CLEAR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RTC_Type ) ) . TASKS_TRIGOVRFLW as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RTC_Type ) , "::" ,
                stringify ! ( TASKS_TRIGOVRFLW ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RTC_Type ) ) . RESERVED0 as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RTC_Type ) , "::" ,
                stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RTC_Type ) ) . EVENTS_TICK as * const
                _ as usize } , 256usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RTC_Type ) , "::" ,
                stringify ! ( EVENTS_TICK ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RTC_Type ) ) . EVENTS_OVRFLW as *
                const _ as usize } , 260usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RTC_Type ) , "::" ,
                stringify ! ( EVENTS_OVRFLW ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RTC_Type ) ) . RESERVED1 as * const _
                as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RTC_Type ) , "::" ,
                stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RTC_Type ) ) . EVENTS_COMPARE as *
                const _ as usize } , 320usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RTC_Type ) , "::" ,
                stringify ! ( EVENTS_COMPARE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RTC_Type ) ) . RESERVED2 as * const _
                as usize } , 336usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RTC_Type ) , "::" ,
                stringify ! ( RESERVED2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RTC_Type ) ) . INTENSET as * const _
                as usize } , 772usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RTC_Type ) , "::" ,
                stringify ! ( INTENSET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RTC_Type ) ) . INTENCLR as * const _
                as usize } , 776usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RTC_Type ) , "::" ,
                stringify ! ( INTENCLR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RTC_Type ) ) . RESERVED3 as * const _
                as usize } , 780usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RTC_Type ) , "::" ,
                stringify ! ( RESERVED3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RTC_Type ) ) . EVTEN as * const _ as
                usize } , 832usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RTC_Type ) , "::" ,
                stringify ! ( EVTEN ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RTC_Type ) ) . EVTENSET as * const _
                as usize } , 836usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RTC_Type ) , "::" ,
                stringify ! ( EVTENSET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RTC_Type ) ) . EVTENCLR as * const _
                as usize } , 840usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RTC_Type ) , "::" ,
                stringify ! ( EVTENCLR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RTC_Type ) ) . RESERVED4 as * const _
                as usize } , 844usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RTC_Type ) , "::" ,
                stringify ! ( RESERVED4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RTC_Type ) ) . COUNTER as * const _
                as usize } , 1284usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RTC_Type ) , "::" ,
                stringify ! ( COUNTER ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RTC_Type ) ) . PRESCALER as * const _
                as usize } , 1288usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RTC_Type ) , "::" ,
                stringify ! ( PRESCALER ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RTC_Type ) ) . RESERVED5 as * const _
                as usize } , 1292usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RTC_Type ) , "::" ,
                stringify ! ( RESERVED5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RTC_Type ) ) . CC as * const _ as
                usize } , 1344usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RTC_Type ) , "::" ,
                stringify ! ( CC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RTC_Type ) ) . RESERVED6 as * const _
                as usize } , 1360usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RTC_Type ) , "::" ,
                stringify ! ( RESERVED6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RTC_Type ) ) . POWER as * const _ as
                usize } , 4092usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RTC_Type ) , "::" ,
                stringify ! ( POWER ) ));
}
#[repr(C)]
pub struct NRF_TEMP_Type {
    pub TASKS_START: u32,
    pub TASKS_STOP: u32,
    pub RESERVED0: [u32; 62usize],
    pub EVENTS_DATARDY: u32,
    pub RESERVED1: [u32; 128usize],
    pub INTENSET: u32,
    pub INTENCLR: u32,
    pub RESERVED2: [u32; 127usize],
    pub TEMP: i32,
    pub RESERVED3: [u32; 700usize],
    pub POWER: u32,
}
#[test]
fn bindgen_test_layout_NRF_TEMP_Type() {
    assert_eq!(::core::mem::size_of::<NRF_TEMP_Type>() , 4096usize , concat !
               ( "Size of: " , stringify ! ( NRF_TEMP_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_TEMP_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( NRF_TEMP_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TEMP_Type ) ) . TASKS_START as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TEMP_Type ) , "::"
                , stringify ! ( TASKS_START ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TEMP_Type ) ) . TASKS_STOP as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TEMP_Type ) , "::"
                , stringify ! ( TASKS_STOP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TEMP_Type ) ) . RESERVED0 as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TEMP_Type ) , "::"
                , stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TEMP_Type ) ) . EVENTS_DATARDY as *
                const _ as usize } , 256usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TEMP_Type ) , "::"
                , stringify ! ( EVENTS_DATARDY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TEMP_Type ) ) . RESERVED1 as * const
                _ as usize } , 260usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TEMP_Type ) , "::"
                , stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TEMP_Type ) ) . INTENSET as * const _
                as usize } , 772usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TEMP_Type ) , "::"
                , stringify ! ( INTENSET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TEMP_Type ) ) . INTENCLR as * const _
                as usize } , 776usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TEMP_Type ) , "::"
                , stringify ! ( INTENCLR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TEMP_Type ) ) . RESERVED2 as * const
                _ as usize } , 780usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TEMP_Type ) , "::"
                , stringify ! ( RESERVED2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TEMP_Type ) ) . TEMP as * const _ as
                usize } , 1288usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TEMP_Type ) , "::"
                , stringify ! ( TEMP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TEMP_Type ) ) . RESERVED3 as * const
                _ as usize } , 1292usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TEMP_Type ) , "::"
                , stringify ! ( RESERVED3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_TEMP_Type ) ) . POWER as * const _ as
                usize } , 4092usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_TEMP_Type ) , "::"
                , stringify ! ( POWER ) ));
}
#[repr(C)]
pub struct NRF_RNG_Type {
    pub TASKS_START: u32,
    pub TASKS_STOP: u32,
    pub RESERVED0: [u32; 62usize],
    pub EVENTS_VALRDY: u32,
    pub RESERVED1: [u32; 63usize],
    pub SHORTS: u32,
    pub RESERVED2: [u32; 64usize],
    pub INTENSET: u32,
    pub INTENCLR: u32,
    pub RESERVED3: [u32; 126usize],
    pub CONFIG: u32,
    pub VALUE: u32,
    pub RESERVED4: [u32; 700usize],
    pub POWER: u32,
}
#[test]
fn bindgen_test_layout_NRF_RNG_Type() {
    assert_eq!(::core::mem::size_of::<NRF_RNG_Type>() , 4096usize , concat ! (
               "Size of: " , stringify ! ( NRF_RNG_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_RNG_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( NRF_RNG_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RNG_Type ) ) . TASKS_START as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RNG_Type ) , "::" ,
                stringify ! ( TASKS_START ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RNG_Type ) ) . TASKS_STOP as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RNG_Type ) , "::" ,
                stringify ! ( TASKS_STOP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RNG_Type ) ) . RESERVED0 as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RNG_Type ) , "::" ,
                stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RNG_Type ) ) . EVENTS_VALRDY as *
                const _ as usize } , 256usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RNG_Type ) , "::" ,
                stringify ! ( EVENTS_VALRDY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RNG_Type ) ) . RESERVED1 as * const _
                as usize } , 260usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RNG_Type ) , "::" ,
                stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RNG_Type ) ) . SHORTS as * const _ as
                usize } , 512usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RNG_Type ) , "::" ,
                stringify ! ( SHORTS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RNG_Type ) ) . RESERVED2 as * const _
                as usize } , 516usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RNG_Type ) , "::" ,
                stringify ! ( RESERVED2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RNG_Type ) ) . INTENSET as * const _
                as usize } , 772usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RNG_Type ) , "::" ,
                stringify ! ( INTENSET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RNG_Type ) ) . INTENCLR as * const _
                as usize } , 776usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RNG_Type ) , "::" ,
                stringify ! ( INTENCLR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RNG_Type ) ) . RESERVED3 as * const _
                as usize } , 780usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RNG_Type ) , "::" ,
                stringify ! ( RESERVED3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RNG_Type ) ) . CONFIG as * const _ as
                usize } , 1284usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RNG_Type ) , "::" ,
                stringify ! ( CONFIG ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RNG_Type ) ) . VALUE as * const _ as
                usize } , 1288usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RNG_Type ) , "::" ,
                stringify ! ( VALUE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RNG_Type ) ) . RESERVED4 as * const _
                as usize } , 1292usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RNG_Type ) , "::" ,
                stringify ! ( RESERVED4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_RNG_Type ) ) . POWER as * const _ as
                usize } , 4092usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_RNG_Type ) , "::" ,
                stringify ! ( POWER ) ));
}
#[repr(C)]
pub struct NRF_ECB_Type {
    pub TASKS_STARTECB: u32,
    pub TASKS_STOPECB: u32,
    pub RESERVED0: [u32; 62usize],
    pub EVENTS_ENDECB: u32,
    pub EVENTS_ERRORECB: u32,
    pub RESERVED1: [u32; 127usize],
    pub INTENSET: u32,
    pub INTENCLR: u32,
    pub RESERVED2: [u32; 126usize],
    pub ECBDATAPTR: u32,
    pub RESERVED3: [u32; 701usize],
    pub POWER: u32,
}
#[test]
fn bindgen_test_layout_NRF_ECB_Type() {
    assert_eq!(::core::mem::size_of::<NRF_ECB_Type>() , 4096usize , concat ! (
               "Size of: " , stringify ! ( NRF_ECB_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_ECB_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( NRF_ECB_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ECB_Type ) ) . TASKS_STARTECB as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ECB_Type ) , "::" ,
                stringify ! ( TASKS_STARTECB ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ECB_Type ) ) . TASKS_STOPECB as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ECB_Type ) , "::" ,
                stringify ! ( TASKS_STOPECB ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ECB_Type ) ) . RESERVED0 as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ECB_Type ) , "::" ,
                stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ECB_Type ) ) . EVENTS_ENDECB as *
                const _ as usize } , 256usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ECB_Type ) , "::" ,
                stringify ! ( EVENTS_ENDECB ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ECB_Type ) ) . EVENTS_ERRORECB as *
                const _ as usize } , 260usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ECB_Type ) , "::" ,
                stringify ! ( EVENTS_ERRORECB ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ECB_Type ) ) . RESERVED1 as * const _
                as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ECB_Type ) , "::" ,
                stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ECB_Type ) ) . INTENSET as * const _
                as usize } , 772usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ECB_Type ) , "::" ,
                stringify ! ( INTENSET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ECB_Type ) ) . INTENCLR as * const _
                as usize } , 776usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ECB_Type ) , "::" ,
                stringify ! ( INTENCLR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ECB_Type ) ) . RESERVED2 as * const _
                as usize } , 780usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ECB_Type ) , "::" ,
                stringify ! ( RESERVED2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ECB_Type ) ) . ECBDATAPTR as * const
                _ as usize } , 1284usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ECB_Type ) , "::" ,
                stringify ! ( ECBDATAPTR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ECB_Type ) ) . RESERVED3 as * const _
                as usize } , 1288usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ECB_Type ) , "::" ,
                stringify ! ( RESERVED3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_ECB_Type ) ) . POWER as * const _ as
                usize } , 4092usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_ECB_Type ) , "::" ,
                stringify ! ( POWER ) ));
}
#[repr(C)]
pub struct NRF_AAR_Type {
    pub TASKS_START: u32,
    pub RESERVED0: u32,
    pub TASKS_STOP: u32,
    pub RESERVED1: [u32; 61usize],
    pub EVENTS_END: u32,
    pub EVENTS_RESOLVED: u32,
    pub EVENTS_NOTRESOLVED: u32,
    pub RESERVED2: [u32; 126usize],
    pub INTENSET: u32,
    pub INTENCLR: u32,
    pub RESERVED3: [u32; 61usize],
    pub STATUS: u32,
    pub RESERVED4: [u32; 63usize],
    pub ENABLE: u32,
    pub NIRK: u32,
    pub IRKPTR: u32,
    pub RESERVED5: u32,
    pub ADDRPTR: u32,
    pub SCRATCHPTR: u32,
    pub RESERVED6: [u32; 697usize],
    pub POWER: u32,
}
#[test]
fn bindgen_test_layout_NRF_AAR_Type() {
    assert_eq!(::core::mem::size_of::<NRF_AAR_Type>() , 4096usize , concat ! (
               "Size of: " , stringify ! ( NRF_AAR_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_AAR_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( NRF_AAR_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_AAR_Type ) ) . TASKS_START as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_AAR_Type ) , "::" ,
                stringify ! ( TASKS_START ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_AAR_Type ) ) . RESERVED0 as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_AAR_Type ) , "::" ,
                stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_AAR_Type ) ) . TASKS_STOP as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_AAR_Type ) , "::" ,
                stringify ! ( TASKS_STOP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_AAR_Type ) ) . RESERVED1 as * const _
                as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_AAR_Type ) , "::" ,
                stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_AAR_Type ) ) . EVENTS_END as * const
                _ as usize } , 256usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_AAR_Type ) , "::" ,
                stringify ! ( EVENTS_END ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_AAR_Type ) ) . EVENTS_RESOLVED as *
                const _ as usize } , 260usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_AAR_Type ) , "::" ,
                stringify ! ( EVENTS_RESOLVED ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_AAR_Type ) ) . EVENTS_NOTRESOLVED as
                * const _ as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_AAR_Type ) , "::" ,
                stringify ! ( EVENTS_NOTRESOLVED ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_AAR_Type ) ) . RESERVED2 as * const _
                as usize } , 268usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_AAR_Type ) , "::" ,
                stringify ! ( RESERVED2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_AAR_Type ) ) . INTENSET as * const _
                as usize } , 772usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_AAR_Type ) , "::" ,
                stringify ! ( INTENSET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_AAR_Type ) ) . INTENCLR as * const _
                as usize } , 776usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_AAR_Type ) , "::" ,
                stringify ! ( INTENCLR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_AAR_Type ) ) . RESERVED3 as * const _
                as usize } , 780usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_AAR_Type ) , "::" ,
                stringify ! ( RESERVED3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_AAR_Type ) ) . STATUS as * const _ as
                usize } , 1024usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_AAR_Type ) , "::" ,
                stringify ! ( STATUS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_AAR_Type ) ) . RESERVED4 as * const _
                as usize } , 1028usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_AAR_Type ) , "::" ,
                stringify ! ( RESERVED4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_AAR_Type ) ) . ENABLE as * const _ as
                usize } , 1280usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_AAR_Type ) , "::" ,
                stringify ! ( ENABLE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_AAR_Type ) ) . NIRK as * const _ as
                usize } , 1284usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_AAR_Type ) , "::" ,
                stringify ! ( NIRK ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_AAR_Type ) ) . IRKPTR as * const _ as
                usize } , 1288usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_AAR_Type ) , "::" ,
                stringify ! ( IRKPTR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_AAR_Type ) ) . RESERVED5 as * const _
                as usize } , 1292usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_AAR_Type ) , "::" ,
                stringify ! ( RESERVED5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_AAR_Type ) ) . ADDRPTR as * const _
                as usize } , 1296usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_AAR_Type ) , "::" ,
                stringify ! ( ADDRPTR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_AAR_Type ) ) . SCRATCHPTR as * const
                _ as usize } , 1300usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_AAR_Type ) , "::" ,
                stringify ! ( SCRATCHPTR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_AAR_Type ) ) . RESERVED6 as * const _
                as usize } , 1304usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_AAR_Type ) , "::" ,
                stringify ! ( RESERVED6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_AAR_Type ) ) . POWER as * const _ as
                usize } , 4092usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_AAR_Type ) , "::" ,
                stringify ! ( POWER ) ));
}
#[repr(C)]
pub struct NRF_CCM_Type {
    pub TASKS_KSGEN: u32,
    pub TASKS_CRYPT: u32,
    pub TASKS_STOP: u32,
    pub RESERVED0: [u32; 61usize],
    pub EVENTS_ENDKSGEN: u32,
    pub EVENTS_ENDCRYPT: u32,
    pub EVENTS_ERROR: u32,
    pub RESERVED1: [u32; 61usize],
    pub SHORTS: u32,
    pub RESERVED2: [u32; 64usize],
    pub INTENSET: u32,
    pub INTENCLR: u32,
    pub RESERVED3: [u32; 61usize],
    pub MICSTATUS: u32,
    pub RESERVED4: [u32; 63usize],
    pub ENABLE: u32,
    pub MODE: u32,
    pub CNFPTR: u32,
    pub INPTR: u32,
    pub OUTPTR: u32,
    pub SCRATCHPTR: u32,
    pub RESERVED5: [u32; 697usize],
    pub POWER: u32,
}
#[test]
fn bindgen_test_layout_NRF_CCM_Type() {
    assert_eq!(::core::mem::size_of::<NRF_CCM_Type>() , 4096usize , concat ! (
               "Size of: " , stringify ! ( NRF_CCM_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_CCM_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( NRF_CCM_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CCM_Type ) ) . TASKS_KSGEN as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CCM_Type ) , "::" ,
                stringify ! ( TASKS_KSGEN ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CCM_Type ) ) . TASKS_CRYPT as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CCM_Type ) , "::" ,
                stringify ! ( TASKS_CRYPT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CCM_Type ) ) . TASKS_STOP as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CCM_Type ) , "::" ,
                stringify ! ( TASKS_STOP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CCM_Type ) ) . RESERVED0 as * const _
                as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CCM_Type ) , "::" ,
                stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CCM_Type ) ) . EVENTS_ENDKSGEN as *
                const _ as usize } , 256usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CCM_Type ) , "::" ,
                stringify ! ( EVENTS_ENDKSGEN ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CCM_Type ) ) . EVENTS_ENDCRYPT as *
                const _ as usize } , 260usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CCM_Type ) , "::" ,
                stringify ! ( EVENTS_ENDCRYPT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CCM_Type ) ) . EVENTS_ERROR as *
                const _ as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CCM_Type ) , "::" ,
                stringify ! ( EVENTS_ERROR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CCM_Type ) ) . RESERVED1 as * const _
                as usize } , 268usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CCM_Type ) , "::" ,
                stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CCM_Type ) ) . SHORTS as * const _ as
                usize } , 512usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CCM_Type ) , "::" ,
                stringify ! ( SHORTS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CCM_Type ) ) . RESERVED2 as * const _
                as usize } , 516usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CCM_Type ) , "::" ,
                stringify ! ( RESERVED2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CCM_Type ) ) . INTENSET as * const _
                as usize } , 772usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CCM_Type ) , "::" ,
                stringify ! ( INTENSET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CCM_Type ) ) . INTENCLR as * const _
                as usize } , 776usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CCM_Type ) , "::" ,
                stringify ! ( INTENCLR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CCM_Type ) ) . RESERVED3 as * const _
                as usize } , 780usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CCM_Type ) , "::" ,
                stringify ! ( RESERVED3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CCM_Type ) ) . MICSTATUS as * const _
                as usize } , 1024usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CCM_Type ) , "::" ,
                stringify ! ( MICSTATUS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CCM_Type ) ) . RESERVED4 as * const _
                as usize } , 1028usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CCM_Type ) , "::" ,
                stringify ! ( RESERVED4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CCM_Type ) ) . ENABLE as * const _ as
                usize } , 1280usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CCM_Type ) , "::" ,
                stringify ! ( ENABLE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CCM_Type ) ) . MODE as * const _ as
                usize } , 1284usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CCM_Type ) , "::" ,
                stringify ! ( MODE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CCM_Type ) ) . CNFPTR as * const _ as
                usize } , 1288usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CCM_Type ) , "::" ,
                stringify ! ( CNFPTR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CCM_Type ) ) . INPTR as * const _ as
                usize } , 1292usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CCM_Type ) , "::" ,
                stringify ! ( INPTR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CCM_Type ) ) . OUTPTR as * const _ as
                usize } , 1296usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CCM_Type ) , "::" ,
                stringify ! ( OUTPTR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CCM_Type ) ) . SCRATCHPTR as * const
                _ as usize } , 1300usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CCM_Type ) , "::" ,
                stringify ! ( SCRATCHPTR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CCM_Type ) ) . RESERVED5 as * const _
                as usize } , 1304usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CCM_Type ) , "::" ,
                stringify ! ( RESERVED5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_CCM_Type ) ) . POWER as * const _ as
                usize } , 4092usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_CCM_Type ) , "::" ,
                stringify ! ( POWER ) ));
}
#[repr(C)]
pub struct NRF_WDT_Type {
    pub TASKS_START: u32,
    pub RESERVED0: [u32; 63usize],
    pub EVENTS_TIMEOUT: u32,
    pub RESERVED1: [u32; 128usize],
    pub INTENSET: u32,
    pub INTENCLR: u32,
    pub RESERVED2: [u32; 61usize],
    pub RUNSTATUS: u32,
    pub REQSTATUS: u32,
    pub RESERVED3: [u32; 63usize],
    pub CRV: u32,
    pub RREN: u32,
    pub CONFIG: u32,
    pub RESERVED4: [u32; 60usize],
    pub RR: [u32; 8usize],
    pub RESERVED5: [u32; 631usize],
    pub POWER: u32,
}
#[test]
fn bindgen_test_layout_NRF_WDT_Type() {
    assert_eq!(::core::mem::size_of::<NRF_WDT_Type>() , 4096usize , concat ! (
               "Size of: " , stringify ! ( NRF_WDT_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_WDT_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( NRF_WDT_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_WDT_Type ) ) . TASKS_START as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_WDT_Type ) , "::" ,
                stringify ! ( TASKS_START ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_WDT_Type ) ) . RESERVED0 as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_WDT_Type ) , "::" ,
                stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_WDT_Type ) ) . EVENTS_TIMEOUT as *
                const _ as usize } , 256usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_WDT_Type ) , "::" ,
                stringify ! ( EVENTS_TIMEOUT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_WDT_Type ) ) . RESERVED1 as * const _
                as usize } , 260usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_WDT_Type ) , "::" ,
                stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_WDT_Type ) ) . INTENSET as * const _
                as usize } , 772usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_WDT_Type ) , "::" ,
                stringify ! ( INTENSET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_WDT_Type ) ) . INTENCLR as * const _
                as usize } , 776usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_WDT_Type ) , "::" ,
                stringify ! ( INTENCLR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_WDT_Type ) ) . RESERVED2 as * const _
                as usize } , 780usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_WDT_Type ) , "::" ,
                stringify ! ( RESERVED2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_WDT_Type ) ) . RUNSTATUS as * const _
                as usize } , 1024usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_WDT_Type ) , "::" ,
                stringify ! ( RUNSTATUS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_WDT_Type ) ) . REQSTATUS as * const _
                as usize } , 1028usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_WDT_Type ) , "::" ,
                stringify ! ( REQSTATUS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_WDT_Type ) ) . RESERVED3 as * const _
                as usize } , 1032usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_WDT_Type ) , "::" ,
                stringify ! ( RESERVED3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_WDT_Type ) ) . CRV as * const _ as
                usize } , 1284usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_WDT_Type ) , "::" ,
                stringify ! ( CRV ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_WDT_Type ) ) . RREN as * const _ as
                usize } , 1288usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_WDT_Type ) , "::" ,
                stringify ! ( RREN ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_WDT_Type ) ) . CONFIG as * const _ as
                usize } , 1292usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_WDT_Type ) , "::" ,
                stringify ! ( CONFIG ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_WDT_Type ) ) . RESERVED4 as * const _
                as usize } , 1296usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_WDT_Type ) , "::" ,
                stringify ! ( RESERVED4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_WDT_Type ) ) . RR as * const _ as
                usize } , 1536usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_WDT_Type ) , "::" ,
                stringify ! ( RR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_WDT_Type ) ) . RESERVED5 as * const _
                as usize } , 1568usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_WDT_Type ) , "::" ,
                stringify ! ( RESERVED5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_WDT_Type ) ) . POWER as * const _ as
                usize } , 4092usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_WDT_Type ) , "::" ,
                stringify ! ( POWER ) ));
}
#[repr(C)]
pub struct NRF_QDEC_Type {
    pub TASKS_START: u32,
    pub TASKS_STOP: u32,
    pub TASKS_READCLRACC: u32,
    pub RESERVED0: [u32; 61usize],
    pub EVENTS_SAMPLERDY: u32,
    pub EVENTS_REPORTRDY: u32,
    pub EVENTS_ACCOF: u32,
    pub RESERVED1: [u32; 61usize],
    pub SHORTS: u32,
    pub RESERVED2: [u32; 64usize],
    pub INTENSET: u32,
    pub INTENCLR: u32,
    pub RESERVED3: [u32; 125usize],
    pub ENABLE: u32,
    pub LEDPOL: u32,
    pub SAMPLEPER: u32,
    pub SAMPLE: i32,
    pub REPORTPER: u32,
    pub ACC: i32,
    pub ACCREAD: i32,
    pub PSELLED: u32,
    pub PSELA: u32,
    pub PSELB: u32,
    pub DBFEN: u32,
    pub RESERVED4: [u32; 5usize],
    pub LEDPRE: u32,
    pub ACCDBL: u32,
    pub ACCDBLREAD: u32,
    pub RESERVED5: [u32; 684usize],
    pub POWER: u32,
}
#[test]
fn bindgen_test_layout_NRF_QDEC_Type() {
    assert_eq!(::core::mem::size_of::<NRF_QDEC_Type>() , 4096usize , concat !
               ( "Size of: " , stringify ! ( NRF_QDEC_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_QDEC_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( NRF_QDEC_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . TASKS_START as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( TASKS_START ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . TASKS_STOP as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( TASKS_STOP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . TASKS_READCLRACC as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( TASKS_READCLRACC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . RESERVED0 as * const
                _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . EVENTS_SAMPLERDY as *
                const _ as usize } , 256usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( EVENTS_SAMPLERDY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . EVENTS_REPORTRDY as *
                const _ as usize } , 260usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( EVENTS_REPORTRDY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . EVENTS_ACCOF as *
                const _ as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( EVENTS_ACCOF ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . RESERVED1 as * const
                _ as usize } , 268usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . SHORTS as * const _
                as usize } , 512usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( SHORTS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . RESERVED2 as * const
                _ as usize } , 516usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( RESERVED2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . INTENSET as * const _
                as usize } , 772usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( INTENSET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . INTENCLR as * const _
                as usize } , 776usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( INTENCLR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . RESERVED3 as * const
                _ as usize } , 780usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( RESERVED3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . ENABLE as * const _
                as usize } , 1280usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( ENABLE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . LEDPOL as * const _
                as usize } , 1284usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( LEDPOL ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . SAMPLEPER as * const
                _ as usize } , 1288usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( SAMPLEPER ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . SAMPLE as * const _
                as usize } , 1292usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( SAMPLE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . REPORTPER as * const
                _ as usize } , 1296usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( REPORTPER ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . ACC as * const _ as
                usize } , 1300usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( ACC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . ACCREAD as * const _
                as usize } , 1304usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( ACCREAD ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . PSELLED as * const _
                as usize } , 1308usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( PSELLED ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . PSELA as * const _ as
                usize } , 1312usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( PSELA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . PSELB as * const _ as
                usize } , 1316usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( PSELB ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . DBFEN as * const _ as
                usize } , 1320usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( DBFEN ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . RESERVED4 as * const
                _ as usize } , 1324usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( RESERVED4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . LEDPRE as * const _
                as usize } , 1344usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( LEDPRE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . ACCDBL as * const _
                as usize } , 1348usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( ACCDBL ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . ACCDBLREAD as * const
                _ as usize } , 1352usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( ACCDBLREAD ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . RESERVED5 as * const
                _ as usize } , 1356usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( RESERVED5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_QDEC_Type ) ) . POWER as * const _ as
                usize } , 4092usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_QDEC_Type ) , "::"
                , stringify ! ( POWER ) ));
}
#[repr(C)]
pub struct NRF_LPCOMP_Type {
    pub TASKS_START: u32,
    pub TASKS_STOP: u32,
    pub TASKS_SAMPLE: u32,
    pub RESERVED0: [u32; 61usize],
    pub EVENTS_READY: u32,
    pub EVENTS_DOWN: u32,
    pub EVENTS_UP: u32,
    pub EVENTS_CROSS: u32,
    pub RESERVED1: [u32; 60usize],
    pub SHORTS: u32,
    pub RESERVED2: [u32; 64usize],
    pub INTENSET: u32,
    pub INTENCLR: u32,
    pub RESERVED3: [u32; 61usize],
    pub RESULT: u32,
    pub RESERVED4: [u32; 63usize],
    pub ENABLE: u32,
    pub PSEL: u32,
    pub REFSEL: u32,
    pub EXTREFSEL: u32,
    pub RESERVED5: [u32; 4usize],
    pub ANADETECT: u32,
    pub RESERVED6: [u32; 694usize],
    pub POWER: u32,
}
#[test]
fn bindgen_test_layout_NRF_LPCOMP_Type() {
    assert_eq!(::core::mem::size_of::<NRF_LPCOMP_Type>() , 4096usize , concat
               ! ( "Size of: " , stringify ! ( NRF_LPCOMP_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_LPCOMP_Type>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( NRF_LPCOMP_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . TASKS_START as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( TASKS_START ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . TASKS_STOP as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( TASKS_STOP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . TASKS_SAMPLE as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( TASKS_SAMPLE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . RESERVED0 as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . EVENTS_READY as *
                const _ as usize } , 256usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( EVENTS_READY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . EVENTS_DOWN as *
                const _ as usize } , 260usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( EVENTS_DOWN ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . EVENTS_UP as *
                const _ as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( EVENTS_UP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . EVENTS_CROSS as *
                const _ as usize } , 268usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( EVENTS_CROSS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . RESERVED1 as *
                const _ as usize } , 272usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . SHORTS as * const _
                as usize } , 512usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( SHORTS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . RESERVED2 as *
                const _ as usize } , 516usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( RESERVED2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . INTENSET as * const
                _ as usize } , 772usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( INTENSET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . INTENCLR as * const
                _ as usize } , 776usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( INTENCLR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . RESERVED3 as *
                const _ as usize } , 780usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( RESERVED3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . RESULT as * const _
                as usize } , 1024usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( RESULT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . RESERVED4 as *
                const _ as usize } , 1028usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( RESERVED4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . ENABLE as * const _
                as usize } , 1280usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( ENABLE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . PSEL as * const _
                as usize } , 1284usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( PSEL ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . REFSEL as * const _
                as usize } , 1288usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( REFSEL ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . EXTREFSEL as *
                const _ as usize } , 1292usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( EXTREFSEL ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . RESERVED5 as *
                const _ as usize } , 1296usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( RESERVED5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . ANADETECT as *
                const _ as usize } , 1312usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( ANADETECT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . RESERVED6 as *
                const _ as usize } , 1316usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( RESERVED6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_LPCOMP_Type ) ) . POWER as * const _
                as usize } , 4092usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_LPCOMP_Type ) ,
                "::" , stringify ! ( POWER ) ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct NRF_SWI_Type {
    pub UNUSED: u32,
}
#[test]
fn bindgen_test_layout_NRF_SWI_Type() {
    assert_eq!(::core::mem::size_of::<NRF_SWI_Type>() , 4usize , concat ! (
               "Size of: " , stringify ! ( NRF_SWI_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_SWI_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( NRF_SWI_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_SWI_Type ) ) . UNUSED as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_SWI_Type ) , "::" ,
                stringify ! ( UNUSED ) ));
}
impl Clone for NRF_SWI_Type {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct NRF_NVMC_Type {
    pub RESERVED0: [u32; 256usize],
    pub READY: u32,
    pub RESERVED1: [u32; 64usize],
    pub CONFIG: u32,
    pub __bindgen_anon_1: NRF_NVMC_Type__bindgen_ty_1,
    pub ERASEALL: u32,
    pub ERASEPCR0: u32,
    pub ERASEUICR: u32,
}
#[repr(C)]
#[derive(Copy)]
pub union NRF_NVMC_Type__bindgen_ty_1 {
    pub ERASEPCR1: u32,
    pub ERASEPAGE: u32,
}
#[test]
fn bindgen_test_layout_NRF_NVMC_Type__bindgen_ty_1() {
    assert_eq!(::core::mem::size_of::<NRF_NVMC_Type__bindgen_ty_1>() , 4usize
               , concat ! (
               "Size of: " , stringify ! ( NRF_NVMC_Type__bindgen_ty_1 ) ));
    assert_eq! (::core::mem::align_of::<NRF_NVMC_Type__bindgen_ty_1>() ,
                4usize , concat ! (
                "Alignment of " , stringify ! ( NRF_NVMC_Type__bindgen_ty_1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_NVMC_Type__bindgen_ty_1 ) ) .
                ERASEPCR1 as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                NRF_NVMC_Type__bindgen_ty_1 ) , "::" , stringify ! ( ERASEPCR1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_NVMC_Type__bindgen_ty_1 ) ) .
                ERASEPAGE as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                NRF_NVMC_Type__bindgen_ty_1 ) , "::" , stringify ! ( ERASEPAGE
                ) ));
}
impl Clone for NRF_NVMC_Type__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_NRF_NVMC_Type() {
    assert_eq!(::core::mem::size_of::<NRF_NVMC_Type>() , 1304usize , concat !
               ( "Size of: " , stringify ! ( NRF_NVMC_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_NVMC_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( NRF_NVMC_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_NVMC_Type ) ) . RESERVED0 as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_NVMC_Type ) , "::"
                , stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_NVMC_Type ) ) . READY as * const _ as
                usize } , 1024usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_NVMC_Type ) , "::"
                , stringify ! ( READY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_NVMC_Type ) ) . RESERVED1 as * const
                _ as usize } , 1028usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_NVMC_Type ) , "::"
                , stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_NVMC_Type ) ) . CONFIG as * const _
                as usize } , 1284usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_NVMC_Type ) , "::"
                , stringify ! ( CONFIG ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_NVMC_Type ) ) . ERASEALL as * const _
                as usize } , 1292usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_NVMC_Type ) , "::"
                , stringify ! ( ERASEALL ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_NVMC_Type ) ) . ERASEPCR0 as * const
                _ as usize } , 1296usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_NVMC_Type ) , "::"
                , stringify ! ( ERASEPCR0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_NVMC_Type ) ) . ERASEUICR as * const
                _ as usize } , 1300usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_NVMC_Type ) , "::"
                , stringify ! ( ERASEUICR ) ));
}
#[repr(C)]
pub struct NRF_PPI_Type {
    pub TASKS_CHG: [PPI_TASKS_CHG_Type; 4usize],
    pub RESERVED0: [u32; 312usize],
    pub CHEN: u32,
    pub CHENSET: u32,
    pub CHENCLR: u32,
    pub RESERVED1: u32,
    pub CH: [PPI_CH_Type; 16usize],
    pub RESERVED2: [u32; 156usize],
    pub CHG: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_NRF_PPI_Type() {
    assert_eq!(::core::mem::size_of::<NRF_PPI_Type>() , 2064usize , concat ! (
               "Size of: " , stringify ! ( NRF_PPI_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_PPI_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( NRF_PPI_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_PPI_Type ) ) . TASKS_CHG as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_PPI_Type ) , "::" ,
                stringify ! ( TASKS_CHG ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_PPI_Type ) ) . RESERVED0 as * const _
                as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_PPI_Type ) , "::" ,
                stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_PPI_Type ) ) . CHEN as * const _ as
                usize } , 1280usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_PPI_Type ) , "::" ,
                stringify ! ( CHEN ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_PPI_Type ) ) . CHENSET as * const _
                as usize } , 1284usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_PPI_Type ) , "::" ,
                stringify ! ( CHENSET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_PPI_Type ) ) . CHENCLR as * const _
                as usize } , 1288usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_PPI_Type ) , "::" ,
                stringify ! ( CHENCLR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_PPI_Type ) ) . RESERVED1 as * const _
                as usize } , 1292usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_PPI_Type ) , "::" ,
                stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_PPI_Type ) ) . CH as * const _ as
                usize } , 1296usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_PPI_Type ) , "::" ,
                stringify ! ( CH ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_PPI_Type ) ) . RESERVED2 as * const _
                as usize } , 1424usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_PPI_Type ) , "::" ,
                stringify ! ( RESERVED2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_PPI_Type ) ) . CHG as * const _ as
                usize } , 2048usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_PPI_Type ) , "::" ,
                stringify ! ( CHG ) ));
}
#[repr(C)]
#[derive(Copy)]
pub struct NRF_FICR_Type {
    pub RESERVED0: [u32; 4usize],
    pub CODEPAGESIZE: u32,
    pub CODESIZE: u32,
    pub RESERVED1: [u32; 4usize],
    pub CLENR0: u32,
    pub PPFC: u32,
    pub RESERVED2: u32,
    pub NUMRAMBLOCK: u32,
    pub __bindgen_anon_1: NRF_FICR_Type__bindgen_ty_1,
    pub RESERVED3: [u32; 5usize],
    pub CONFIGID: u32,
    pub DEVICEID: [u32; 2usize],
    pub RESERVED4: [u32; 6usize],
    pub ER: [u32; 4usize],
    pub IR: [u32; 4usize],
    pub DEVICEADDRTYPE: u32,
    pub DEVICEADDR: [u32; 2usize],
    pub OVERRIDEEN: u32,
    pub NRF_1MBIT: [u32; 5usize],
    pub RESERVED5: [u32; 10usize],
    pub BLE_1MBIT: [u32; 5usize],
}
#[repr(C)]
#[derive(Copy)]
pub union NRF_FICR_Type__bindgen_ty_1 {
    pub SIZERAMBLOCK: [u32; 4usize],
    pub SIZERAMBLOCKS: u32,
}
#[test]
fn bindgen_test_layout_NRF_FICR_Type__bindgen_ty_1() {
    assert_eq!(::core::mem::size_of::<NRF_FICR_Type__bindgen_ty_1>() , 16usize
               , concat ! (
               "Size of: " , stringify ! ( NRF_FICR_Type__bindgen_ty_1 ) ));
    assert_eq! (::core::mem::align_of::<NRF_FICR_Type__bindgen_ty_1>() ,
                4usize , concat ! (
                "Alignment of " , stringify ! ( NRF_FICR_Type__bindgen_ty_1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_FICR_Type__bindgen_ty_1 ) ) .
                SIZERAMBLOCK as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                NRF_FICR_Type__bindgen_ty_1 ) , "::" , stringify ! (
                SIZERAMBLOCK ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_FICR_Type__bindgen_ty_1 ) ) .
                SIZERAMBLOCKS as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                NRF_FICR_Type__bindgen_ty_1 ) , "::" , stringify ! (
                SIZERAMBLOCKS ) ));
}
impl Clone for NRF_FICR_Type__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_NRF_FICR_Type() {
    assert_eq!(::core::mem::size_of::<NRF_FICR_Type>() , 256usize , concat ! (
               "Size of: " , stringify ! ( NRF_FICR_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_FICR_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( NRF_FICR_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_FICR_Type ) ) . RESERVED0 as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_FICR_Type ) , "::"
                , stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_FICR_Type ) ) . CODEPAGESIZE as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_FICR_Type ) , "::"
                , stringify ! ( CODEPAGESIZE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_FICR_Type ) ) . CODESIZE as * const _
                as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_FICR_Type ) , "::"
                , stringify ! ( CODESIZE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_FICR_Type ) ) . RESERVED1 as * const
                _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_FICR_Type ) , "::"
                , stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_FICR_Type ) ) . CLENR0 as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_FICR_Type ) , "::"
                , stringify ! ( CLENR0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_FICR_Type ) ) . PPFC as * const _ as
                usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_FICR_Type ) , "::"
                , stringify ! ( PPFC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_FICR_Type ) ) . RESERVED2 as * const
                _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_FICR_Type ) , "::"
                , stringify ! ( RESERVED2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_FICR_Type ) ) . NUMRAMBLOCK as *
                const _ as usize } , 52usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_FICR_Type ) , "::"
                , stringify ! ( NUMRAMBLOCK ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_FICR_Type ) ) . RESERVED3 as * const
                _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_FICR_Type ) , "::"
                , stringify ! ( RESERVED3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_FICR_Type ) ) . CONFIGID as * const _
                as usize } , 92usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_FICR_Type ) , "::"
                , stringify ! ( CONFIGID ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_FICR_Type ) ) . DEVICEID as * const _
                as usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_FICR_Type ) , "::"
                , stringify ! ( DEVICEID ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_FICR_Type ) ) . RESERVED4 as * const
                _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_FICR_Type ) , "::"
                , stringify ! ( RESERVED4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_FICR_Type ) ) . ER as * const _ as
                usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_FICR_Type ) , "::"
                , stringify ! ( ER ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_FICR_Type ) ) . IR as * const _ as
                usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_FICR_Type ) , "::"
                , stringify ! ( IR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_FICR_Type ) ) . DEVICEADDRTYPE as *
                const _ as usize } , 160usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_FICR_Type ) , "::"
                , stringify ! ( DEVICEADDRTYPE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_FICR_Type ) ) . DEVICEADDR as * const
                _ as usize } , 164usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_FICR_Type ) , "::"
                , stringify ! ( DEVICEADDR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_FICR_Type ) ) . OVERRIDEEN as * const
                _ as usize } , 172usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_FICR_Type ) , "::"
                , stringify ! ( OVERRIDEEN ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_FICR_Type ) ) . NRF_1MBIT as * const
                _ as usize } , 176usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_FICR_Type ) , "::"
                , stringify ! ( NRF_1MBIT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_FICR_Type ) ) . RESERVED5 as * const
                _ as usize } , 196usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_FICR_Type ) , "::"
                , stringify ! ( RESERVED5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_FICR_Type ) ) . BLE_1MBIT as * const
                _ as usize } , 236usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_FICR_Type ) , "::"
                , stringify ! ( BLE_1MBIT ) ));
}
impl Clone for NRF_FICR_Type {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct NRF_UICR_Type {
    pub CLENR0: u32,
    pub RBPCONF: u32,
    pub XTALFREQ: u32,
    pub RESERVED0: u32,
    pub FWID: u32,
    pub __bindgen_anon_1: NRF_UICR_Type__bindgen_ty_1,
    pub NRFHW: [u32; 12usize],
    pub CUSTOMER: [u32; 32usize],
}
#[repr(C)]
#[derive(Copy)]
pub union NRF_UICR_Type__bindgen_ty_1 {
    pub NRFFW: [u32; 15usize],
    pub BOOTLOADERADDR: u32,
}
#[test]
fn bindgen_test_layout_NRF_UICR_Type__bindgen_ty_1() {
    assert_eq!(::core::mem::size_of::<NRF_UICR_Type__bindgen_ty_1>() , 60usize
               , concat ! (
               "Size of: " , stringify ! ( NRF_UICR_Type__bindgen_ty_1 ) ));
    assert_eq! (::core::mem::align_of::<NRF_UICR_Type__bindgen_ty_1>() ,
                4usize , concat ! (
                "Alignment of " , stringify ! ( NRF_UICR_Type__bindgen_ty_1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UICR_Type__bindgen_ty_1 ) ) . NRFFW
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                NRF_UICR_Type__bindgen_ty_1 ) , "::" , stringify ! ( NRFFW )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UICR_Type__bindgen_ty_1 ) ) .
                BOOTLOADERADDR as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                NRF_UICR_Type__bindgen_ty_1 ) , "::" , stringify ! (
                BOOTLOADERADDR ) ));
}
impl Clone for NRF_UICR_Type__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_NRF_UICR_Type() {
    assert_eq!(::core::mem::size_of::<NRF_UICR_Type>() , 256usize , concat ! (
               "Size of: " , stringify ! ( NRF_UICR_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_UICR_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( NRF_UICR_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UICR_Type ) ) . CLENR0 as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UICR_Type ) , "::"
                , stringify ! ( CLENR0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UICR_Type ) ) . RBPCONF as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UICR_Type ) , "::"
                , stringify ! ( RBPCONF ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UICR_Type ) ) . XTALFREQ as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UICR_Type ) , "::"
                , stringify ! ( XTALFREQ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UICR_Type ) ) . RESERVED0 as * const
                _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UICR_Type ) , "::"
                , stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UICR_Type ) ) . FWID as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UICR_Type ) , "::"
                , stringify ! ( FWID ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UICR_Type ) ) . NRFHW as * const _ as
                usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UICR_Type ) , "::"
                , stringify ! ( NRFHW ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_UICR_Type ) ) . CUSTOMER as * const _
                as usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_UICR_Type ) , "::"
                , stringify ! ( CUSTOMER ) ));
}
impl Clone for NRF_UICR_Type {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct NRF_GPIO_Type {
    pub RESERVED0: [u32; 321usize],
    pub OUT: u32,
    pub OUTSET: u32,
    pub OUTCLR: u32,
    pub IN: u32,
    pub DIR: u32,
    pub DIRSET: u32,
    pub DIRCLR: u32,
    pub RESERVED1: [u32; 120usize],
    pub PIN_CNF: [u32; 32usize],
}
#[test]
fn bindgen_test_layout_NRF_GPIO_Type() {
    assert_eq!(::core::mem::size_of::<NRF_GPIO_Type>() , 1920usize , concat !
               ( "Size of: " , stringify ! ( NRF_GPIO_Type ) ));
    assert_eq! (::core::mem::align_of::<NRF_GPIO_Type>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( NRF_GPIO_Type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_GPIO_Type ) ) . RESERVED0 as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_GPIO_Type ) , "::"
                , stringify ! ( RESERVED0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_GPIO_Type ) ) . OUT as * const _ as
                usize } , 1284usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_GPIO_Type ) , "::"
                , stringify ! ( OUT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_GPIO_Type ) ) . OUTSET as * const _
                as usize } , 1288usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_GPIO_Type ) , "::"
                , stringify ! ( OUTSET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_GPIO_Type ) ) . OUTCLR as * const _
                as usize } , 1292usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_GPIO_Type ) , "::"
                , stringify ! ( OUTCLR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_GPIO_Type ) ) . IN as * const _ as
                usize } , 1296usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_GPIO_Type ) , "::"
                , stringify ! ( IN ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_GPIO_Type ) ) . DIR as * const _ as
                usize } , 1300usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_GPIO_Type ) , "::"
                , stringify ! ( DIR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_GPIO_Type ) ) . DIRSET as * const _
                as usize } , 1304usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_GPIO_Type ) , "::"
                , stringify ! ( DIRSET ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_GPIO_Type ) ) . DIRCLR as * const _
                as usize } , 1308usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_GPIO_Type ) , "::"
                , stringify ! ( DIRCLR ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_GPIO_Type ) ) . RESERVED1 as * const
                _ as usize } , 1312usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_GPIO_Type ) , "::"
                , stringify ! ( RESERVED1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const NRF_GPIO_Type ) ) . PIN_CNF as * const _
                as usize } , 1792usize , concat ! (
                "Alignment of field: " , stringify ! ( NRF_GPIO_Type ) , "::"
                , stringify ! ( PIN_CNF ) ));
}
pub type ret_code_t = u32;
extern "C" {
    pub fn app_error_fault_handler(id: u32, pc: u32, info: u32);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct error_info_t {
    pub line_num: u16,
    pub p_file_name: *const u8,
    pub err_code: u32,
}
#[test]
fn bindgen_test_layout_error_info_t() {
    assert_eq!(::core::mem::size_of::<error_info_t>() , 12usize , concat ! (
               "Size of: " , stringify ! ( error_info_t ) ));
    assert_eq! (::core::mem::align_of::<error_info_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( error_info_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const error_info_t ) ) . line_num as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( error_info_t ) , "::" ,
                stringify ! ( line_num ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const error_info_t ) ) . p_file_name as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( error_info_t ) , "::" ,
                stringify ! ( p_file_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const error_info_t ) ) . err_code as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( error_info_t ) , "::" ,
                stringify ! ( err_code ) ));
}
impl Clone for error_info_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct assert_info_t {
    pub line_num: u16,
    pub p_file_name: *const u8,
}
#[test]
fn bindgen_test_layout_assert_info_t() {
    assert_eq!(::core::mem::size_of::<assert_info_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( assert_info_t ) ));
    assert_eq! (::core::mem::align_of::<assert_info_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( assert_info_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const assert_info_t ) ) . line_num as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( assert_info_t ) , "::"
                , stringify ! ( line_num ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const assert_info_t ) ) . p_file_name as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( assert_info_t ) , "::"
                , stringify ! ( p_file_name ) ));
}
impl Clone for assert_info_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn app_error_handler(error_code: u32, line_num: u32,
                             p_file_name: *const u8);
}
extern "C" {
    pub fn app_error_handler_bare(error_code: ret_code_t);
}
extern "C" {
    pub fn app_error_save_and_stop(id: u32, pc: u32, info: u32);
}
extern "C" {
    #[link_name = "__StackTop"]
    pub static mut __StackTop: u32;
}
extern "C" {
    #[link_name = "__StackLimit"]
    pub static mut __StackLimit: u32;
}
pub const UNIT_0_625_MS: _bindgen_ty_1 = _bindgen_ty_1::UNIT_0_625_MS;
pub const UNIT_1_25_MS: _bindgen_ty_1 = _bindgen_ty_1::UNIT_1_25_MS;
pub const UNIT_10_MS: _bindgen_ty_1 = _bindgen_ty_1::UNIT_10_MS;
#[repr(u16)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_1 {
    UNIT_0_625_MS = 625,
    UNIT_1_25_MS = 1250,
    UNIT_10_MS = 10000,
}
pub type uint16_le_t = [u8; 2usize];
pub type uint32_le_t = [u8; 4usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct uint8_array_t {
    pub size: u16,
    pub p_data: *mut u8,
}
#[test]
fn bindgen_test_layout_uint8_array_t() {
    assert_eq!(::core::mem::size_of::<uint8_array_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( uint8_array_t ) ));
    assert_eq! (::core::mem::align_of::<uint8_array_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( uint8_array_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const uint8_array_t ) ) . size as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( uint8_array_t ) , "::"
                , stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const uint8_array_t ) ) . p_data as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( uint8_array_t ) , "::"
                , stringify ! ( p_data ) ));
}
impl Clone for uint8_array_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct app_timer_t {
    pub data: [u32; 8usize],
}
#[test]
fn bindgen_test_layout_app_timer_t() {
    assert_eq!(::core::mem::size_of::<app_timer_t>() , 32usize , concat ! (
               "Size of: " , stringify ! ( app_timer_t ) ));
    assert_eq! (::core::mem::align_of::<app_timer_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( app_timer_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const app_timer_t ) ) . data as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( app_timer_t ) , "::" ,
                stringify ! ( data ) ));
}
impl Clone for app_timer_t {
    fn clone(&self) -> Self { *self }
}
pub type app_timer_id_t = *mut app_timer_t;
pub type app_timer_timeout_handler_t =
    ::core::option::Option<unsafe extern "C" fn(p_context:
                                                    *mut ::cty::c_void)>;
pub type app_timer_evt_schedule_func_t =
    ::core::option::Option<unsafe extern "C" fn(timeout_handler:
                                                    app_timer_timeout_handler_t,
                                                p_context: *mut ::cty::c_void)
                               -> u32>;
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum app_timer_mode_t {
    APP_TIMER_MODE_SINGLE_SHOT = 0,
    APP_TIMER_MODE_REPEATED = 1,
}
extern "C" {
    pub fn app_timer_init(prescaler: u32, op_queue_size: u8,
                          p_buffer: *mut ::cty::c_void,
                          evt_schedule_func: app_timer_evt_schedule_func_t)
     -> u32;
}
extern "C" {
    pub fn app_timer_create(p_timer_id: *const app_timer_id_t,
                            mode: app_timer_mode_t,
                            timeout_handler: app_timer_timeout_handler_t)
     -> u32;
}
extern "C" {
    pub fn app_timer_start(timer_id: app_timer_id_t, timeout_ticks: u32,
                           p_context: *mut ::cty::c_void) -> u32;
}
extern "C" {
    pub fn app_timer_stop(timer_id: app_timer_id_t) -> u32;
}
extern "C" {
    pub fn app_timer_stop_all() -> u32;
}
extern "C" {
    pub fn app_timer_cnt_get() -> u32;
}
extern "C" {
    pub fn app_timer_cnt_diff_compute(ticks_to: u32, ticks_from: u32,
                                      p_ticks_diff: *mut u32) -> u32;
}
extern "C" {
    pub fn app_timer_op_queue_utilization_get() -> u8;
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NRF_SOC_SVCS {
    SD_PPI_CHANNEL_ENABLE_GET = 32,
    SD_PPI_CHANNEL_ENABLE_SET = 33,
    SD_PPI_CHANNEL_ENABLE_CLR = 34,
    SD_PPI_CHANNEL_ASSIGN = 35,
    SD_PPI_GROUP_TASK_ENABLE = 36,
    SD_PPI_GROUP_TASK_DISABLE = 37,
    SD_PPI_GROUP_ASSIGN = 38,
    SD_PPI_GROUP_GET = 39,
    SD_FLASH_PAGE_ERASE = 40,
    SD_FLASH_WRITE = 41,
    SD_FLASH_PROTECT = 42,
    SD_MUTEX_NEW = 43,
    SD_MUTEX_ACQUIRE = 44,
    SD_MUTEX_RELEASE = 45,
    SD_RFU_1 = 46,
    SD_RFU_2 = 47,
    SD_RFU_3 = 48,
    SD_RFU_4 = 49,
    SD_RFU_5 = 50,
    SD_RFU_6 = 51,
    SD_RFU_7 = 52,
    SD_RFU_8 = 53,
    SD_RFU_9 = 54,
    SD_RFU_10 = 55,
    SD_RAND_APPLICATION_POOL_CAPACITY_GET = 56,
    SD_RAND_APPLICATION_BYTES_AVAILABLE_GET = 57,
    SD_RAND_APPLICATION_VECTOR_GET = 58,
    SD_POWER_MODE_SET = 59,
    SD_POWER_SYSTEM_OFF = 60,
    SD_POWER_RESET_REASON_GET = 61,
    SD_POWER_RESET_REASON_CLR = 62,
    SD_POWER_POF_ENABLE = 63,
    SD_POWER_POF_THRESHOLD_SET = 64,
    SD_POWER_RAMON_SET = 65,
    SD_POWER_RAMON_CLR = 66,
    SD_POWER_RAMON_GET = 67,
    SD_POWER_GPREGRET_SET = 68,
    SD_POWER_GPREGRET_CLR = 69,
    SD_POWER_GPREGRET_GET = 70,
    SD_POWER_DCDC_MODE_SET = 71,
    SD_APP_EVT_WAIT = 72,
    SD_CLOCK_HFCLK_REQUEST = 73,
    SD_CLOCK_HFCLK_RELEASE = 74,
    SD_CLOCK_HFCLK_IS_RUNNING = 75,
    SD_RADIO_NOTIFICATION_CFG_SET = 76,
    SD_ECB_BLOCK_ENCRYPT = 77,
    SD_ECB_BLOCKS_ENCRYPT = 78,
    SD_RADIO_SESSION_OPEN = 79,
    SD_RADIO_SESSION_CLOSE = 80,
    SD_RADIO_REQUEST = 81,
    SD_EVT_GET = 82,
    SD_TEMP_GET = 83,
    SVC_SOC_LAST = 84,
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NRF_MUTEX_VALUES { NRF_MUTEX_FREE = 0, NRF_MUTEX_TAKEN = 1, }
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NRF_POWER_MODES {
    NRF_POWER_MODE_CONSTLAT = 0,
    NRF_POWER_MODE_LOWPWR = 1,
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NRF_POWER_THRESHOLDS {
    NRF_POWER_THRESHOLD_V21 = 0,
    NRF_POWER_THRESHOLD_V23 = 1,
    NRF_POWER_THRESHOLD_V25 = 2,
    NRF_POWER_THRESHOLD_V27 = 3,
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NRF_POWER_DCDC_MODES {
    NRF_POWER_DCDC_DISABLE = 0,
    NRF_POWER_DCDC_ENABLE = 1,
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NRF_RADIO_NOTIFICATION_DISTANCES {
    NRF_RADIO_NOTIFICATION_DISTANCE_NONE = 0,
    NRF_RADIO_NOTIFICATION_DISTANCE_800US = 1,
    NRF_RADIO_NOTIFICATION_DISTANCE_1740US = 2,
    NRF_RADIO_NOTIFICATION_DISTANCE_2680US = 3,
    NRF_RADIO_NOTIFICATION_DISTANCE_3620US = 4,
    NRF_RADIO_NOTIFICATION_DISTANCE_4560US = 5,
    NRF_RADIO_NOTIFICATION_DISTANCE_5500US = 6,
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NRF_RADIO_NOTIFICATION_TYPES {
    NRF_RADIO_NOTIFICATION_TYPE_NONE = 0,
    NRF_RADIO_NOTIFICATION_TYPE_INT_ON_ACTIVE = 1,
    NRF_RADIO_NOTIFICATION_TYPE_INT_ON_INACTIVE = 2,
    NRF_RADIO_NOTIFICATION_TYPE_INT_ON_BOTH = 3,
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NRF_RADIO_CALLBACK_SIGNAL_TYPE {
    NRF_RADIO_CALLBACK_SIGNAL_TYPE_START = 0,
    NRF_RADIO_CALLBACK_SIGNAL_TYPE_TIMER0 = 1,
    NRF_RADIO_CALLBACK_SIGNAL_TYPE_RADIO = 2,
    NRF_RADIO_CALLBACK_SIGNAL_TYPE_EXTEND_FAILED = 3,
    NRF_RADIO_CALLBACK_SIGNAL_TYPE_EXTEND_SUCCEEDED = 4,
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NRF_RADIO_SIGNAL_CALLBACK_ACTION {
    NRF_RADIO_SIGNAL_CALLBACK_ACTION_NONE = 0,
    NRF_RADIO_SIGNAL_CALLBACK_ACTION_EXTEND = 1,
    NRF_RADIO_SIGNAL_CALLBACK_ACTION_END = 2,
    NRF_RADIO_SIGNAL_CALLBACK_ACTION_REQUEST_AND_END = 3,
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NRF_RADIO_HFCLK_CFG {
    NRF_RADIO_HFCLK_CFG_XTAL_GUARANTEED = 0,
    NRF_RADIO_HFCLK_CFG_NO_GUARANTEE = 1,
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NRF_RADIO_PRIORITY {
    NRF_RADIO_PRIORITY_HIGH = 0,
    NRF_RADIO_PRIORITY_NORMAL = 1,
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NRF_RADIO_REQUEST_TYPE {
    NRF_RADIO_REQ_TYPE_EARLIEST = 0,
    NRF_RADIO_REQ_TYPE_NORMAL = 1,
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NRF_SOC_EVTS {
    NRF_EVT_HFCLKSTARTED = 0,
    NRF_EVT_POWER_FAILURE_WARNING = 1,
    NRF_EVT_FLASH_OPERATION_SUCCESS = 2,
    NRF_EVT_FLASH_OPERATION_ERROR = 3,
    NRF_EVT_RADIO_BLOCKED = 4,
    NRF_EVT_RADIO_CANCELED = 5,
    NRF_EVT_RADIO_SIGNAL_CALLBACK_INVALID_RETURN = 6,
    NRF_EVT_RADIO_SESSION_IDLE = 7,
    NRF_EVT_RADIO_SESSION_CLOSED = 8,
    NRF_EVT_NUMBER_OF_EVTS = 9,
}
pub type nrf_mutex_t = u8;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct nrf_radio_request_earliest_t {
    pub hfclk: u8,
    pub priority: u8,
    pub length_us: u32,
    pub timeout_us: u32,
}
#[test]
fn bindgen_test_layout_nrf_radio_request_earliest_t() {
    assert_eq!(::core::mem::size_of::<nrf_radio_request_earliest_t>() ,
               12usize , concat ! (
               "Size of: " , stringify ! ( nrf_radio_request_earliest_t ) ));
    assert_eq! (::core::mem::align_of::<nrf_radio_request_earliest_t>() ,
                4usize , concat ! (
                "Alignment of " , stringify ! ( nrf_radio_request_earliest_t )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const nrf_radio_request_earliest_t ) ) . hfclk
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                nrf_radio_request_earliest_t ) , "::" , stringify ! ( hfclk )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const nrf_radio_request_earliest_t ) ) .
                priority as * const _ as usize } , 1usize , concat ! (
                "Alignment of field: " , stringify ! (
                nrf_radio_request_earliest_t ) , "::" , stringify ! ( priority
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const nrf_radio_request_earliest_t ) ) .
                length_us as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                nrf_radio_request_earliest_t ) , "::" , stringify ! (
                length_us ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const nrf_radio_request_earliest_t ) ) .
                timeout_us as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                nrf_radio_request_earliest_t ) , "::" , stringify ! (
                timeout_us ) ));
}
impl Clone for nrf_radio_request_earliest_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct nrf_radio_request_normal_t {
    pub hfclk: u8,
    pub priority: u8,
    pub distance_us: u32,
    pub length_us: u32,
}
#[test]
fn bindgen_test_layout_nrf_radio_request_normal_t() {
    assert_eq!(::core::mem::size_of::<nrf_radio_request_normal_t>() , 12usize
               , concat ! (
               "Size of: " , stringify ! ( nrf_radio_request_normal_t ) ));
    assert_eq! (::core::mem::align_of::<nrf_radio_request_normal_t>() , 4usize
                , concat ! (
                "Alignment of " , stringify ! ( nrf_radio_request_normal_t )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const nrf_radio_request_normal_t ) ) . hfclk as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                nrf_radio_request_normal_t ) , "::" , stringify ! ( hfclk )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const nrf_radio_request_normal_t ) ) . priority
                as * const _ as usize } , 1usize , concat ! (
                "Alignment of field: " , stringify ! (
                nrf_radio_request_normal_t ) , "::" , stringify ! ( priority )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const nrf_radio_request_normal_t ) ) .
                distance_us as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                nrf_radio_request_normal_t ) , "::" , stringify ! (
                distance_us ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const nrf_radio_request_normal_t ) ) .
                length_us as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                nrf_radio_request_normal_t ) , "::" , stringify ! ( length_us
                ) ));
}
impl Clone for nrf_radio_request_normal_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct nrf_radio_request_t {
    pub request_type: u8,
    pub params: nrf_radio_request_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union nrf_radio_request_t__bindgen_ty_1 {
    pub earliest: nrf_radio_request_earliest_t,
    pub normal: nrf_radio_request_normal_t,
}
#[test]
fn bindgen_test_layout_nrf_radio_request_t__bindgen_ty_1() {
    assert_eq!(::core::mem::size_of::<nrf_radio_request_t__bindgen_ty_1>() ,
               12usize , concat ! (
               "Size of: " , stringify ! ( nrf_radio_request_t__bindgen_ty_1 )
               ));
    assert_eq! (::core::mem::align_of::<nrf_radio_request_t__bindgen_ty_1>() ,
                4usize , concat ! (
                "Alignment of " , stringify ! (
                nrf_radio_request_t__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const nrf_radio_request_t__bindgen_ty_1 ) ) .
                earliest as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                nrf_radio_request_t__bindgen_ty_1 ) , "::" , stringify ! (
                earliest ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const nrf_radio_request_t__bindgen_ty_1 ) ) .
                normal as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                nrf_radio_request_t__bindgen_ty_1 ) , "::" , stringify ! (
                normal ) ));
}
impl Clone for nrf_radio_request_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_nrf_radio_request_t() {
    assert_eq!(::core::mem::size_of::<nrf_radio_request_t>() , 16usize ,
               concat ! ( "Size of: " , stringify ! ( nrf_radio_request_t )
               ));
    assert_eq! (::core::mem::align_of::<nrf_radio_request_t>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( nrf_radio_request_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const nrf_radio_request_t ) ) . request_type as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( nrf_radio_request_t ) ,
                "::" , stringify ! ( request_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const nrf_radio_request_t ) ) . params as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( nrf_radio_request_t ) ,
                "::" , stringify ! ( params ) ));
}
impl Clone for nrf_radio_request_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct nrf_radio_signal_callback_return_param_t {
    pub callback_action: u8,
    pub params: nrf_radio_signal_callback_return_param_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union nrf_radio_signal_callback_return_param_t__bindgen_ty_1 {
    pub request: nrf_radio_signal_callback_return_param_t__bindgen_ty_1__bindgen_ty_1,
    pub extend: nrf_radio_signal_callback_return_param_t__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct nrf_radio_signal_callback_return_param_t__bindgen_ty_1__bindgen_ty_1 {
    pub p_next: *mut nrf_radio_request_t,
}
#[test]
fn bindgen_test_layout_nrf_radio_signal_callback_return_param_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::core::mem::size_of::<nrf_radio_signal_callback_return_param_t__bindgen_ty_1__bindgen_ty_1>()
               , 4usize , concat ! (
               "Size of: " , stringify ! (
               nrf_radio_signal_callback_return_param_t__bindgen_ty_1__bindgen_ty_1
               ) ));
    assert_eq! (::core::mem::align_of::<nrf_radio_signal_callback_return_param_t__bindgen_ty_1__bindgen_ty_1>()
                , 4usize , concat ! (
                "Alignment of " , stringify ! (
                nrf_radio_signal_callback_return_param_t__bindgen_ty_1__bindgen_ty_1
                ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                nrf_radio_signal_callback_return_param_t__bindgen_ty_1__bindgen_ty_1
                ) ) . p_next as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                nrf_radio_signal_callback_return_param_t__bindgen_ty_1__bindgen_ty_1
                ) , "::" , stringify ! ( p_next ) ));
}
impl Clone for
 nrf_radio_signal_callback_return_param_t__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct nrf_radio_signal_callback_return_param_t__bindgen_ty_1__bindgen_ty_2 {
    pub length_us: u32,
}
#[test]
fn bindgen_test_layout_nrf_radio_signal_callback_return_param_t__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(::core::mem::size_of::<nrf_radio_signal_callback_return_param_t__bindgen_ty_1__bindgen_ty_2>()
               , 4usize , concat ! (
               "Size of: " , stringify ! (
               nrf_radio_signal_callback_return_param_t__bindgen_ty_1__bindgen_ty_2
               ) ));
    assert_eq! (::core::mem::align_of::<nrf_radio_signal_callback_return_param_t__bindgen_ty_1__bindgen_ty_2>()
                , 4usize , concat ! (
                "Alignment of " , stringify ! (
                nrf_radio_signal_callback_return_param_t__bindgen_ty_1__bindgen_ty_2
                ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                nrf_radio_signal_callback_return_param_t__bindgen_ty_1__bindgen_ty_2
                ) ) . length_us as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                nrf_radio_signal_callback_return_param_t__bindgen_ty_1__bindgen_ty_2
                ) , "::" , stringify ! ( length_us ) ));
}
impl Clone for
 nrf_radio_signal_callback_return_param_t__bindgen_ty_1__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_nrf_radio_signal_callback_return_param_t__bindgen_ty_1() {
    assert_eq!(::core::mem::size_of::<nrf_radio_signal_callback_return_param_t__bindgen_ty_1>()
               , 4usize , concat ! (
               "Size of: " , stringify ! (
               nrf_radio_signal_callback_return_param_t__bindgen_ty_1 ) ));
    assert_eq! (::core::mem::align_of::<nrf_radio_signal_callback_return_param_t__bindgen_ty_1>()
                , 4usize , concat ! (
                "Alignment of " , stringify ! (
                nrf_radio_signal_callback_return_param_t__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                nrf_radio_signal_callback_return_param_t__bindgen_ty_1 ) ) .
                request as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                nrf_radio_signal_callback_return_param_t__bindgen_ty_1 ) ,
                "::" , stringify ! ( request ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                nrf_radio_signal_callback_return_param_t__bindgen_ty_1 ) ) .
                extend as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                nrf_radio_signal_callback_return_param_t__bindgen_ty_1 ) ,
                "::" , stringify ! ( extend ) ));
}
impl Clone for nrf_radio_signal_callback_return_param_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_nrf_radio_signal_callback_return_param_t() {
    assert_eq!(::core::mem::size_of::<nrf_radio_signal_callback_return_param_t>()
               , 8usize , concat ! (
               "Size of: " , stringify ! (
               nrf_radio_signal_callback_return_param_t ) ));
    assert_eq! (::core::mem::align_of::<nrf_radio_signal_callback_return_param_t>()
                , 4usize , concat ! (
                "Alignment of " , stringify ! (
                nrf_radio_signal_callback_return_param_t ) ));
    assert_eq! (unsafe {
                & (
                * ( 0 as * const nrf_radio_signal_callback_return_param_t ) )
                . callback_action as * const _ as usize } , 0usize , concat !
                (
                "Alignment of field: " , stringify ! (
                nrf_radio_signal_callback_return_param_t ) , "::" , stringify
                ! ( callback_action ) ));
    assert_eq! (unsafe {
                & (
                * ( 0 as * const nrf_radio_signal_callback_return_param_t ) )
                . params as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                nrf_radio_signal_callback_return_param_t ) , "::" , stringify
                ! ( params ) ));
}
impl Clone for nrf_radio_signal_callback_return_param_t {
    fn clone(&self) -> Self { *self }
}
pub type nrf_radio_signal_callback_t =
    ::core::option::Option<unsafe extern "C" fn(signal_type: u8)
                               ->
                                   *mut nrf_radio_signal_callback_return_param_t>;
pub type soc_ecb_key_t = [u8; 16usize];
pub type soc_ecb_cleartext_t = [u8; 16usize];
pub type soc_ecb_ciphertext_t = [u8; 16usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct nrf_ecb_hal_data_t {
    pub key: soc_ecb_key_t,
    pub cleartext: soc_ecb_cleartext_t,
    pub ciphertext: soc_ecb_ciphertext_t,
}
#[test]
fn bindgen_test_layout_nrf_ecb_hal_data_t() {
    assert_eq!(::core::mem::size_of::<nrf_ecb_hal_data_t>() , 48usize , concat
               ! ( "Size of: " , stringify ! ( nrf_ecb_hal_data_t ) ));
    assert_eq! (::core::mem::align_of::<nrf_ecb_hal_data_t>() , 1usize ,
                concat ! (
                "Alignment of " , stringify ! ( nrf_ecb_hal_data_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const nrf_ecb_hal_data_t ) ) . key as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( nrf_ecb_hal_data_t ) ,
                "::" , stringify ! ( key ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const nrf_ecb_hal_data_t ) ) . cleartext as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( nrf_ecb_hal_data_t ) ,
                "::" , stringify ! ( cleartext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const nrf_ecb_hal_data_t ) ) . ciphertext as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( nrf_ecb_hal_data_t ) ,
                "::" , stringify ! ( ciphertext ) ));
}
impl Clone for nrf_ecb_hal_data_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct nrf_ecb_hal_data_block_t {
    pub p_key: *mut soc_ecb_key_t,
    pub p_cleartext: *mut soc_ecb_cleartext_t,
    pub p_ciphertext: *mut soc_ecb_ciphertext_t,
}
#[test]
fn bindgen_test_layout_nrf_ecb_hal_data_block_t() {
    assert_eq!(::core::mem::size_of::<nrf_ecb_hal_data_block_t>() , 12usize ,
               concat ! (
               "Size of: " , stringify ! ( nrf_ecb_hal_data_block_t ) ));
    assert_eq! (::core::mem::align_of::<nrf_ecb_hal_data_block_t>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( nrf_ecb_hal_data_block_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const nrf_ecb_hal_data_block_t ) ) . p_key as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                nrf_ecb_hal_data_block_t ) , "::" , stringify ! ( p_key ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const nrf_ecb_hal_data_block_t ) ) .
                p_cleartext as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                nrf_ecb_hal_data_block_t ) , "::" , stringify ! ( p_cleartext
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const nrf_ecb_hal_data_block_t ) ) .
                p_ciphertext as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                nrf_ecb_hal_data_block_t ) , "::" , stringify ! ( p_ciphertext
                ) ));
}
impl Clone for nrf_ecb_hal_data_block_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct nrf_nvic_state_t {
    pub __irq_masks: [u32; 1usize],
    pub __cr_flag: u32,
}
#[test]
fn bindgen_test_layout_nrf_nvic_state_t() {
    assert_eq!(::core::mem::size_of::<nrf_nvic_state_t>() , 8usize , concat !
               ( "Size of: " , stringify ! ( nrf_nvic_state_t ) ));
    assert_eq! (::core::mem::align_of::<nrf_nvic_state_t>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( nrf_nvic_state_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const nrf_nvic_state_t ) ) . __irq_masks as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( nrf_nvic_state_t ) ,
                "::" , stringify ! ( __irq_masks ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const nrf_nvic_state_t ) ) . __cr_flag as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( nrf_nvic_state_t ) ,
                "::" , stringify ! ( __cr_flag ) ));
}
impl Clone for nrf_nvic_state_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "nrf_nvic_state"]
    pub static mut nrf_nvic_state: nrf_nvic_state_t;
}
extern "C" {
    pub fn assert_nrf_callback(line_num: u16, file_name: *const u8);
}
pub const app_irq_priority_t_APP_IRQ_PRIORITY_HIGH: app_irq_priority_t =
    app_irq_priority_t::APP_IRQ_PRIORITY_HIGHEST;
pub const app_irq_priority_t_APP_IRQ_PRIORITY_MID: app_irq_priority_t =
    app_irq_priority_t::APP_IRQ_PRIORITY_HIGHEST;
pub const app_irq_priority_t_APP_IRQ_PRIORITY_LOWEST: app_irq_priority_t =
    app_irq_priority_t::APP_IRQ_PRIORITY_LOW;
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum app_irq_priority_t {
    APP_IRQ_PRIORITY_HIGHEST = 1,
    APP_IRQ_PRIORITY_LOW = 3,
    APP_IRQ_PRIORITY_THREAD = 4,
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum app_level_t { APP_LEVEL_UNPRIVILEGED = 0, APP_LEVEL_PRIVILEGED = 1, }
extern "C" {
    pub fn app_util_critical_region_enter(p_nested: *mut u8);
}
extern "C" {
    pub fn app_util_critical_region_exit(nested: u8);
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum app_uart_flow_control_t {
    APP_UART_FLOW_CONTROL_DISABLED = 0,
    APP_UART_FLOW_CONTROL_ENABLED = 1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct app_uart_comm_params_t {
    pub rx_pin_no: u32,
    pub tx_pin_no: u32,
    pub rts_pin_no: u32,
    pub cts_pin_no: u32,
    pub flow_control: app_uart_flow_control_t,
    pub use_parity: bool,
    pub baud_rate: u32,
}
#[test]
fn bindgen_test_layout_app_uart_comm_params_t() {
    assert_eq!(::core::mem::size_of::<app_uart_comm_params_t>() , 24usize ,
               concat ! ( "Size of: " , stringify ! ( app_uart_comm_params_t )
               ));
    assert_eq! (::core::mem::align_of::<app_uart_comm_params_t>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( app_uart_comm_params_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const app_uart_comm_params_t ) ) . rx_pin_no as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( app_uart_comm_params_t
                ) , "::" , stringify ! ( rx_pin_no ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const app_uart_comm_params_t ) ) . tx_pin_no as
                * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( app_uart_comm_params_t
                ) , "::" , stringify ! ( tx_pin_no ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const app_uart_comm_params_t ) ) . rts_pin_no
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( app_uart_comm_params_t
                ) , "::" , stringify ! ( rts_pin_no ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const app_uart_comm_params_t ) ) . cts_pin_no
                as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( app_uart_comm_params_t
                ) , "::" , stringify ! ( cts_pin_no ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const app_uart_comm_params_t ) ) . flow_control
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( app_uart_comm_params_t
                ) , "::" , stringify ! ( flow_control ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const app_uart_comm_params_t ) ) . use_parity
                as * const _ as usize } , 17usize , concat ! (
                "Alignment of field: " , stringify ! ( app_uart_comm_params_t
                ) , "::" , stringify ! ( use_parity ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const app_uart_comm_params_t ) ) . baud_rate as
                * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( app_uart_comm_params_t
                ) , "::" , stringify ! ( baud_rate ) ));
}
impl Clone for app_uart_comm_params_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct app_uart_buffers_t {
    pub rx_buf: *mut u8,
    pub rx_buf_size: u32,
    pub tx_buf: *mut u8,
    pub tx_buf_size: u32,
}
#[test]
fn bindgen_test_layout_app_uart_buffers_t() {
    assert_eq!(::core::mem::size_of::<app_uart_buffers_t>() , 16usize , concat
               ! ( "Size of: " , stringify ! ( app_uart_buffers_t ) ));
    assert_eq! (::core::mem::align_of::<app_uart_buffers_t>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( app_uart_buffers_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const app_uart_buffers_t ) ) . rx_buf as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( app_uart_buffers_t ) ,
                "::" , stringify ! ( rx_buf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const app_uart_buffers_t ) ) . rx_buf_size as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( app_uart_buffers_t ) ,
                "::" , stringify ! ( rx_buf_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const app_uart_buffers_t ) ) . tx_buf as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( app_uart_buffers_t ) ,
                "::" , stringify ! ( tx_buf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const app_uart_buffers_t ) ) . tx_buf_size as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( app_uart_buffers_t ) ,
                "::" , stringify ! ( tx_buf_size ) ));
}
impl Clone for app_uart_buffers_t {
    fn clone(&self) -> Self { *self }
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum app_uart_evt_type_t {
    APP_UART_DATA_READY = 0,
    APP_UART_FIFO_ERROR = 1,
    APP_UART_COMMUNICATION_ERROR = 2,
    APP_UART_TX_EMPTY = 3,
    APP_UART_DATA = 4,
}
#[repr(C)]
#[derive(Copy)]
pub struct app_uart_evt_t {
    pub evt_type: app_uart_evt_type_t,
    pub data: app_uart_evt_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union app_uart_evt_t__bindgen_ty_1 {
    pub error_communication: u32,
    pub error_code: u32,
    pub value: u8,
}
#[test]
fn bindgen_test_layout_app_uart_evt_t__bindgen_ty_1() {
    assert_eq!(::core::mem::size_of::<app_uart_evt_t__bindgen_ty_1>() , 4usize
               , concat ! (
               "Size of: " , stringify ! ( app_uart_evt_t__bindgen_ty_1 ) ));
    assert_eq! (::core::mem::align_of::<app_uart_evt_t__bindgen_ty_1>() ,
                4usize , concat ! (
                "Alignment of " , stringify ! ( app_uart_evt_t__bindgen_ty_1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const app_uart_evt_t__bindgen_ty_1 ) ) .
                error_communication as * const _ as usize } , 0usize , concat
                ! (
                "Alignment of field: " , stringify ! (
                app_uart_evt_t__bindgen_ty_1 ) , "::" , stringify ! (
                error_communication ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const app_uart_evt_t__bindgen_ty_1 ) ) .
                error_code as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                app_uart_evt_t__bindgen_ty_1 ) , "::" , stringify ! (
                error_code ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const app_uart_evt_t__bindgen_ty_1 ) ) . value
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                app_uart_evt_t__bindgen_ty_1 ) , "::" , stringify ! ( value )
                ));
}
impl Clone for app_uart_evt_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_app_uart_evt_t() {
    assert_eq!(::core::mem::size_of::<app_uart_evt_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( app_uart_evt_t ) ));
    assert_eq! (::core::mem::align_of::<app_uart_evt_t>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( app_uart_evt_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const app_uart_evt_t ) ) . evt_type as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( app_uart_evt_t ) , "::"
                , stringify ! ( evt_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const app_uart_evt_t ) ) . data as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( app_uart_evt_t ) , "::"
                , stringify ! ( data ) ));
}
impl Clone for app_uart_evt_t {
    fn clone(&self) -> Self { *self }
}
pub type app_uart_event_handler_t =
    ::core::option::Option<unsafe extern "C" fn(p_app_uart_event:
                                                    *mut app_uart_evt_t)>;
extern "C" {
    pub fn app_uart_init(p_comm_params: *const app_uart_comm_params_t,
                         p_buffers: *mut app_uart_buffers_t,
                         error_handler: app_uart_event_handler_t,
                         irq_priority: app_irq_priority_t) -> u32;
}
extern "C" {
    pub fn app_uart_get(p_byte: *mut u8) -> u32;
}
extern "C" {
    pub fn app_uart_put(byte: u8) -> u32;
}
extern "C" {
    pub fn app_uart_flush() -> u32;
}
extern "C" {
    pub fn app_uart_close() -> u32;
}
pub type wchar_t = ::cty::c_uint;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct div_t {
    pub quot: ::cty::c_int,
    pub rem: ::cty::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(::core::mem::size_of::<div_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( div_t ) ));
    assert_eq! (::core::mem::align_of::<div_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( div_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const div_t ) ) . quot as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( div_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const div_t ) ) . rem as * const _ as usize } ,
                4usize , concat ! (
                "Alignment of field: " , stringify ! ( div_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for div_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ldiv_t {
    pub quot: ::cty::c_long,
    pub rem: ::cty::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(::core::mem::size_of::<ldiv_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( ldiv_t ) ));
    assert_eq! (::core::mem::align_of::<ldiv_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( ldiv_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ldiv_t ) ) . quot as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ldiv_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ldiv_t ) ) . rem as * const _ as usize }
                , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( ldiv_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for ldiv_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct lldiv_t {
    pub quot: ::cty::c_longlong,
    pub rem: ::cty::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(::core::mem::size_of::<lldiv_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( lldiv_t ) ));
    assert_eq! (::core::mem::align_of::<lldiv_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( lldiv_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lldiv_t ) ) . quot as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( lldiv_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lldiv_t ) ) . rem as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( lldiv_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for lldiv_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::cty::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::cty::c_char) -> ::cty::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::cty::c_char) -> ::cty::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::cty::c_char) -> ::cty::c_longlong;
}
extern "C" {
    pub fn strtod(__nptr: *const ::cty::c_char,
                  __endptr: *mut *mut ::cty::c_char) -> f64;
}
extern "C" {
    pub fn strtof(__nptr: *const ::cty::c_char,
                  __endptr: *mut *mut ::cty::c_char) -> f32;
}
extern "C" {
    pub fn strtold(__nptr: *const ::cty::c_char,
                   __endptr: *mut *mut ::cty::c_char) -> f64;
}
extern "C" {
    pub fn strtol(__nptr: *const ::cty::c_char,
                  __endptr: *mut *mut ::cty::c_char, __base: ::cty::c_int)
     -> ::cty::c_long;
}
extern "C" {
    pub fn strtoul(__nptr: *const ::cty::c_char,
                   __endptr: *mut *mut ::cty::c_char, __base: ::cty::c_int)
     -> ::cty::c_ulong;
}
extern "C" {
    pub fn strtoq(__nptr: *const ::cty::c_char,
                  __endptr: *mut *mut ::cty::c_char, __base: ::cty::c_int)
     -> ::cty::c_longlong;
}
extern "C" {
    pub fn strtouq(__nptr: *const ::cty::c_char,
                   __endptr: *mut *mut ::cty::c_char, __base: ::cty::c_int)
     -> ::cty::c_ulonglong;
}
extern "C" {
    pub fn strtoll(__nptr: *const ::cty::c_char,
                   __endptr: *mut *mut ::cty::c_char, __base: ::cty::c_int)
     -> ::cty::c_longlong;
}
extern "C" {
    pub fn strtoull(__nptr: *const ::cty::c_char,
                    __endptr: *mut *mut ::cty::c_char, __base: ::cty::c_int)
     -> ::cty::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::cty::c_long) -> *mut ::cty::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::cty::c_char) -> ::cty::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::cty::c_ulong;
pub type ushort = ::cty::c_ushort;
pub type uint = ::cty::c_uint;
pub type u_int8_t = ::cty::c_uchar;
pub type u_int16_t = ::cty::c_ushort;
pub type u_int32_t = ::cty::c_uint;
pub type u_int64_t = ::cty::c_ulonglong;
pub type register_t = ::cty::c_int;
pub type __sig_atomic_t = ::cty::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __sigset_t {
    pub __val: [::cty::c_ulong; 32usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(::core::mem::size_of::<__sigset_t>() , 128usize , concat ! (
               "Size of: " , stringify ! ( __sigset_t ) ));
    assert_eq! (::core::mem::align_of::<__sigset_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( __sigset_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sigset_t ) ) . __val as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __sigset_t ) , "::" ,
                stringify ! ( __val ) ));
}
impl Clone for __sigset_t {
    fn clone(&self) -> Self { *self }
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(::core::mem::size_of::<timeval>() , 8usize , concat ! (
               "Size of: " , stringify ! ( timeval ) ));
    assert_eq! (::core::mem::align_of::<timeval>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( timeval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timeval ) ) . tv_sec as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timeval ) , "::" ,
                stringify ! ( tv_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timeval ) ) . tv_usec as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( timeval ) , "::" ,
                stringify ! ( tv_usec ) ));
}
impl Clone for timeval {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(::core::mem::size_of::<timespec>() , 8usize , concat ! (
               "Size of: " , stringify ! ( timespec ) ));
    assert_eq! (::core::mem::align_of::<timespec>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( timespec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timespec ) ) . tv_sec as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timespec ) , "::" ,
                stringify ! ( tv_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timespec ) ) . tv_nsec as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( timespec ) , "::" ,
                stringify ! ( tv_nsec ) ));
}
impl Clone for timespec {
    fn clone(&self) -> Self { *self }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::cty::c_long;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 32usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(::core::mem::size_of::<fd_set>() , 128usize , concat ! (
               "Size of: " , stringify ! ( fd_set ) ));
    assert_eq! (::core::mem::align_of::<fd_set>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( fd_set ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const fd_set ) ) . __fds_bits as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( fd_set ) , "::" ,
                stringify ! ( __fds_bits ) ));
}
impl Clone for fd_set {
    fn clone(&self) -> Self { *self }
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(__nfds: ::cty::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::cty::c_int;
}
extern "C" {
    pub fn pselect(__nfds: ::cty::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::cty::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: __dev_t) -> ::cty::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: __dev_t) -> ::cty::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(__major: ::cty::c_uint, __minor: ::cty::c_uint)
     -> __dev_t;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::cty::c_ulong;
#[repr(C)]
pub union pthread_attr_t {
    pub __size: [::cty::c_char; 36usize],
    pub __align: ::cty::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(::core::mem::size_of::<pthread_attr_t>() , 36usize , concat ! (
               "Size of: " , stringify ! ( pthread_attr_t ) ));
    assert_eq! (::core::mem::align_of::<pthread_attr_t>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( pthread_attr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_attr_t ) ) . __size as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_attr_t ) , "::"
                , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_attr_t ) ) . __align as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_attr_t ) , "::"
                , stringify ! ( __align ) ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(::core::mem::size_of::<__pthread_internal_slist>() , 4usize ,
               concat ! (
               "Size of: " , stringify ! ( __pthread_internal_slist ) ));
    assert_eq! (::core::mem::align_of::<__pthread_internal_slist>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( __pthread_internal_slist ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __pthread_internal_slist ) ) . __next as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __pthread_internal_slist ) , "::" , stringify ! ( __next ) ));
}
impl Clone for __pthread_internal_slist {
    fn clone(&self) -> Self { *self }
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Copy)]
pub union pthread_mutex_t {
    pub __data: pthread_mutex_t___pthread_mutex_s,
    pub __size: [::cty::c_char; 24usize],
    pub __align: ::cty::c_long,
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_mutex_t___pthread_mutex_s {
    pub __lock: ::cty::c_int,
    pub __count: ::cty::c_uint,
    pub __owner: ::cty::c_int,
    pub __kind: ::cty::c_int,
    pub __nusers: ::cty::c_uint,
    pub __bindgen_anon_1: pthread_mutex_t___pthread_mutex_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union pthread_mutex_t___pthread_mutex_s__bindgen_ty_1 {
    pub __elision_data: pthread_mutex_t___pthread_mutex_s__bindgen_ty_1__bindgen_ty_1,
    pub __list: __pthread_slist_t,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_mutex_t___pthread_mutex_s__bindgen_ty_1__bindgen_ty_1 {
    pub __espins: ::cty::c_short,
    pub __elision: ::cty::c_short,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::core::mem::size_of::<pthread_mutex_t___pthread_mutex_s__bindgen_ty_1__bindgen_ty_1>()
               , 4usize , concat ! (
               "Size of: " , stringify ! (
               pthread_mutex_t___pthread_mutex_s__bindgen_ty_1__bindgen_ty_1 )
               ));
    assert_eq! (::core::mem::align_of::<pthread_mutex_t___pthread_mutex_s__bindgen_ty_1__bindgen_ty_1>()
                , 2usize , concat ! (
                "Alignment of " , stringify ! (
                pthread_mutex_t___pthread_mutex_s__bindgen_ty_1__bindgen_ty_1
                ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                pthread_mutex_t___pthread_mutex_s__bindgen_ty_1__bindgen_ty_1
                ) ) . __espins as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s__bindgen_ty_1__bindgen_ty_1
                ) , "::" , stringify ! ( __espins ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                pthread_mutex_t___pthread_mutex_s__bindgen_ty_1__bindgen_ty_1
                ) ) . __elision as * const _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s__bindgen_ty_1__bindgen_ty_1
                ) , "::" , stringify ! ( __elision ) ));
}
impl Clone for pthread_mutex_t___pthread_mutex_s__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s__bindgen_ty_1() {
    assert_eq!(::core::mem::size_of::<pthread_mutex_t___pthread_mutex_s__bindgen_ty_1>()
               , 4usize , concat ! (
               "Size of: " , stringify ! (
               pthread_mutex_t___pthread_mutex_s__bindgen_ty_1 ) ));
    assert_eq! (::core::mem::align_of::<pthread_mutex_t___pthread_mutex_s__bindgen_ty_1>()
                , 4usize , concat ! (
                "Alignment of " , stringify ! (
                pthread_mutex_t___pthread_mutex_s__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const pthread_mutex_t___pthread_mutex_s__bindgen_ty_1 )
                ) . __elision_data as * const _ as usize } , 0usize , concat !
                (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s__bindgen_ty_1 ) , "::" ,
                stringify ! ( __elision_data ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const pthread_mutex_t___pthread_mutex_s__bindgen_ty_1 )
                ) . __list as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s__bindgen_ty_1 ) , "::" ,
                stringify ! ( __list ) ));
}
impl Clone for pthread_mutex_t___pthread_mutex_s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s() {
    assert_eq!(::core::mem::size_of::<pthread_mutex_t___pthread_mutex_s>() ,
               24usize , concat ! (
               "Size of: " , stringify ! ( pthread_mutex_t___pthread_mutex_s )
               ));
    assert_eq! (::core::mem::align_of::<pthread_mutex_t___pthread_mutex_s>() ,
                4usize , concat ! (
                "Alignment of " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __lock as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __lock ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __count as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __count ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __owner as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __owner ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __kind as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __kind ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __nusers as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __nusers ) ));
}
impl Clone for pthread_mutex_t___pthread_mutex_s {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(::core::mem::size_of::<pthread_mutex_t>() , 24usize , concat !
               ( "Size of: " , stringify ! ( pthread_mutex_t ) ));
    assert_eq! (::core::mem::align_of::<pthread_mutex_t>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( pthread_mutex_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t ) ) . __data as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutex_t ) ,
                "::" , stringify ! ( __data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t ) ) . __size as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutex_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t ) ) . __align as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutex_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union pthread_mutexattr_t {
    pub __size: [::cty::c_char; 4usize],
    pub __align: ::cty::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(::core::mem::size_of::<pthread_mutexattr_t>() , 4usize , concat
               ! ( "Size of: " , stringify ! ( pthread_mutexattr_t ) ));
    assert_eq! (::core::mem::align_of::<pthread_mutexattr_t>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( pthread_mutexattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutexattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutexattr_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutexattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutexattr_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub union pthread_cond_t {
    pub __data: pthread_cond_t__bindgen_ty_1,
    pub __size: [::cty::c_char; 48usize],
    pub __align: ::cty::c_longlong,
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_cond_t__bindgen_ty_1 {
    pub __bindgen_anon_1: pthread_cond_t__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: pthread_cond_t__bindgen_ty_1__bindgen_ty_2,
    pub __g_refs: [::cty::c_uint; 2usize],
    pub __g_size: [::cty::c_uint; 2usize],
    pub __g1_orig_size: ::cty::c_uint,
    pub __wrefs: ::cty::c_uint,
    pub __g_signals: [::cty::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy)]
pub union pthread_cond_t__bindgen_ty_1__bindgen_ty_1 {
    pub __wseq: ::cty::c_ulonglong,
    pub __wseq32: pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::cty::c_uint,
    pub __high: ::cty::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::core::mem::size_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()
               , 8usize , concat ! (
               "Size of: " , stringify ! (
               pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (::core::mem::align_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()
                , 4usize , concat ! (
                "Alignment of " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 ) ) .
                __low as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 ) ,
                "::" , stringify ! ( __low ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 ) ) .
                __high as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 ) ,
                "::" , stringify ! ( __high ) ));
}
impl Clone for pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::core::mem::size_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_1>()
               , 8usize , concat ! (
               "Size of: " , stringify ! (
               pthread_cond_t__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (::core::mem::align_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_1>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & (
                * ( 0 as * const pthread_cond_t__bindgen_ty_1__bindgen_ty_1 )
                ) . __wseq as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1 ) , "::" ,
                stringify ! ( __wseq ) ));
    assert_eq! (unsafe {
                & (
                * ( 0 as * const pthread_cond_t__bindgen_ty_1__bindgen_ty_1 )
                ) . __wseq32 as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1 ) , "::" ,
                stringify ! ( __wseq32 ) ));
}
impl Clone for pthread_cond_t__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union pthread_cond_t__bindgen_ty_1__bindgen_ty_2 {
    pub __g1_start: ::cty::c_ulonglong,
    pub __g1_start32: pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::cty::c_uint,
    pub __high: ::cty::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(::core::mem::size_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>()
               , 8usize , concat ! (
               "Size of: " , stringify ! (
               pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 ) ));
    assert_eq! (::core::mem::align_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>()
                , 4usize , concat ! (
                "Alignment of " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 ) ) .
                __low as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 ) ,
                "::" , stringify ! ( __low ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 ) ) .
                __high as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 ) ,
                "::" , stringify ! ( __high ) ));
}
impl Clone for pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(::core::mem::size_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_2>()
               , 8usize , concat ! (
               "Size of: " , stringify ! (
               pthread_cond_t__bindgen_ty_1__bindgen_ty_2 ) ));
    assert_eq! (::core::mem::align_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_2>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2 ) ));
    assert_eq! (unsafe {
                & (
                * ( 0 as * const pthread_cond_t__bindgen_ty_1__bindgen_ty_2 )
                ) . __g1_start as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2 ) , "::" ,
                stringify ! ( __g1_start ) ));
    assert_eq! (unsafe {
                & (
                * ( 0 as * const pthread_cond_t__bindgen_ty_1__bindgen_ty_2 )
                ) . __g1_start32 as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2 ) , "::" ,
                stringify ! ( __g1_start32 ) ));
}
impl Clone for pthread_cond_t__bindgen_ty_1__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1() {
    assert_eq!(::core::mem::size_of::<pthread_cond_t__bindgen_ty_1>() ,
               48usize , concat ! (
               "Size of: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) ));
    assert_eq! (::core::mem::align_of::<pthread_cond_t__bindgen_ty_1>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( pthread_cond_t__bindgen_ty_1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __g_refs as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __g_refs
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __g_size as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __g_size
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __g1_orig_size as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! (
                __g1_orig_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __wrefs as * const _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __wrefs
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __g_signals as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! (
                __g_signals ) ));
}
impl Clone for pthread_cond_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(::core::mem::size_of::<pthread_cond_t>() , 48usize , concat ! (
               "Size of: " , stringify ! ( pthread_cond_t ) ));
    assert_eq! (::core::mem::align_of::<pthread_cond_t>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( pthread_cond_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t ) ) . __data as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::"
                , stringify ! ( __data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t ) ) . __size as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::"
                , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t ) ) . __align as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::"
                , stringify ! ( __align ) ));
}
#[repr(C)]
#[derive(Copy)]
pub union pthread_condattr_t {
    pub __size: [::cty::c_char; 4usize],
    pub __align: ::cty::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(::core::mem::size_of::<pthread_condattr_t>() , 4usize , concat
               ! ( "Size of: " , stringify ! ( pthread_condattr_t ) ));
    assert_eq! (::core::mem::align_of::<pthread_condattr_t>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( pthread_condattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_condattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_condattr_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_condattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_condattr_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
pub type pthread_key_t = ::cty::c_uint;
pub type pthread_once_t = ::cty::c_int;
#[repr(C)]
#[derive(Copy)]
pub union pthread_rwlock_t {
    pub __data: pthread_rwlock_t__bindgen_ty_1,
    pub __size: [::cty::c_char; 32usize],
    pub __align: ::cty::c_long,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_rwlock_t__bindgen_ty_1 {
    pub __readers: ::cty::c_uint,
    pub __writers: ::cty::c_uint,
    pub __wrphase_futex: ::cty::c_uint,
    pub __writers_futex: ::cty::c_uint,
    pub __pad3: ::cty::c_uint,
    pub __pad4: ::cty::c_uint,
    pub __flags: ::cty::c_uchar,
    pub __shared: ::cty::c_uchar,
    pub __rwelision: ::cty::c_schar,
    pub __pad2: ::cty::c_uchar,
    pub __cur_writer: ::cty::c_int,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t__bindgen_ty_1() {
    assert_eq!(::core::mem::size_of::<pthread_rwlock_t__bindgen_ty_1>() ,
               32usize , concat ! (
               "Size of: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 )
               ));
    assert_eq! (::core::mem::align_of::<pthread_rwlock_t__bindgen_ty_1>() ,
                4usize , concat ! (
                "Alignment of " , stringify ! ( pthread_rwlock_t__bindgen_ty_1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __readers as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __readers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __writers as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __writers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __wrphase_futex as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __wrphase_futex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __writers_futex as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __writers_futex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __pad3 as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __pad3
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __pad4 as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __pad4
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __flags as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __shared as * const _ as usize } , 25usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __shared ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __rwelision as * const _ as usize } , 26usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __rwelision ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __pad2 as * const _ as usize } , 27usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __pad2
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __cur_writer as * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __cur_writer ) ));
}
impl Clone for pthread_rwlock_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(::core::mem::size_of::<pthread_rwlock_t>() , 32usize , concat !
               ( "Size of: " , stringify ! ( pthread_rwlock_t ) ));
    assert_eq! (::core::mem::align_of::<pthread_rwlock_t>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( pthread_rwlock_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t ) ) . __data as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlock_t ) ,
                "::" , stringify ! ( __data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t ) ) . __size as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlock_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t ) ) . __align as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlock_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union pthread_rwlockattr_t {
    pub __size: [::cty::c_char; 8usize],
    pub __align: ::cty::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(::core::mem::size_of::<pthread_rwlockattr_t>() , 8usize ,
               concat ! ( "Size of: " , stringify ! ( pthread_rwlockattr_t )
               ));
    assert_eq! (::core::mem::align_of::<pthread_rwlockattr_t>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( pthread_rwlockattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlockattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlockattr_t )
                , "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlockattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlockattr_t )
                , "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
pub type pthread_spinlock_t = ::cty::c_int;
#[repr(C)]
#[derive(Copy)]
pub union pthread_barrier_t {
    pub __size: [::cty::c_char; 20usize],
    pub __align: ::cty::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(::core::mem::size_of::<pthread_barrier_t>() , 20usize , concat
               ! ( "Size of: " , stringify ! ( pthread_barrier_t ) ));
    assert_eq! (::core::mem::align_of::<pthread_barrier_t>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( pthread_barrier_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrier_t ) ) . __size as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrier_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrier_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrier_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_barrier_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union pthread_barrierattr_t {
    pub __size: [::cty::c_char; 4usize],
    pub __align: ::cty::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(::core::mem::size_of::<pthread_barrierattr_t>() , 4usize ,
               concat ! ( "Size of: " , stringify ! ( pthread_barrierattr_t )
               ));
    assert_eq! (::core::mem::align_of::<pthread_barrierattr_t>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( pthread_barrierattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrierattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrierattr_t )
                , "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrierattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrierattr_t )
                , "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_barrierattr_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn random() -> ::cty::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::cty::c_uint);
}
extern "C" {
    pub fn initstate(__seed: ::cty::c_uint, __statebuf: *mut ::cty::c_char,
                     __statelen: usize) -> *mut ::cty::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::cty::c_char) -> *mut ::cty::c_char;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::cty::c_int,
    pub rand_deg: ::cty::c_int,
    pub rand_sep: ::cty::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(::core::mem::size_of::<random_data>() , 28usize , concat ! (
               "Size of: " , stringify ! ( random_data ) ));
    assert_eq! (::core::mem::align_of::<random_data>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( random_data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . fptr as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( fptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rptr as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . state as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rand_type as * const _
                as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rand_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rand_deg as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rand_deg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rand_sep as * const _
                as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rand_sep ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . end_ptr as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( end_ptr ) ));
}
impl Clone for random_data {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32)
     -> ::cty::c_int;
}
extern "C" {
    pub fn srandom_r(__seed: ::cty::c_uint, __buf: *mut random_data)
     -> ::cty::c_int;
}
extern "C" {
    pub fn initstate_r(__seed: ::cty::c_uint, __statebuf: *mut ::cty::c_char,
                       __statelen: usize, __buf: *mut random_data)
     -> ::cty::c_int;
}
extern "C" {
    pub fn setstate_r(__statebuf: *mut ::cty::c_char, __buf: *mut random_data)
     -> ::cty::c_int;
}
extern "C" {
    pub fn rand() -> ::cty::c_int;
}
extern "C" {
    pub fn srand(__seed: ::cty::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::cty::c_uint) -> ::cty::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::cty::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::cty::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::cty::c_ushort) -> ::cty::c_long;
}
extern "C" {
    pub fn mrand48() -> ::cty::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::cty::c_ushort) -> ::cty::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::cty::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::cty::c_ushort) -> *mut ::cty::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::cty::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct drand48_data {
    pub __x: [::cty::c_ushort; 3usize],
    pub __old_x: [::cty::c_ushort; 3usize],
    pub __c: ::cty::c_ushort,
    pub __init: ::cty::c_ushort,
    pub __a: ::cty::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(::core::mem::size_of::<drand48_data>() , 24usize , concat ! (
               "Size of: " , stringify ! ( drand48_data ) ));
    assert_eq! (::core::mem::align_of::<drand48_data>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( drand48_data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __x as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __old_x as * const _
                as usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __old_x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __c as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __c ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __init as * const _ as
                usize } , 14usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __init ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __a as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __a ) ));
}
impl Clone for drand48_data {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64)
     -> ::cty::c_int;
}
extern "C" {
    pub fn erand48_r(__xsubi: *mut ::cty::c_ushort,
                     __buffer: *mut drand48_data, __result: *mut f64)
     -> ::cty::c_int;
}
extern "C" {
    pub fn lrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::cty::c_long) -> ::cty::c_int;
}
extern "C" {
    pub fn nrand48_r(__xsubi: *mut ::cty::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::cty::c_long) -> ::cty::c_int;
}
extern "C" {
    pub fn mrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::cty::c_long) -> ::cty::c_int;
}
extern "C" {
    pub fn jrand48_r(__xsubi: *mut ::cty::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::cty::c_long) -> ::cty::c_int;
}
extern "C" {
    pub fn srand48_r(__seedval: ::cty::c_long, __buffer: *mut drand48_data)
     -> ::cty::c_int;
}
extern "C" {
    pub fn seed48_r(__seed16v: *mut ::cty::c_ushort,
                    __buffer: *mut drand48_data) -> ::cty::c_int;
}
extern "C" {
    pub fn lcong48_r(__param: *mut ::cty::c_ushort,
                     __buffer: *mut drand48_data) -> ::cty::c_int;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::cty::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::cty::c_void;
}
extern "C" {
    pub fn realloc(__ptr: *mut ::cty::c_void, __size: usize)
     -> *mut ::cty::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::cty::c_void);
}
extern "C" {
    pub fn cfree(__ptr: *mut ::cty::c_void);
}
extern "C" {
    pub fn alloca(__size: usize) -> *mut ::cty::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::cty::c_void;
}
extern "C" {
    pub fn posix_memalign(__memptr: *mut *mut ::cty::c_void,
                          __alignment: usize, __size: usize) -> ::cty::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize)
     -> *mut ::cty::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::core::option::Option<unsafe extern "C" fn()>)
     -> ::cty::c_int;
}
extern "C" {
    pub fn at_quick_exit(__func:
                             ::core::option::Option<unsafe extern "C" fn()>)
     -> ::cty::c_int;
}
extern "C" {
    pub fn on_exit(__func:
                       ::core::option::Option<unsafe extern "C" fn(__status:
                                                                       ::cty::c_int,
                                                                   __arg:
                                                                       *mut ::cty::c_void)>,
                   __arg: *mut ::cty::c_void) -> ::cty::c_int;
}
extern "C" {
    pub fn exit(__status: ::cty::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::cty::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::cty::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::cty::c_char) -> *mut ::cty::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::cty::c_char) -> ::cty::c_int;
}
extern "C" {
    pub fn setenv(__name: *const ::cty::c_char, __value: *const ::cty::c_char,
                  __replace: ::cty::c_int) -> ::cty::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::cty::c_char) -> ::cty::c_int;
}
extern "C" {
    pub fn clearenv() -> ::cty::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::cty::c_char) -> *mut ::cty::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::cty::c_char) -> ::cty::c_int;
}
extern "C" {
    pub fn mkstemps(__template: *mut ::cty::c_char, __suffixlen: ::cty::c_int)
     -> ::cty::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::cty::c_char) -> *mut ::cty::c_char;
}
extern "C" {
    pub fn system(__command: *const ::cty::c_char) -> ::cty::c_int;
}
extern "C" {
    pub fn realpath(__name: *const ::cty::c_char,
                    __resolved: *mut ::cty::c_char) -> *mut ::cty::c_char;
}
pub type __compar_fn_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *const ::cty::c_void,
                                                arg2: *const ::cty::c_void)
                               -> ::cty::c_int>;
extern "C" {
    pub fn bsearch(__key: *const ::cty::c_void, __base: *const ::cty::c_void,
                   __nmemb: usize, __size: usize, __compar: __compar_fn_t)
     -> *mut ::cty::c_void;
}
extern "C" {
    pub fn qsort(__base: *mut ::cty::c_void, __nmemb: usize, __size: usize,
                 __compar: __compar_fn_t);
}
extern "C" {
    pub fn abs(__x: ::cty::c_int) -> ::cty::c_int;
}
extern "C" {
    pub fn labs(__x: ::cty::c_long) -> ::cty::c_long;
}
extern "C" {
    pub fn llabs(__x: ::cty::c_longlong) -> ::cty::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::cty::c_int, __denom: ::cty::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::cty::c_long, __denom: ::cty::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(__numer: ::cty::c_longlong, __denom: ::cty::c_longlong)
     -> lldiv_t;
}
extern "C" {
    pub fn ecvt(__value: f64, __ndigit: ::cty::c_int,
                __decpt: *mut ::cty::c_int, __sign: *mut ::cty::c_int)
     -> *mut ::cty::c_char;
}
extern "C" {
    pub fn fcvt(__value: f64, __ndigit: ::cty::c_int,
                __decpt: *mut ::cty::c_int, __sign: *mut ::cty::c_int)
     -> *mut ::cty::c_char;
}
extern "C" {
    pub fn gcvt(__value: f64, __ndigit: ::cty::c_int,
                __buf: *mut ::cty::c_char) -> *mut ::cty::c_char;
}
extern "C" {
    pub fn qecvt(__value: f64, __ndigit: ::cty::c_int,
                 __decpt: *mut ::cty::c_int, __sign: *mut ::cty::c_int)
     -> *mut ::cty::c_char;
}
extern "C" {
    pub fn qfcvt(__value: f64, __ndigit: ::cty::c_int,
                 __decpt: *mut ::cty::c_int, __sign: *mut ::cty::c_int)
     -> *mut ::cty::c_char;
}
extern "C" {
    pub fn qgcvt(__value: f64, __ndigit: ::cty::c_int,
                 __buf: *mut ::cty::c_char) -> *mut ::cty::c_char;
}
extern "C" {
    pub fn ecvt_r(__value: f64, __ndigit: ::cty::c_int,
                  __decpt: *mut ::cty::c_int, __sign: *mut ::cty::c_int,
                  __buf: *mut ::cty::c_char, __len: usize) -> ::cty::c_int;
}
extern "C" {
    pub fn fcvt_r(__value: f64, __ndigit: ::cty::c_int,
                  __decpt: *mut ::cty::c_int, __sign: *mut ::cty::c_int,
                  __buf: *mut ::cty::c_char, __len: usize) -> ::cty::c_int;
}
extern "C" {
    pub fn qecvt_r(__value: f64, __ndigit: ::cty::c_int,
                   __decpt: *mut ::cty::c_int, __sign: *mut ::cty::c_int,
                   __buf: *mut ::cty::c_char, __len: usize) -> ::cty::c_int;
}
extern "C" {
    pub fn qfcvt_r(__value: f64, __ndigit: ::cty::c_int,
                   __decpt: *mut ::cty::c_int, __sign: *mut ::cty::c_int,
                   __buf: *mut ::cty::c_char, __len: usize) -> ::cty::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::cty::c_char, __n: usize) -> ::cty::c_int;
}
extern "C" {
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::cty::c_char, __n: usize)
     -> ::cty::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::cty::c_char, __wchar: wchar_t) -> ::cty::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::cty::c_char,
                    __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::cty::c_char, __pwcs: *const wchar_t,
                    __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::cty::c_char) -> ::cty::c_int;
}
extern "C" {
    pub fn getsubopt(__optionp: *mut *mut ::cty::c_char,
                     __tokens: *const *const ::cty::c_char,
                     __valuep: *mut *mut ::cty::c_char) -> ::cty::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::cty::c_int)
     -> ::cty::c_int;
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum nrf_gpio_pin_dir_t {
    NRF_GPIO_PIN_DIR_INPUT = 0,
    NRF_GPIO_PIN_DIR_OUTPUT = 1,
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum nrf_gpio_pin_input_t {
    NRF_GPIO_PIN_INPUT_CONNECT = 0,
    NRF_GPIO_PIN_INPUT_DISCONNECT = 1,
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum nrf_gpio_pin_pull_t {
    NRF_GPIO_PIN_NOPULL = 0,
    NRF_GPIO_PIN_PULLDOWN = 1,
    NRF_GPIO_PIN_PULLUP = 3,
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum nrf_gpio_pin_drive_t {
    NRF_GPIO_PIN_S0S1 = 0,
    NRF_GPIO_PIN_H0S1 = 1,
    NRF_GPIO_PIN_S0H1 = 2,
    NRF_GPIO_PIN_H0H1 = 3,
    NRF_GPIO_PIN_D0S1 = 4,
    NRF_GPIO_PIN_D0H1 = 5,
    NRF_GPIO_PIN_S0D1 = 6,
    NRF_GPIO_PIN_H0D1 = 7,
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum nrf_gpio_pin_sense_t {
    NRF_GPIO_PIN_NOSENSE = 0,
    NRF_GPIO_PIN_SENSE_LOW = 3,
    NRF_GPIO_PIN_SENSE_HIGH = 2,
}
extern "C" {
    pub fn bsp_board_led_state_get(led_idx: u32) -> bool;
}
extern "C" {
    pub fn bsp_board_led_on(led_idx: u32);
}
extern "C" {
    pub fn bsp_board_led_off(led_idx: u32);
}
extern "C" {
    pub fn bsp_board_led_invert(led_idx: u32);
}
extern "C" {
    pub fn bsp_board_leds_off();
}
extern "C" {
    pub fn bsp_board_leds_on();
}
extern "C" {
    pub fn bsp_board_leds_init();
}
extern "C" {
    pub fn bsp_board_pin_to_led_idx(pin_number: u32) -> u32;
}
extern "C" {
    pub fn bsp_board_led_idx_to_pin(led_idx: u32) -> u32;
}
extern "C" {
    pub fn bsp_board_button_state_get(button_idx: u32) -> bool;
}
extern "C" {
    pub fn bsp_board_buttons_init();
}
extern "C" {
    pub fn bsp_board_pin_to_button_idx(pin_number: u32) -> u32;
}
extern "C" {
    pub fn bsp_board_button_idx_to_pin(button_idx: u32) -> u32;
}
extern "C" {
    pub fn _nrf_delay_ms(number_of_ms: u32);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __va_list {
    pub __ap: *mut ::cty::c_void,
}
#[test]
fn bindgen_test_layout___va_list() {
    assert_eq!(::core::mem::size_of::<__va_list>() , 4usize , concat ! (
               "Size of: " , stringify ! ( __va_list ) ));
    assert_eq! (::core::mem::align_of::<__va_list>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( __va_list ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list ) ) . __ap as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list ) , "::" ,
                stringify ! ( __ap ) ));
}
impl Clone for __va_list {
    fn clone(&self) -> Self { *self }
}
pub type __builtin_va_list = __va_list;
